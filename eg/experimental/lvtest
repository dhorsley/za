#!/usr/bin/za

# === Struct Definitions ===

struct Node
    Name string
    Val  int
endstruct

struct Container
    Inner any       # will store a map holding Node
    Items []        # array of Holder (dynamic type)
endstruct

struct Holder
    Thing []int
endstruct

# === Setup ===

# Create a Node instance
showstruct
println "Node() type  : ",Node().kind
n1 = Node()
n1.Name = "leaf"
n1.Val = 99
println "New Node value: ",n1

# Store it in a map
var m map
m["inner"] = n1

# Create Container and assign values
c = Container()
c.Inner = m
c.Items = [Holder(), Holder()]
println "m       : ",m

c.Items[0].Thing = [9,8,7]
c.Items[1].Thing = [6,5,4]
println "built container c: %#v".format(c)

# === Fixed-size array tests ===
mat = [[1,2],[3,4],5,6]
println "Mat before chained assignment : ",mat
mat[1][1] = 42
println "Mat after chained assignment  : ",mat
assert mat[1][1] == 42

var labels [4]string
labels[0], labels[1] = ["a", "b"]
assert labels[1] == "b"

# === Basic multi-assignment ===
tmp = [5, 6]
a, b = tmp
assert a == 5
assert b == 6
println "a,b:{a},{b}"

# === Discard (`_`) use ===
vals = [100, 200]
x, _ = vals
assert x == 100
println "x:",x

# === Nested tuple unpack (manual split) ===
group = [[1, 2], [3, 4]]
println "group: ",group

g1a,g1b = group
println "g1a:",g1a
println "g1b:",g1b


