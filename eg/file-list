#!/usr/bin/za

# read a file line-by-line
# test filter and map operators on it

# fixed starting length of array to save on reallocations (they really slow it down)
var words [110000]string
var n int

testfile="/usr/share/dict/american-english"

case release_id()
is "fedora"
    testfile="/usr/share/dict/words"
contains "ubuntu|debian"
    pkg="wamerican"
    # example quiet install for missing package:
    on !is_installed(pkg) do install(pkg,true)
endcase

if is_file(testfile)
    q=fopen(testfile,"r")
    while !feof(q)
        words[n]=fread(q,"\n")
        n+=1
    endwhile
    fclose(q)
else
    exit 1,"File not found. ({testfile})"
endif

println n

println "starting with z and len > 4:"
w1 = words[:n] ?> "# ~ `^z` and #.len>4"
println w1,"\n"

println "mapped to upper then drop apostrophes and lose front and back char and get unique words:"
println ( w1 -> "upper(#)" -> `#.tr("d","'")` -> "#[1:#.len-1]" ).uniq ,"\n"


