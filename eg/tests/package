#!/usr/bin/za

doc `
    We should add more tests for local file and repository installs/uninstalls.
`

println "\nSetup...\n"

println "Building test package."
| dpkg-deb --build za-pkg_1.0-1

println "Manual Install..."
| sudo dpkg -i za-pkg_1.0-1.deb
| sudo dpkg -V za-pkg
| sudo dpkg -r za-pkg

println "\nTests...\n"


test "vcmp" group "package"
    assert vcmp("1.0.0","0.9.9")==1
    assert vcmp("1.0.0","1.0.0")==0
    assert vcmp("1.0.0","19.0.1")==-1
endtest

test "is_installed" group "package"
    assert is_installed("binutils")
    assert ! is_installed("za-pkg")
endtest 


test "service" group "package"

    svc="systemd-timesyncd"

    doc `Need to install a dummy service here. This one ({svc}) won't be available everywhere.`

    stop=service(svc,"stop")
    realstop =| sudo systemctl status {svc}
    stopreg=`Active: inactive \(dead\)`
    stopmsg=`Active: inactive (dead)`
    println "filter : [",filter(realstop,stopreg),"]"

    st1=service(svc,"status")

    start=service(svc,"start")
    realstart =| sudo systemctl status {svc}
    startreg=`Active: active \(running\)`
    startmsg=`Active: active (running)`
    println "filter : [",filter(realstart,startreg),"]"

    println "Stop     -> {stop}"
    println "Status 1 -> {st1}"
    println "Start    -> {start}"

    assert stopmsg == filter(realstop,stopreg)
    assert startmsg == filter(realstart,startreg)

    assert ( st1 && stop && start )

endtest


test "install" group "package"
    if install("https://zalang.org/files/za-pkg_1.0-1.deb")==0
        | sudo dpkg -V za-pkg
        println "Returned dpkg code : {last()}"
        assert last()==0
    else
        println "skipped package check."
        assert false
    endif
endtest

test "uninstall" group "package"
    uninstall("za-pkg")
    ret =| dpkg -V za-pkg 2>/dev/null
    println "Returned code : {last()}"
    assert last()!=0
endtest

on is_file("za_test.out") do | chown ${SUDO_USER}. za_test.out



