#!/usr/bin/za

# test all of the string functions

module "test_modules/test_string_setup"

define header(n)
    println "\n[#1]{n}[#-]"
enddef

test "lines" group "string"
    header(_test_name)
    l1=lines(s,"25:25")
    doc "line : {l1}"
    assert field(l1,1)=="25"
    l2=lines(s,"0:0")
    doc "line : {l2}"
    assert l2=="00 English: The quick brown fox jumps over the lazy dog."
endtest 

# uses var l1 from above
test "field-lower-substr" group "string"
    header(_test_name)
    w=lower(field(l1,2))
    assert substr(w,0,len(w)-1)=="french"
    doc "word : {w}"
endtest

# uses var l1 from above
test "field" group "string"
    header(_test_name)
    assert field(l1,12)=="gÃ¨le"
endtest

test "pad" group "string"
    header(_test_name)
    t="*"
    doc "left justify   : ",pad(t,-1,9,"-")
    assert pad(t,-1,9,"-") == "*--------"
    doc "centre justify : ",pad(t, 0,9,"-")
    assert pad(t, 0,9,"-") == "----*----"
    doc "right justify  : ",pad(t, 1,9,"-")
    assert pad(t, 1,9,"-") == "--------*"
endtest

test "count" group "string"
    header(_test_name)

    with s as file
        ac =| awk 'END{print NR}' {file}
        wc =| wc -l {file} | cut -f1 -d" "
    endwith

    println "awk thinks : {ac}"
    println "wc thinks  : {wc}"
    println "we think   : {count(s)}"

    assert count(s) == 33

endtest

test "start" group "string"
    header(_test_name)
    assert start("abracadabra","abra")
    assert !start("abracadabra","cada")
endtest

test "end" group "string"
    header(_test_name)
    assert end("abracadabra","abra")
    assert !end("abracadabra","cada")
endtest

test "match" group "string"
    header(_test_name)
    assert match("abracadabra","^abra")
    assert !match("abracadabra","cada$")
endtest

test "filter" group "string"
    header(_test_name)
    assert filter("abracadabra","^abra")=="abra"
    assert filter("abracadabra","cada$")!="cada"
endtest

test "substr" group "string"
    header(_test_name)
    t="marvin, the paranoid android"
    doc "test string : {t}"
    assert substr(t,0,6)=="marvin"
    assert substr(t,1,0)==""
    assert substr(t,1,4)=="arvi"
    assert substr(t,len(t)-4,4)=="roid"
endtest

test "gsub" group "string"
    header(_test_name)
    t="marvin, the paranoid android"
    doc "test string : {t}"
    assert gsub(t,"marvin","hank")=="hank, the paranoid android"
    assert gsub(t,"the","a")=="marvin, a paranoid android"
    assert gsub(t,"nomatch","a")==t
endtest

test "replace" group "string"
    header(_test_name)
    t="marvin, the paranoid android"
    doc "test string : {t}"
    assert replace(t,"^marvin","hank")=="hank, the paranoid android"
    assert replace(t,"^carvin","hank")==t
    assert replace(t,"^{t}$","allofit")=="allofit"
endtest

test "trim" group "string"
    header(_test_name)
    t="   marvin   "
    doc "test string : {t}"
    assert trim(t,-1)=="marvin   "
    assert trim(t,1) =="   marvin"
    assert trim(t,0)=="marvin"
endtest

test "get_value" group "string"
    header(_test_name)
    t="nothere\nhere?\nhere=found!\nnot here\nor here"
    doc get_value(t,"here")
    assert get_value(t,"here")=="found!"
endtest

test "line_add" group "string"
    header(_test_name)
    t="1\n2\n3\n4\n5"
    n=t+"\nnext"
    assert line_add(t,"next")==n
endtest

test "line_delete" group "string"
    header(_test_name)
    t="1\n2\n3\n4\n5"
    n="1\n2\n4\n5"
    assert line_delete(t,"^3$")==n
endtest

test "line_replace" group "string"
    header(_test_name)
    t="1\n2\n3\n4\n5"
    n="1\n2\n3\nspiderpig\n5"
    assert line_replace(t,"^4","spiderpig")==n
endtest

test "line_add_before" group "string"
    header(_test_name)
    t="1\n2\n3\n4\n5"
    n1="spiderpig\n1\n2\n3\n4\n5"
    n2="1\n2\n3\n4\nspiderpig\n5"
    doc "t  ->\n<<",t,">>\n"
    assert line_add_before(t,"^1","spiderpig")==n1
    assert line_add_before(t,"^5","spiderpig")==n2
    doc "<<",line_add_before(t,"^1","spiderpig"),">>\n"
    doc "<<",line_add_before(t,"^5","spiderpig"),">>\n"
endtest

test "line_add_after" group "string"
    header(_test_name)
    t="1\n2\n3\n4\n5"
    n1="1\nspiderpig\n2\n3\n4\n5"
    n2="1\n2\n3\n4\n5\nspiderpig"
    doc "t  ->\n<<",t,">>\n"
    assert line_add_after(t,"^1","spiderpig")==n1
    assert line_add_after(t,"^5","spiderpig")==n2
    doc "<<",line_add_after(t,"^1","spiderpig"),">>\n"
    doc "<<",line_add_after(t,"^5","spiderpig"),">>\n"
endtest

test "line_match" group "string"
    header(_test_name)
    t="1\n2\n3\nspiderpig\n5"
    assert line_match(t,"spiderpig")
    assert ! line_match(t,"pigspider")
endtest

test "line_filter" group "string"
    header(_test_name)
    t="1\n2\n3\nspiderpig\n5"
    n1="1\n2\n3\n5"
    n2="spiderpig"
    assert line_filter(t,"^[0-9]+")==n1
    assert line_filter(t,"derpi")==n2
endtest

test "line_head" group "string"
    header(_test_name)
    doc "line_head always removes a trailing line separator"
    t="1\n2\n3\n4\n5"
    n="1\n2\n3"
    assert line_head(t,3)==n
    println "<<",line_head(t,3),">>\n"
endtest

test "line_tail" group "string"
    header(_test_name)
    doc "line_tail always removes a trailing line separator"
    t="1\n2\n3\n4\n5"
    n="3\n4\n5"
    assert line_tail(t,3)==n
    println "<<",line_tail(t,3),">>\n"
endtest

test "reverse" group "string"
    header(_test_name)
    t="5432 1"
    doc "test string : {t}"
    assert reverse(t)=="1 2345"
endtest

test "lower" group "string"
    header(_test_name)
    t="Big dogs, big dogs, landing on my face!"
    doc "test string : {t}"
    assert lower(t)=="big dogs, big dogs, landing on my face!"
endtest

test "upper" group "string"
    header(_test_name)
    t="I'm not shouting!!"
    doc "test string : {t}"
    assert upper(t)=="I'M NOT SHOUTING!!"
endtest

test "tr" group "string"
    header(_test_name)
    t="I'm  not shouting!!"
    doc "test string : {t}"
    assert tr(t,"d","'!")=="Im  not shouting"
    assert tr(t,"s","! ")=="I'm not shouting!"
endtest

test "split" group "string"
    header(_test_name)
    t="i must perform a quirkafleeg"
    ta=list_string(["i","must","perform","a","quirkafleeg"])
    s=split(t," ")
    check=true
    println "len(ta) = ",len(ta)
    println "len(s) = ",len(s)
    assert len(s)==len(ta)

    for e=0 to len(s)-1
        if s[e]!=ta[e]
            check=false
            break
        endif
    endfor

    println format("s -> %#v",s)
    println format("ta-> %#v",ta)

    assert check==true

endtest

test "join" group "string"
    header(_test_name)
    jt=["we","must","perform","a","quirkafleeg"]
    jta="we*must*perform*a*quirkafleeg"
    s=join(jt,"*")
    assert s==jta
endtest

test "collapse" group "string"
    header(_test_name)
    jt="we\nmust\nperform\na\nquirkafleeg"
    cta="we must perform a quirkafleeg"
    s=collapse(jt)
    assert s==cta
endtest

test "strpos" group "string"
    header(_test_name)
    t="we must perform a quirkafleeg"
    assert strpos(t,"we ")==0
    assert strpos(t,"we ",0)==0
    assert strpos(t,"must")==3
    assert strpos(t,"g")==len(t)-1
endtest




