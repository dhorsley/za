#!/usr/bin/za

doc `
    not portable example for getting the process list. requires compatible procfs and sane defaults.
    this is pretty slow, as we are combing through every /proc/$pid for a variety of things.
    also, priority may well be wrong. not properly adjusted for different scheduling types.
`

struct process
    pid         int
    name        string
    state       string
    ppid        int
    priority    int
    starttime   int
    uid         string
    gid         string
es

struct pid_lookup
    pid         int
    index       string
es


# (even more) hacky sort, as there's no builtin sort by struct field
define fsort(m)
    s=""
    foreach q in m
        s+="{=q.pid} {=q.index}\n"
    endfor
    return fieldsort(s,1,"n")
end

define splitOnZero(s)
    return split(s,as_string(char(0)))
end

struct statm_line
    size    int # tot prog size
    rss     int # page count
    shared  int # page count
    text    int # code 
    lib     int # 0
    data    int # data+stack
    dt      int # dirty page count (0)
endstruct

define ps(filter)

    on filter=="" do filter="^.*$"
    procs = dir("/proc") ?> `#.name ~ "^[0-9]+$"` -> `#.name`

    var args        map
    var proc_list   map
    var proc        process
    var parts       statm_line
    var mem         map

    foreach p in procs

        dn="/proc/"+p
        on !is_dir(dn) do continue

        # read data from .../stat
        ps = $in "{dn}/stat"

        # ignore name filtered processes
        cmd=ps.filter(`\(.*?\)`).tr("d","()")
        on !match(cmd,filter) do continue

        # populate line from stat
        ps.replace("\(.*?\)","command").fields

        proc.name     = cmd
        proc.pid      = F[1].as_int
        proc.state    = F[3]
        proc.ppid     = F[4].as_int
        rawpri=F[18].as_int
        proc.priority = (rawpri < 0) ? (abs(rawpri+1)) : rawpri
        proc.starttime= F[22].as_int

        # fetch command line arguments
        args[proc.pid]= $in "{dn}/cmdline".splitOnZero

        # read data from .../statm
        pm = $in "{dn}/statm"
        pm.fields

        parts.size    = F[mem_parts.size].as_int     # tot prog size
        parts.rss     = F[mem_parts.rss].as_int      # page count
        parts.shared  = F[mem_parts.shared].as_int   # page count
        parts.text    = F[mem_parts.text].as_int     # code 
        parts.lib     = F[mem_parts.lib].as_int      # 0
        parts.data    = F[mem_parts.data].as_int     # data+stack
        parts.dt      = F[mem_parts.dt].as_int       # dirty page count (0)
        mem[proc.pid] = parts

        # add process to list
        proc_list[proc.pid] = proc

    endfor

    var keys []pid_lookup
    var l pid_lookup
    foreach v in proc_list
        l.pid=v.pid
        l.index=v.name
        append_to(ref keys,l)
    endfor
    return proc_list,keys,args,mem
end

define short_size(d)
    unit=""
    if d>=1024; d=d/1024f; unit="K"; endif
    if d>=1024; d=d/1024f; unit="M"; endif
    if d>=1024; d=d/1024f; unit="G"; endif
    on d!=0 do return format("%.2f%s",d,unit)
    return ""
end

#
# MAIN
#


# args
force_colour=false
force_width=-1
filter=""

n=0
while argc()>n
    case argv(n)
    is "-f"
        force_colour=true
    is "-w"
        on ++n>=argc() do exit 1,"missing argument."
        force_width=argv(n).interpolate
        on not force_width.is_number do exit 1,"-w needs an int (not '{=argc(n)}')"
    or
        filter=argv(n)
        break
    endcase
    n++
endwhile

# setup
enum mem_parts ( size=1, rss, shared, text, lib, data, dt )
PAGESIZE = ${getconf PAGESIZE}.as_int

termless = term_w()==-1 and term_h()==-1
on not force_colour do ansi(!termless)

default_width=100
on force_width!=-1 do default_width=force_width

TW= termless ? default_width : term_w()
TH= termless ? 25  : term_h()

# fetch process list and sort by pid
res,keys,arglists,mem=ps(filter)
on keys.len>0 do keys=fsort(keys)

# display
title=format("\n[#bold]"+(termless?"":"[#ul]")+"%-7s %-7s %2s %9s %9s %9s %16s %4s %-"+as_string(TW-72)+"s[#-]",
                "PID","PPID","ST","VIRT","RSS","SHARED","USER","PRI","CMD"
)

println title
lines=0
odd=false

foreach r in keys

    if odd
        print bgrgb(0,30,29)
    else
        print bgrgb(0,20,27)
    endif
    odd=not odd

    p=res[field(r,1)]
    if can_read("/proc/{=p.pid}")
        s=stat("/proc/{=p.pid}")
        p.uid=s.Uid.as_string
        p.gid=s.Gid.as_string
        on username(p.uid.as_int)!="" do p.uid=username(p.uid.as_int)
        on groupname(p.gid.as_int)!="" do p.gid=groupname(p.gid.as_int)
    endif

    tempwidth=TW-72
    args=format("%v",arglists[p.pid])
    args=args.trim(0,"[]")

    defName=false

    if args=="" # no args list entry, resort to provided name
        args="["+p.name+"]"
        defName=true
    endif

    if !termless
        l=args.len
        args=args[0:(l<(tempwidth-1)?l:(tempwidth-1))]
        on args.len!=l do args+="[#2]â€¦[#-]"

        if defName
            args="[#1]"+args
            tempwidth+=4
        endif
    endif

    vsize = mem[p.pid].size * PAGESIZE
    rsize = mem[p.pid].rss * PAGESIZE
    ssize = mem[p.pid].shared * PAGESIZE

    vsize_string = vsize!=0 ? short_size(vsize) : "-"
    rsize_string = rsize!=0 ? short_size(rsize) : "-"
    ssize_string = ssize!=0 ? short_size(ssize) : "-"

    println format("[#5][#bold]%-7d[#boff] %-7d [#2]%2s %9s %9s %9s [#6]%16s [#7]%4d [#bold]%-"+tempwidth+"s[#-]",
            p.pid,p.ppid,p.state,
            vsize_string,rsize_string,ssize_string,
            p.uid,
            p.priority,args
    )

    if not termless
        if ++lines>=TH-2
            println title
            lines=0
        endif
    endif

endfor



