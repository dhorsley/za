#!/usr/bin/za

doc `
    not portable example for getting the process list. requires compatible procfs and sane defaults.
`

struct process
    pid         int
    name        string
    state       string
    ppid        int
    priority    int
    starttime   int
    uid         string
    gid         string
endstruct

define ps(filter)
    on filter==nil do filter="^.*$"
    procs = ${ls -1 /proc/*/stat}.line_filter("/[0-9]+/")

    var proc_list map
    var proc process
    foreach p in procs
        on !is_file(p) do continue
        ps = $in p      # @race: these files can go away
        cmd=ps.filter(`\(.*?\)`).tr("d","()")
        on !match(cmd,filter) do continue
        fields(ps)
        proc.pid      = F[1].int
        proc.state    = F[3]
        proc.ppid     = F[4].int
        proc.priority = F[18].int
        proc.starttime= F[22].int
        proc.name     = cmd
        proc_list[proc.pid] = proc
    endfor
    return proc_list
end

define gen_users()
    foreach u in $in "/etc/passwd"
        userlist[u.field(3,":")]=u.field(1,":")
    endfor
    return userlist
end

define gen_groups()
    foreach g in $in "/etc/group"
        grouplist[g.field(3,":")]=g.field(1,":")
    endfor
    return grouplist
end

input filter optarg 1

groups=gen_groups()
users=gen_users()

println format("\n[#bold][#ul]%-7s %-7s %2s %16s %16s %4s %-32s[#-]","PID","PPID","ST","USER","GROUP","PRI","CMD")
foreach p in ps(filter)
    if can_read("/proc/{=p.pid}")
        s=stat("/proc/{=p.pid}")
        p.uid=s.Uid.string
        p.gid=s.Gid.string
        on users[p.uid]!=nil  do p.uid=users[p.uid]
        on groups[p.gid]!=nil do p.gid=groups[p.gid]
    endif
    println format("[#5][#bold]%-7d[#boff] %-7d [#2]%2s [#6]%16s %16s [#7]%4d [#bold]%s[#-]",
            p.pid,p.ppid,p.state,
            string(p.uid),string(p.gid),
            p.priority,p.name
    )
endfor



