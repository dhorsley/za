#!/usr/bin/za -S

define clear_pane(p)
    pane select p
    pane redraw
    for e=1 to pane_h()-1
        clear_line(e,1)
    endfor
end

define full_cls()
    pane select "global"
    cls
end

define bytesize(i)
    unit="B"
    if i>=1099511627776
        unit="TB"; i=float(i)/1099511627776
    endif
    if i>=1073741824
        unit="GB"; i=float(i)/1073741824
    endif
    if i>=1048576
        unit="MB"; i=float(i)/1048576
    endif
    if i>=1024
        unit="KB"; i=float(i)/1024
    endif
    on unit=="B" do return "%d B".format(i)
    return format("%.3f %s",float(i),unit)
end

# @todo: add split on space:
define wrap(s)
    ns=""
    pw=pane_w()
    foreach l in s
        rem=l
        while rem.len > pw
            ns+=rem[:pw-2]+"\n "
            rem=rem[pw-2:]
        endwhile
        ns+=rem+"\n"
    endfor
    on s[s.len-1]!="\n" do ns=ns[:ns.len-1]
    return ns
end

define sort_dir(d)
    dl=dir(d)
    fd=[]
    if dl.len>0
        foreach f in dir(d)
            na[f.name]=f
        endfor
        nd=[]
        foreach f in na
            nd=append(nd,f)
        endfor
        sort(nd)
        # move dirs to top, dotted files to bottom
        foreach f in nd
            on f.isdir do append_to(ref fd,f)
        endfor
        foreach f in nd
            on f.isdir do continue
            on f.name[0]!="." do append_to(ref fd,f)
        endfor
        foreach f in nd
            on f.isdir do continue
            on f.name[0]=="." do append_to(ref fd,f)
        endfor
    endif
    return fd
end

define edit(f)
    coproc(false)
    capture_shell(false)
    | vi {f}
    capture_shell(true)
    coproc(true)
    return
end

define paginate(f)
    coproc(false)
    capture_shell(false)
    | view {f}
    capture_shell(true)
    coproc(true)
    return
end

define execute(f)
    coproc(false)
    capture_shell(false)
    full_cls()
    | {f}
    capture_shell(true)
    coproc(true)
    return
end

define popup(path,file)
    fullname=join([path,file.name],"/")
    fullname=fullname.tr("s","/")
    ftype=|file "{fullname}"
    px=sh/2-1
    print "[#b7][#1]"
    pane define "popup",px,1,8,sw,"Info","topline"
    pane select "popup"
    for e=1 to 7; clear_line(e,1); endfor
    at 1,1; print "path     : {path}"
    at 2,1; print "name     : {=file.name}"
    at 3,1; print "size     : {=file.size}"
    at 4,1; print "mode     : {=file.mode}"
    at 5,1; print "mod time : {=date_human(file.mtime)}"
    at 7,1; print wrap(ftype.out)
    k=keypress()
    print "[#b0][#7]"
    clear_pane("left")
    clear_pane("right")
end

def get_mode_char(mi)
    on is_symlink(mi) do return "L",true
    on is_pipe(mi) do return "p",true
    on is_device(mi) do return "D",true
    on is_socket(mi) do return "S",true
    # on is_setuid(mi) do return "u",true
    # on is_setgid(mi) do return "g",true
    # on is_sticky(mi) do return "t",true
    return "",false
end

def show_left(ld,lrow,lwinheight,cursorl)
    # show left files
    pane select "left"
    lrow_count=1
    for lfp = lrow to lrow+lwinheight
        on lfp>ld.len do break
        f=ld[lfp-1]
        colmax=f.name.len
        on colmax>maxsl do colmax=maxsl
        doinvert=?? (leftside && lrow_count==cursorl) "[#invert]":""
        ital    =?? (leftside && doinvert!="") "[#i1][#ul]":""
        mt,found=get_mode_char(f.mode.int)
        sz=" "*15
        if !found
            if f.isdir
                mt="[#1]d"
            else
                mt="[#4]f"
                # sz="%15d".format(f.size)
                sz="%15s".format(f.size.bytesize)
            endif
        else
            mt="[#5]"+mt
        endif
        om=dtoo(f.mode.int%512)
        at lrow_count++,1; print " {doinvert}%s [#3]%03s[#4] {ital}%-{=maxsl}s %s[#-]".format(mt,om,f.name[:colmax],sz)
    endfor
    return lrow_count
end

def show_right(rd,rrow,rwinheight,cursorr)
    # show right files
    pane select "right"
    rrow_count=1
    for rfp = rrow to rrow+rwinheight
        on rfp>rd.len do break
        f=rd[rfp-1]
        colmax=f.name.len
        on colmax>maxsr do colmax=maxsr
        doinvert=?? (not leftside and rrow_count==cursorr) "[#invert]":""
        ital    =?? (not leftside && doinvert!="") "[#i1][#ul]":""
        mt,found=get_mode_char(f.mode.int)
        sz=" "*15
        if !found
            if f.isdir
                mt="[#1]d"
            else
                mt="[#4]f"
                #sz="%15d".format(f.size)
                sz="%15s".format(f.size.bytesize)
            endif
        else
            mt="[#5]"+mt
        endif
        om=dtoo(f.mode.int%512)
        at rrow_count++,1; print " {doinvert}%s [#3]%03s[#4] {ital}%-{=maxsr}s %s[#-]".format(mt,om,f.name[:colmax],sz)
    endfor
    return rrow_count
end

def get_name()
    if leftside
        npath=lpath
        file=ld[lrow+cursorl-2]
    else
        npath=rpath
        file=rd[rrow+cursorr-2]
    endif
    return join([npath,file.name],"/").tr("s","/").fileabs
end

def refresh(lp,rp)
    clear_pane("left"); clear_pane("right")
    show_left(ld,lrow,lwinheight,cursorl)
    show_right(rd,rrow,rwinheight,cursorr)
end

def redef_layout()

    setglob sw=term_w()
    setglob sh=term_h()

    sm=int(sw/2)
    odd=sm!=(sw/2.0)
    right_offset=??odd 1,0

    setglob lx=2
    setglob ly=1
    setglob rx=2
    setglob ry=sm+1+right_offset
    setglob lh=sh-3
    setglob lw=sm
    setglob rh=sh-3
    setglob rw=sm
    setglob leftside=true

    cls
    pane define "banner",1,1,1,sw,"","none"

    setglob lrow=1
    setglob rrow=1
    setglob lwinheight=lh-2
    setglob rwinheight=rh-2
    setglob cursorl=1
    setglob cursorr=1

    ltitle=" [#b1][#0]Path : [#5]%s[#-] ".format(lpath)
    rtitle=" [#b1][#0]Path : [#6]%s[#-] ".format(rpath)
    pane define "left" ,lx,ly,lh,lw,ltitle,"double"
    pane define "right",rx,ry,rh,rw,rtitle,"double"

    setglob maxsl=lw-25
    setglob maxsr=rw-25

end

define empty_break()
    if leftside
        on ld.len==0 do return true
    else
        on rd.len==0 do return true
    endif
    return false
end


prompt colour 1

lpath="."; rpath="."
input lpath optarg 1
input rpath optarg 2
on not is_dir(lpath) do lpath="." 
on not is_dir(rpath) do rpath="." 
ld=sort_dir(lpath)
rd=sort_dir(rpath)

redef_layout()

quit=false
cursoroff()
while !quit

    # handle window resizes
    if sw!=term_w()
        redef_layout()
    endif

    print "[##][#4]"

    lrow_count=show_left(ld,lrow,lwinheight,cursorl)
    rrow_count=show_right(rd,rrow,rwinheight,cursorr)

    # display cursor
    if leftside
        pane select "left"; at cursorl,1; print "[#b1][#7][#blink]*[#-]"
    else
        pane select "right"; at cursorr,1; print "[#b1][#6][#blink]*[#-]"
    endif

    # banner
    pane select "banner"
    br="[#fbyellow][#bold][#b1]"

    at 0,0; print "[#b0]",term_w()*" "
    at 0,0
    print "[#7]zamc : {br}ret[#-] cd  {br}i[#-] info  {br}e[#-] edit  "
    print "{br}c[#-] copy  {br}r[#-] rename  {br}d[#-] delete  {br}n[#-] mkdir  "
    print "{br}v[#-] view  {br}x[#-] execute  {br}b[#-] back  {br}q[#-] quit"

    # user input
    k=keypress(100)

    when char(k)

    is "q"
        quit=true

    is "b"
        if leftside
            lpath=lpath.fileabs.parent
            ld=sort_dir(lpath)
            ltitle=" [#b1][#0]Path : [#5]%s[#-] ".format(lpath)
            clear_pane("left")
            pane define "left",lx,ly,lh,lw,ltitle,"double"
            lrow=1; cursorl=1
            lrow_count=show_left(ld,lrow,lwinheight,cursorl)
        else
            rpath=rpath.fileabs.parent
            rd=sort_dir(rpath)
            rtitle=" [#b1][#0]Path : [#6]%s[#-] ".format(rpath)
            clear_pane("right")
            pane define "right",rx,ry,rh,rw,rtitle,"double"
            rrow=1; cursorr=1
            rrow_count=show_right(rd,rrow,rwinheight,cursorr)
        endif

    is "c"
        # copy

        if leftside
            on ld.len==0 do break
            dst=rpath
        else
            on rd.len==0 do break
            dst=lpath
        endif

        n=get_name()

        if is_dir(n)
            | cp -pR {n} {dst}/
        else
            | cp {n} {dst}/
        endif

        if leftside
            rd=sort_dir(rpath)
        else
            ld=sort_dir(lpath)
        endif

        refresh()


    is "r"
        # rename
        on empty_break() do break

        n=get_name()
        pane select "global"
        clear_line(1,1)
        at 1,1; print "[#b7][#1]"
        prompt m "New Filename : "
        if leftside
            | mv {n} {lpath}/{m}
            ld=sort_dir(lpath)
        else
            | mv {n} {rpath}/{m}
            rd=sort_dir(rpath)
        endif
        refresh()

    is "d"
        # delete
        on empty_break() do break

        n=get_name()

        pane select "global"
        clear_line(1,1)
        at 1,1; print "** Press 'y' to confirm deletion! **"
        k=keypress()
        when k.char.lower
        is "y"
            if is_dir(n)
                | rm -fr {n}
            else
                delete(n)
            endif
        endwhen

        if leftside
            ld=sort_dir(lpath)
            cursorl=1; lrow=1
        else
            rd=sort_dir(rpath)
            cursorr=1; rrow=1
        endif

        refresh()


    is "n"
        # new directory (mkdir)

        pane select "global"
        clear_line(1,1)
        at 1,1; print "[#b7][#1]"
        prompt nd "New Directory Name : "

        if leftside
            | mkdir -p {lpath}/{nd}
            ld=sort_dir(lpath)
        else
            | mkdir -p {rpath}/{nd}
            rd=sort_dir(rpath)
        endif
        refresh()


    is "m"
        on empty_break() do break

        n=get_name()
        pane select "global"
        clear_line(1,1)
        at 1,1; print "[#b7][#1]"
        prompt m "New File Mode : "
        on is_number(m) do | chmod {m} {n}
        ld=sort_dir(lpath)
        rd=sort_dir(rpath)
        refresh()

    is "e"
        on empty_break() do break

        if leftside
            npath=lpath
            file=ld[lrow+cursorl-2]
        else
            npath=rpath
            file=rd[rrow+cursorr-2]
        endif
        fullname=join([npath,file.name],"/").tr("s","/").fileabs
        edit(fullname)
        refresh()

    is "v"
        on empty_break() do break

        if leftside
            npath=lpath
            file=ld[lrow+cursorl-2]
        else
            npath=rpath
            file=rd[rrow+cursorr-2]
        endif
        fullname=join([npath,file.name],"/").tr("s","/").fileabs
        paginate(fullname)
        refresh()

    is "x"
        on empty_break() do break

        if leftside
            npath=lpath
            file=ld[lrow+cursorl-2]
        else
            npath=rpath
            file=rd[rrow+cursorr-2]
        endif
        fullname=join([npath,file.name],"/").tr("s","/").fileabs
        execute(fullname)
        keypress()
        refresh()

    has k in 8..9
        leftside=!leftside

    has k==10
        if leftside
            cursorl+=1
            on cursorl>lwinheight do on lrow<ld.len-lwinheight do lrow++
        else
            cursorr+=1
            on cursorr>rwinheight do on rrow<rd.len-rwinheight do rrow++
        endif

    has k==11
        if leftside
            cursorl-=1
            on cursorl<1 do on lrow>1 do lrow-- 
        else
            cursorr-=1
            on cursorr<1 do on rrow>1 do rrow-- 
        endif

    has k==15
        # pgup
        if leftside
            cursorl-=10
            on cursorl<0 do cursorl=0
            if cursorl<1
                if lrow>10
                    lrow-=10
                else
                    on lrow>1 do lrow--
                endif
            endif
        else
            cursorr-=10
            on cursorr<0 do cursorr=0
            if cursorr<1
                if rrow>10
                    rrow-=10
                else
                    on rrow>1 do rrow--
                endif
            endif
        endif

    has k==14
        # pgdown
        if leftside
            cursorl+=10
            if cursorl>lwinheight
                if lrow<ld.len-lwinheight-10
                    cursorl-=10
                    lrow+=10
                else
                    on lrow<ld.len-lwinheight do lrow++
                endif
            endif
        else
            cursorr+=10
            if cursorr>rwinheight
                if rrow<rd.len-rwinheight-10
                    cursorr-=10
                    rrow+=10
                else
                    on rrow<rd.len-rwinheight do rrow++
                endif
            endif
        endif

    is "i"

        if leftside
            on ld.len==0 do break
        else
            on rd.len==0 do break
        endif

        if leftside
            old_path=lpath
            file=ld[lrow+cursorl-2]
            path=lpath
        else
            old_path=rpath
            file=rd[rrow+cursorr-2]
            path=rpath
        endif

        popup(path,file)

        redef_layout()
        refresh()

    has k==13

        on empty_break() do break

        if leftside
            old_path=lpath
            file=ld[lrow+cursorl-2]
            path=lpath
        else
            old_path=rpath
            file=rd[rrow+cursorr-2]
            path=rpath
        endif

        if file.isdir
            if leftside
                lpath=join([path,file.name],"/").tr("s","/").fileabs
                if can_read(lpath)
                    ld=sort_dir(lpath)
                    ltitle=" [#b1][#0]Path : [#5]%s[#-] ".format(lpath)
                    lrow=1
                    clear_pane("left")
                    pane define "left",lx,ly,lh,lw,ltitle,"double"
                    pane select "left"
                    lrow_count=show_left(ld,lrow,lwinheight,cursorl)
                else
                    lpath=old_path
                endif
            else
                rpath=join([path,file.name],"/").tr("s","/").fileabs
                if can_read(rpath)
                    rd=sort_dir(rpath)
                    rtitle=" [#b1][#0]Path : [#6]%s[#-] ".format(rpath)
                    rrow=1
                    clear_pane("right")
                    pane define "right",rx,ry,rh,rw,rtitle,"double"
                    pane select "right"
                    rrow_count=show_right(rd,rrow,rwinheight,cursorr)
                else
                    rpath=old_path
                endif
            endif
        endif

    endwhen

    # clamp top/bottom cursor pos
    if leftside
        on cursorl==0 do cursorl=1
        on !(cursorl<lrow_count) do cursorl=lrow_count-1
    else
        on cursorr==0 do cursorr=1
        on !(cursorr<rrow_count) do cursorr=rrow_count-1
    endif

endwhile

pane off
at sh,1
cursoron()
exit 0

