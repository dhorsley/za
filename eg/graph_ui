#!/usr/bin/za -u

# 512 x 384 default win size

# these codes are from the button map values in:
#  https://github.com/faiface/pixel/blob/master/pixelgl/input.go

enum key (
    SPACE       = ui_get_code("Space"),
    ESC         = ui_get_code("Escape"),
    MOUSE_LEFT  = ui_get_code("MouseButtonLeft"),
    LEFT        = ui_get_code("Left"),
    RIGHT       = ui_get_code("Right"),
    UP          = ui_get_code("Up"),
    DOWN        = ui_get_code("Down"),
    PAGEUP      = ui_get_code("PageUp"),
    PAGEDOWN    = ui_get_code("PageDown"),
    L           = ui_get_code("L")
)

struct label
    s string
    c string
    x float
    y float
endstruct

## FUNCS ##############################################

define push_label(s,c,x,y)
    var l label
    l.s=s ; l.c=c ; l.x=x ; l.y=y
    setglob labels = labels.append(l)
end

define push_glabel(s,c,x,y)
    var l label
    l.s=s ; l.c=c ; l.x=x ; l.y=y
    setglob g_labels = g_labels.append(l)
end


## MAIN ###############################################

# window initialisation
w=ui_init(ui_w()-64,ui_h()-64)
# w.ui_set_full_screen(ui_primary_monitor())
w.ui_title("graph test")
w.ui_set_smooth(true)

var frame_count             int
var expected_frame_length   float
var fps                     int

fps=0
on fps>0 do expected_frame_length=1000f/fps

last_time=epoch_nano_time()
frame_start_time=last_time
    
mx=w.ui_bounds.Max.X.int
my=w.ui_bounds.Max.Y.int

ampl=0.8
eq="ampl*sin(x.deg2rad)"
scale_x=1.0
sx=0
ex=360
lx=float(mx-200)
ly=float(my-200)
off_y=ly/2
off_y=500.0
sy=off_y.float
label_x=true
label_x_period=10
drawline=true
redef=true
last_time = epoch_nano_time()

while !ui_closed(w)

    # input
    on ui_just_released(w,key.ESC) do break
    if ui_pressed(w,key.LEFT)
        scale_x-=0.05
        redef=true
    endif
    if ui_pressed(w,key.RIGHT)
        scale_x+=0.05
        redef=true
    endif
    if ui_pressed(w,key.UP)
        ampl+=0.05
        redef=true
    endif
    if ui_pressed(w,key.DOWN)
        ampl-=0.05
        redef=true
    endif
    if ui_pressed(w,key.PAGEUP)
        off_y+=10
        redef=true
    endif
    if ui_pressed(w,key.PAGEDOWN)
        off_y-=10
        redef=true
    endif
    if ui_pressed(w,key.L)
        drawline=!drawline
        redef=true
    endif
   
    # reset
    ui_clear(w,240,240,250)
    ui_batch_clear(w)

    # graph setup
    if redef

        line=ui_new_draw()

        # divisions
        r=1.0; g=0.7; b=0.7
        for e=100 to my-100 step 100
            ui_pp(ref line,r,g,b,100f,e.float)
            ui_pp(ref line,r,g,b,mx-100f,e.float)
            ui_line(line,1f)
        endfor

        for e=100 to mx-100 step 100
            ui_pp(ref line,r,g,b,e.float,100f)
            ui_pp(ref line,r,g,b,e.float,my-100f)
            ui_line(line,1f)
        endfor

        # axis
        r=0.5; g=0.2; b=0.2
        ui_pp(ref line,r,g,b,100f,99f)
        ui_pp(ref line,r,g,b,mx-100f,99f)
        ui_line(line,2f)
        ui_pp(ref line,r,g,b,99f,100f)
        ui_pp(ref line,r,g,b,99f,my-100f)
        ui_line(line,2f)

        # offset line
        r=0.4; g=0.7; b=0.4
        ui_pp(ref line,r,g,b,100f,off_y+100f)
        ui_pp(ref line,r,g,b,mx-100f,off_y+100f)
        ui_line(line,1f)

        # graph points
        r=0.0; g=0.3; b=0.8
        lr=0.6; lg=0.6; lb=0.9
        ir=0.4; ig=0.5; ib=0.9

        g_labels=[]

        for x=sx to ex/scale_x

            px=((x.float-sx)*scale_x/(ex-sx).float)*lx
            y=eval(eq)

            # plot
            posx=100f+px ; posy=100f+off_y+y*sy
            ui_pp(ref line,r,g,b,posx,posy)
            ui_circle(line,2f,1f)

            # line
            if x>0 and drawline
                ui_pp(ref line,lr,lg,lb,lastx,lasty)
                ui_pp(ref line,lr,lg,lb,posx,posy)
                ui_line(line,1f)
            endif

            if label_x and x%label_x_period==0
                push_glabel("x="+string(x),"red",posx-10,posy+24)
                # draw indicator line through point
                ui_pp(ref line,ir,ig,ib,posx,posy-8)
                ui_pp(ref line,ir,ig,ib,posx,posy+8)
                ui_line(line,1f)
            endif

            lastx=posx; lasty=posy

        endfor
        
        redef=false


    endif

    ui_batch(w,line)

    var labels []any
    push_label("x-axis","red",mx-50f,100f)
    push_label("y-axis","blue",100f,my-50f)
    push_label("equation: {eq}","black",mx/2f-80,my-20f)

    # info
    push_label("amplitude=%.3f y-offset=%.0f".format(ampl,off_y),"green",mx/2f-80,my-36f)

    # labels
    foreach l in labels
        ui_text(w,l.x,l.y,l.c,l.s)
    endfor
    foreach l in g_labels
        ui_text(w,l.x,l.y,l.c,l.s)
    endfor


    # update screen     
    ui_batch_draw(w)
    ui_update(w)

    # fps + sync stuff
    current_time=epoch_nano_time()
    dt_ms=float(current_time-last_time)/1e6
    frame_count+=1

    # wait for end of frame:
    on fps>0 and dt_ms<expected_frame_length do pause expected_frame_length-dt_ms

    if current_time-frame_start_time>=1e9
        ui_title(w,"last frame length:%4.2fms expected:%4.2fms fps:%d".
                    format(dt_ms,expected_frame_length,frame_count)
        )
        frame_start_time=current_time
        frame_count=0
    endif

endwhile


