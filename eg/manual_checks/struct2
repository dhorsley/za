#!/usr/bin/za

# same as struct example, except using fixed len array for storage. should be 20-30% faster.

seed(epoch_nano_time())

struct s_person
    name    string
    age     int
    dob     string
endstruct

forenames=["Ada","Bob","Craig","David","Ergan","Frederick","George","Harry","Iris","Janis","Keith","Larry","Moon","Naomi","Orpheus","Pamela",
            "Quirkafleeg","Roger","Samuel","Tarjan","Una","Veronica","William","Xavier","Yvonne","Zod"
]

surnames =["Johnson","Smith","Cole","Plant","Ferry","Oakey","Gore","Cohen","Copeland","Charles","Dylan","Mercury","Bowie","Jett",
            "Petty","Strummer","Weller","Homme","Sandoval","Zevon","Costello"
]

var people map 
var person s_person

for e=1 to 1
    for p=1 to 5

        person.name= forenames[rand(len(forenames))-1]+" "+surnames[rand(len(surnames))-1]
        person.age = rand(49)
        person.dob = date(rand(1546300800)) # 1970 to 2019
        println "person.dob after assignment -> %#v".format(person.dob)

        println "new person should not have default values : ",format("%#v",person)
        println "people array before assign of person to array position {p} : ",people
        people[p]  = person
        println "people array after assign of person to array position {p} : ",people
        println format("%4v,%3v : %32s : %2d",e,p,people[p].name,people[p].age)
    endfor
    print
endfor

# println "1000 iterations of 100 struct init and populations."

