#!/usr/bin/za

doc `
    example pidof script.

    returns all process whose name or arg[0] match $1
    when $2 is empty return only those which also have
    no parent in the same list.
    when $2 is "all" return everything that matches.

    this script doesn't check for every potential match.
    it's just an example! you could probably dig through
    other parts of procfs to get everything. we only
    match on full base names.

`
struct process
    pid         int
    name        string
    state       string
    ppid        int
    priority    int
    starttime   int
    uid         string
    gid         string
es

struct pid_lookup
    pid         int
    index       string
es


# (even more) hacky sort, as there's no builtin sort by struct field
define fsort(m)
    s=""
    foreach q in m
        s+="{=q.pid} {=q.index}\n"
    ef
    return fieldsort(s,1,"n")
end

define splitOnZero(s)
    return split(s,as_string(char(0)))
end

struct statm_line
    size    int # tot prog size
    rss     int # page count
    shared  int # page count
    text    int # code 
    lib     int # 0
    data    int # data+stack
    dt      int # dirty page count (0)
es

define ps(filter)

    on filter==nil do filter="^.*$"
    procs = dir("/proc") ?> `#.name ~ "^[0-9]+$"` -> `#.name`

    var args        map
    var proc_list   map
    var proc        process
    var mem         map

    mychildpid="@shell_pid".sysvar
    thispid=pid()

    foreach p in procs

        on p.as_int in [pid(),mychildpid] do continue # pid() is current process

        dn="/proc/"+p
        on !is_dir(dn) do continue

        # read data from .../stat
        ps = $in "{dn}/stat"

        # ignore name filtered processes
        cmd=ps.filter(`\(.*?\)`).tr("d","()")
        on !match(cmd,filter) do continue

        # populate line from stat
        ps.replace("\(.*?\)","command").fields

        proc.name     = cmd
        proc.pid      = F[1].as_int
        proc.state    = F[3]
        proc.ppid     = F[4].as_int
        rawpri=F[18].as_int
        proc.priority = (rawpri < 0) ? (abs(rawpri+1)) : rawpri
        proc.starttime= F[22].as_int

        # fetch command line arguments
        args[proc.pid]= $in "{dn}/cmdline".splitOnZero

        # read data from .../statm
        pm = $in "{dn}/statm"
        pm.fields
        mem[proc.pid] = statm_line(
            F[mem_parts.size].as_int,     # tot prog size
            F[mem_parts.rss].as_int,      # page count
            F[mem_parts.shared].as_int,   # page count
            F[mem_parts.text].as_int,     # code 
            F[mem_parts.lib].as_int,      # 0
            F[mem_parts.data].as_int,     # data+stack
            F[mem_parts.dt].as_int        # dirty page count (0)
        )

        # add process to list
        proc_list[proc.pid] = proc

    ef

    var keys []pid_lookup
    foreach v in proc_list
        l=pid_lookup(v.pid,v.name)
        append_to(ref keys,l)
    ef
    return proc_list,keys,args,mem
end


define pidof(name,children)

    pl,keys,args,mem=ps(name)

    pids=[]
    foreach p in pl
        on p.state=="Z" do continue # don't report zombies
        if p.name == name
            pids=pids.append(key_p)
            continue
        ei
        if args[key_p][0] == name
            pids=pids.append(key_p)
        ei 
    ef

    pids=pids.list_int
    if not children
        ppids=[]
        foreach pc in pids
            if (pids ?> "#==pl[pc].ppid").len==0 # ppid not found in pid list
                ppids=ppids.append(pc)
            ei
        ef
        return ppids
    ei
    return pids
end


#
# MAIN
#

module "modules/getopt" as go

enum mem_parts ( size=1, rss, shared, text, lib, data, dt )

# args
var reqs map
reqs["n"]   =["s",go::optNature.m]
reqs["a"]   =["b",go::optNature.n]
opts,args=go::getopt(reqs)

name    =opts["n"]
children=opts["a"]

# fetch process list and sort by pid
println pidof(name,children).list_string.join(" ")


