#!/usr/bin/za

#
# Test script for za.
# If this is working, the language probably is.
#
# This program displays a few pieces of key system 
# resource information on a single summary view.
#

#
# FUNCTIONS
#

count=0

define clear(lstart,lend,column)
    for f=lstart to lend
        clear_line(f,column)
    endfor
end

define header(t)
    at 0,1
    for e=0 to pane_w()-2
        print fgrgb(0,e*64f/pane_w(),e*255f/pane_w()),"_"
    endfor
    print "[#-]"
    at 0,0,t.ccformat
end

define vbar(row,col,vsize,pc,colour,label,down)

    b1000 = "█"
    if down
        b0750 = "[#invert]▂"
        b0500 = "▀"
        b0250 = "[#invert]▆"
        b0125 = "▔"
    else
        b0750 = "▆"
        b0500 = "▄"
        b0250 = "▂"
        b0125 = "▁"
    endif

    us = vsize / 100f   # 1% height of total
    d  = pc*us          # height of input percent
    r  = d-d.as_int     # remainder
    d  = as_int(d)
    offset=-1
    on down do offset=1
    # whole parts
    for e=0 to d-1
        on d>0 do at row+e*offset,col,"{colour}{b1000}[#-]"
    endfor
    # remainder
    at row+d*offset,col
    c=" "
    on r>=0.125 do c=b0125
    on r>=0.25  do c=b0250
    on r>=0.50  do c=b0500
    on r>=0.75  do c=b0750
    print "{colour}{c}[#-]"
    # label
    if label
        s=format("%d",pc)
        l=s.len
        for j=0 to l-1
            at row+(e+1)*offset+(l-j)*offset,col,s[j]
        endfor
    endif
end


define chart(row,col,max_height,series,colour,label,down)
    for e = 0 to series.len-1
        c=colour.gsub("?",as_string(series[e])).eval
        vbar(row,col+e,max_height,series[e],c,false,down)
        offset=1-btoi(down)*2
    endfor
    on label do at row+(1+max_height)*offset,col-3,"100"
    on label do at row+1*offset,col-2,"0%"
end

define bar(row,col,hsize,pc,colour)
    part_3q="▊"
    part_2q="▌"
    part_1q="▎"
    us = hsize / 100f   # 1% width of total
    d  = pc*us          # width of input percent
    r  = d-d.as_int     # remainder
    for e=0 to hsize-1
        at row,col+e
        c=" "
        on e<d.as_int do c="▪"
        if e>=d.as_int and e<as_int(d+1)
            on r>=0.25*us do c=part_1q
            on r>=0.50*us do c=part_2q
            on r>=0.75*us do c=part_3q
        endif
        print "[#{colour}]{c}[#-]"
    endfor
end

define interface_ip(ip_in)
    foreach n in net_devices()
        on n["name"]==ip_in do return n["ip_addresses"][0]
    endfor
    return ""
end

define negreg(inp,matcher)
    out=""
    foreach l in inp
        on match(l,matcher) do continue
        out=out+l+"\n"
    endfor
    return out
end

logging testfile "mon.test.out"
test "fn_ip" group "mon" assert fail
    iip=interface_ip("lo:")
    assert has_start(iip,"127.0.0.")
et

define shorten(s,l)
    on len(s)>=l do s=s[:l-2]+(utf8supported() ? "…" : "~")
    return s
end

define showEnv()
    pane select "envs"
    print linecolour; # pane redraw
    header("{=tink} Environment [#-]")

    clear(2,8,1)
    cursoroff()

    at 1,2, "[#-]Hostname             : [#6]{=hostname()}[#-]"
    at 2,2, "User                 : [#6]{=user()}[#-]"
    at 3,2, "OS                   : [#6]{=os()}[#-]"
    at 4,2, "Locale               : [#6]{=lang()}[#-]"
    at 5,2, "Distribution         : [#6]{=release_name()}[#-]"
    at 6,2, "Distribution Version : [#6]{=release_version()}[#-]"
    case os()
    is "linux"
        at 7,2, "Bash Version         : [#6]{=bash_version()}[#-]"
    endcase
end


define showFiles()

    cursoroff()
    if !winterm()

        open_fd=""
        open_inode=""

        on is_file("/proc/sys/fs/file-nr")  do open_fd    = $in "/proc/sys/fs/file-nr"
        on is_file("/proc/sys/fs/inode-nr") do open_inode = $in "/proc/sys/fs/inode-nr"

        on open_fd=="" || open_inode=="" do return

        pane select "files"
        print linecolour; # pane redraw
        header(tink+" Files [#-]")

        clear(1,4,1)

        ofd=open_fd.field(1,"\t")
        mfd=open_fd.tr("d","\n").tr("s","\t ").field(3,"\t").as_float
        at 2,2, "[#-]Open Descr. : [#6]{ofd}[#-]"
        at 3,2, "Max         : [#6]"
        if mfd>1e8
            print "No Limit[#-]"
        else
            print format("%.7g",mfd),"[#-]"
        endif
        fin=open_inode.field(2,"\t")
        tin=open_inode.field(1,"\t").as_float
        at 4,2, "Free Inodes : [#6]{fin}[#-]"
        at 5,2, "Total       : [#6]",format("%.7g",tin),"[#-]"

    endif

end

def mdisplay(r,c,w,f,t,msg)
    show=true
    on f.kind=="uint64" and f==maxuint() do show=false
    at r,c,msg
    if show
        bar(r,c+8,w,(f.as_int/t.as_float)*100,3)
        smallprint(f.as_float)
    else
        at r,c+9+w,"undefined"
    endif
end


define showMem()

    pane select "mem"
    print linecolour; # pane redraw
    header("{=tink} Memory [#-]")

    cursoroff()

    getslab=true
    on !access do getslab=false

    # gather
   
    # Get memory info using built-in function
    mem_detailed = mem_info()
    
    # Extract slab info from built-in data
    slabs = ""
    if getslab && len(mem_detailed.Slab) > 0
        # Convert slab map to sorted list format
        slab_list = []
        if mem_detailed.Slab.len>0
            foreach info in mem_detailed.Slab
                if info!=nil
                    size_mb = (info.ActiveObjs.as_int * info.ObjSize.as_int) / 1024f / 1024
                    slab_list = slab_list + [key_info + " " + format("%.1f", size_mb)]
                endif
            endfor
        endif

        # Sort by size (descending)
        slab_string=""
        foreach s in slab_list
            slab_string+=s+"\n"
        endfor
        slab_string = slab_string.fieldsort(2, "n", true)
        
        # Format for display (top 5 entries)
        # slabs = "Slab: Name Size(MB)\n"
        slabs = ""
        count = 0
        foreach entry in slab_string
            on entry == "" do continue
            on count >= 5 do break
            slabs = slabs + entry + "\n"
            count = count + 1
        endfor
    endif

    # Use built-in functions for memory info
    resources = sys_resources()
    mem_total = resources.MemoryTotal
    mem_free = resources.MemoryFree
    mem_used = resources.MemoryUsed
    mem_cached = resources.MemoryCached
    mem_swap_free = resources.SwapFree
    mem_swap_total = resources.SwapTotal
    
    # Get detailed memory info for additional fields
    mem_avail = mem_detailed.Available
    mem_active = mem_detailed.Used

    on winterm() do mem_avail=mem_free

    # display mem
    if mem_total==0
        at 1,2,"could not read total memory"
    else
        mdisplay(1,2,16,mem_total,mem_total, "[#4]Total  : ")
        mdisplay(2,2,16,mem_free,mem_total,  "[#4]Free   : ")
        mdisplay(3,2,16,mem_avail,mem_total, "[#4]Avail  : ")
        mdisplay(4,2,16,mem_cached,mem_total,"[#4]Cached : ")
        mdisplay(5,2,16,mem_active,mem_total,"[#4]Active : ")
    endif

    if mem_swap_total==0
        at 6,2,"could not read total swap memory"
    else
        mdisplay(6,2,16,mem_swap_free,mem_swap_total,  "[#4]Fr Swap: ")
    endif

    al=get_mem().alloc.as_int
    ts=get_mem().system.as_int
    at 7,2,"[#4]Mon Use:"; bar(7,10,16,(al.as_float/mem_avail.as_int)*100,2)
    smallprint(al*1024*1024)

    # display slab info

    if getslab
        if slabs!=""
            cs=8
            on count(slabs)<8 do cs=count(slabs)
            comwidth=10
            at 9,1,format("[#b2][#7][#bold]%20s  %-{comwidth}s[##][#-]","slab allocatee","MB size")
            if count(slabs)>0
                lp=0
                for p = 0 to cs-1
                    l=lines(slabs,"{p}:{p}")
                    sa=strpos(l," ",0)
                    if sa!=-1
                        c1=substr(l,0,sa)
                        c2=substr(l,sa+1,len(l)-sa-1)
                        at 10+lp,1, format("%20s  [#6]%-"+comwidth.as_string+"s[#-]",c1,c2)
                        lp++
                    endif
                endfor
            endif
        endif
    else 
        at 9,1,"[#1]Slab information requires root access.[#-]"
    endif
end


define showProcs(ct,uptime)

    pane select "procs"
    print linecolour; # pane redraw

    cursoroff()

    # get process list using built-in function
    processes = ps_list(map(.include_cmdline true))

    var proc_list map

    foreach p in processes
        # Extract process info from ProcessInfo struct
        pid = p.PID
        state = p.State
        ppid = p.PPID
        utime = 1f*p.UserTime
        stime = 1f*p.SystemTime
        cutime = 1f*p.ChildrenUserTime
        cstime = 1f*p.ChildrenSystemTime
        threads = p.Threads
        procstarttime = 1f*p.StartTime
        comm = p.Command

        on procstarttime==0 do continue
        on ppid==0 do continue

        # if not this process' pid (putime: seconds of process time) // putime==0 when proc just started.
        if pid!=pid()
            putime=as_float(uptime-(procstarttime/ct))
            on putime==0 do continue

            proc_list[pid]=[ state, ppid, 100*as_float(utime/ct/putime), 100*as_float(stime/ct/putime), 
                            100*as_float(cutime/ct/putime), 100*as_float(cstime/ct/putime), 
                            threads, procstarttime, gsub(comm," ","_") 
            ]
        endif
    endfor

    if len(proc_list)>0

        # sort, reverse, by user time
        shellout=""
        foreach p in proc_list
            nextline = format ("%v %v %v %v %v %v %v %v %v %v\n", p[0], p[1], key_p, p[2], p[3], p[4], p[5], p[6], p[7], p[8] )
            shellout = shellout + nextline
        endfor

        sorted = fieldsort(shellout,4,"n",true).lines(":17").uniq

        # final list display
        lcount=18
        comwidth=term_w()-90

        at 1,1, format (  "[#b2][#7][#bold]%2s %8s %8s %5s %5s %7s %-{comwidth}s[##][#-]", "st","ppid","pid","user","sys","threads","command" )

        clear(2,19,1)

        foreach p in sorted
            at 20-lcount,1
            fields(p," ")
            on proc_filter!="" and not reg_match($lc F[10],$lc proc_filter) do continue
            # skip low activity processes
            # on as_float(F[4])<0.2 or as_float(F[5])<0.2 do continue
            on NF==9 do F[10]=""
            on len(F[10])>=comwidth do F[10]=substr(F[10],0,comwidth-1)
            print format("%2s %8d %8d %5.0f %5.0f %7.0f [#6]%-{=comwidth-1}s[#-]",
                F[1],as_int(F[2]),as_int(F[3]),as_float(F[4]),as_float(F[5]),as_float(F[8]),collapse(F[10])
            )
            on lcount--==0 do break
        endfor

    endif
end

define humansize(i)
    unit="B"
    if i>=1e9; unit="GB"; i=as_float(i/1e9); endif
    if i>=1e6; unit="MB"; i=as_float(i/1e6); endif
    if i>=1e3; unit="KB"; i=as_float(i/1e3); endif
    return format("%.1f %s/s",i,unit)
end

define hobbitsize(i)
    on i>=1e9 do return "%.1fG".format(as_float(i/1e9))
    on i>=1e6 do return "%.1fM".format(as_float(i/1e6))
    on i>=1e3 do return "%.1fK".format(as_float(i/1e3))
    return "%.1f".format(i.as_float)
end

define smallprint(sz)
    print " [#6]{=hobbitsize(sz)}B[#-]   "
end


define showCpu(timeout,sample_start_in,showCpuDetails,showCpuBars,showCpuTotals)

    opsys=os()

    cursoroff()
    pane select "cpu"
    print linecolour
    header("{=tink} CPU [#-]")

    activity_bg="-"
    activity_indicator="▪"
    on !utf8supported() do activity_indicator="-"

    cpuinfo=cpu_info().Usage["cores"]
    cpucount=cpu_info().Usage["cores"].len

    var diff map[map]
    row=1

    foreach vals in cpuinfo
        core=key_vals
        unmap(ref vals,"idle")
        unmap(ref vals,"nice")
        unmap(ref vals,"guest_nice")
        vals["total"]=vals.values.sum.as_uint

        if not key(ref prev,core)
            foreach k in vals.keys
                prev[core][k]=as_uint(0)
            endfor
        endif

        diff[core]["total"] = as_int(vals["total"] - prev[core]["total"] )
        foreach d in vals
            k=key_d
            on k=="total" do continue
            diff[core][k]=as_int(d - (prev[core][k]) )
        endfor

        @ prev[core] = vals.dup
    endfor

    # init previous values for cpu stats
    if sample_start_in-->0
        at 2,2, "[#invert]Checking previous CPU values.[#-]"
        return sample_start_in
    endif

    # display
    ordered_cores=cpuinfo.keys.sort(map(.alphanumeric true))

    foreach core in ordered_cores
        c=cpuinfo[core]
        dc=diff[core]

        clear_line(row,1)
        at row,1 , format("[#7]%8s ",core)
        pos=10

        ordered_activities=sort(dc.keys)

        if showCpuDetails
            colour=1
            foreach acti in ordered_activities
                on acti=="total" do continue
                v=dc[acti]
                at row,pos,"[#{colour}]%3d {acti}[#-] ".format(v)
                pos+=11; colour++; on colour==8 do colour=1
            endfor
            pos=pos+2
        endif

        if showCpuBars
            # fill cpu row background
            at row,pos, "[#dim]"+pad(activity_indicator,-1,48,activity_bg)+"[#-]"
            cursorx(pos)
            # at row,pos
            colour=1
            foreach acti in ordered_activities
                on acti=="total" do continue
                v=dc[acti]
                col_v = "[#{colour}]"; padw=as_int(v/2)
                print col_v,pad(activity_indicator,1,padw,activity_indicator) , "[#-][##]"
                colour++; on colour==8 do colour=1
            endfor
            pos=pos+49
        endif

        if showCpuTotals
            cursorx(pos)
            if dc.len>0 and key(ref dc,"total")
                if dc["total"]>0
                    print format("❙ %4.0f",dc["total"].as_float)
                endif
            endif
        endif

        row++
    endfor
    return sample_start_in
end


define showHdd()
    
    pane select "hdd"
    print linecolour; # pane redraw
    cursoroff()

    # Use built-in disk usage function instead of external df commands
    disk_info = disk_usage()
   
    mpwidth=pane_w()-40
    at 1,1, format("[#b2][#7][#bold]%16s %-7s %-7s %-4s %-{mpwidth}s[#-][##]","path","size","avail","use%","mpath")
    row=2

    # Sort by usage percentage (descending) and filter out unwanted devices
    sorted_disks = []
    foreach disk in disk_info
        # Skip loop devices, CD-ROMs, and temporary filesystems
        device = disk["path"]

        skip=false
        case os()
        contains "windows"
            on device ~ `^([^A-Z]:)` do skip=true
        or
            on device ~ `^([a-zA-Z]:|driver|/dev/loop|/dev/sr|tmpfs|run|snapfuse)` do skip=true
        endcase
        on skip do continue

        # Add to list as anonymous struct for sorting
        sorted_disks = append(sorted_disks, anon(
            .device device,
            .total disk["size"],
            .used disk["used"],
            .available disk["available"],
            .usage_pct disk["usage_percent"],
            .mountpoint disk["mounted_path"]
        ))
    endfor
    
    # Sort by usage percentage (descending)
    sorted_disks = ssort(sorted_disks, "usage_pct", false)
    
    # Display top disks (limit to avoid screen overflow)
    max_disks = 6
    count = 0
    foreach disk in sorted_disks
        on count >= max_disks do break
       
        device = disk.device
        total = disk.total
        used = disk.used
        available = disk.available
        usage_pct = disk.usage_pct
        mountpoint = disk.mountpoint
        
        # Format sizes for display
        total_str = hobbitsize(total.as_int)
        used_str = hobbitsize(used.as_int)
        avail_str = hobbitsize(available.as_int)
        usage_str = format("%.0f", usage_pct)
        
        at row,1, format(`%16s %-7s %-7s %-4s %-20s`,
            shorten(device,16), total_str, avail_str, usage_str, shorten(mountpoint,mpwidth-3))
        row++
        count++
    endfor

end

define showNet(net_sc,load,ipaddr,interface,timeout)

    cursoroff()

    pane select "net"
    print linecolour
    header("{=tink} Network [#-]")

    at 1,4,"Interface [{interface}] Addr : {ipaddr} "

    foreach n in nio()
        on n.Interface!=interface do continue
        
        # current counters 
        rbytes  = n.RxBytes.as_float
        tbytes  = n.TxBytes.as_float

        if net_sample_start_in>0
            @ net_sample_start_in-=1
            @ prev_rbytes=rbytes
            @ prev_tbytes=tbytes
            return 
        endif

        # diff from previous
        drb=rbytes-prev_rbytes
        dtb=tbytes-prev_tbytes
        on drb <= 0 do drb = 0f
        on dtb <= 0 do dtb = 0f

        # shift left and append new to end
        @ rblist=rblist.tail.append(drb)
        @ tblist=tblist.tail.append(dtb)

        # display using log scale up to log64(5).
        # using key_timeout as a rough scaler for the sampling period.
        midline=7
       
        # - traffic plots
        clear(2,6,1)
        clear(8,13,1)
        # - logn each value with n=64, convert to a percentage, then clamp between 0-100. convert result to []int and chart.
        chart(midline-1,2,5, ( rblist[1:] -> "20*logn(#,64)[0f:100f]" ) . list_int ,"fgrgb(0,2.5*?,2.5*?)",false,false)
        chart(midline+1,2,5, ( tblist[1:] -> "20*logn(#,64)[0f:100f]" ) . list_int ,"fgrgb(2.5*?,0,0)",false,true)

        # write history
        @ prev_rbytes = rbytes
        @ prev_tbytes = tbytes

        # avg over a second
        drb=humansize((1000/as_float(timeout))*drb)
        dtb=humansize((1000/as_float(timeout))*dtb)

        clear_line(pane_h()-1,1)
        at pane_h()-1,1, "avg: [#5]rx[#-] {drb} | [#2]tx[#-] {dtb}"

        break
    endfor

end

define redef_layout(cpu_count,pfilter)

    tw=term_w()

    #            name    row            col             h               w       title                                   border
    pane define "cpu",    1,            1,              cpu_count+1,    tw-1,   "",                                     "none"
    pane define "hdd",    cpu_count+3,  2,              8,              tw-92,  "[#b1]"+tink+" Disks [##]",             "round"
    pane define "procs",  cpu_count+13, 2,              21,             tw-47,  "[#b1]"+tink+" Processes [##]"+pfilter, "round"
    pane define "envs",   cpu_count+3,  tw-88,          9,              44,     "",                                     "none"
    pane define "mem",    cpu_count+3,  tw-40,          16,             39,     "",                                     "none"
    pane define "net",    cpu_count+19, tw-45,          16,             44,     "",                                     "none"
    pane define "status", cpu_count+35, 1,              1,              tw-1,   "",                                     "none"

    @ net_sample_count = 40

    @ rblist = push_front(0.0)
    @ tblist = push_front(0.0)

    for f=1 to net_sample_count
        @ rblist = append(rblist,0.0)
        @ tblist = append(tblist,0.0)
    endfor

    showEnv()
            
    # origin line
    pane select "net"
    graph_line="-"
    on utf8supported() do graph_line="┈"
    midline=7
    at midline,2, "[#6]"
    for f=1 to net_sample_count
        print graph_line
    endfor
    print "[#-]"

end


#
# MAIN
# 

# in milliseconds
key_timeout=1000
timeout=key_timeout

sample_start_in=2
net_sample_start_in=1

interface = gw_interface()

linecolour="[#1]"
tink="[#5]"

ct=clktck()
if ct==0
    exit 1, "Could not find clock ticks."
endif

print "[#ASB]"

user=get_env("USER")
on user=="" do user=user()
sudo=get_env("SUDO_USER")
access=has_privileges()
iswin=os() ~i "windows"

on !access do println "Needs sudo for some information."

# get cpu core count
cpu_count=get_cores()

# set up panes
w=term_w()
pfilter=""
redef_layout(cpu_count,pfilter)

# cpu history setup
var prev map[map]

# net graph setup
prev_rbytes=0
prev_tbytes=0

# network load icons
load = [ "[#4]┃[#-]", "[#4]┃[#-]", "[#6]┃[#-]", "[#2]┃[#-]", "[#2]┉[#-]" ]

# main loop
ipaddr=interface_ip(interface)
quit=false

showCpuDetails=true
showCpuBars=true
showCpuTotals=true

iter=0
proc_filter=""
lt=epoch_nano_time()
redraw=false

while !quit

    iter++

    # in case of window change (sigwinch)
    if redraw or w!=term_w()
        cls
        w=term_w()
        redef_layout(cpu_count,pfilter)
        redraw=false
    endif

    # capture system uptime
    uptime=sys_resources().Uptime

    # show panes
    sample_start_in=showCpu(timeout,sample_start_in,showCpuDetails,showCpuBars,showCpuTotals)
    showHdd()
    showNet(net_sample_count,load,ipaddr,interface,timeout)
    showProcs(ct,uptime)
    # showFiles()
    showMem()

    # status area

    pane select "status"
    print linecolour; # pane redraw

    clear(1,1,1)
    print "[#b1][#6]"

    t  = epoch_nano_time()
    d  = date_human(t/1_000_000_000)

    dt = as_float(t-lt) / 1_000_000
    dts= format("frame: %.2fms",dt)
    lt = t

    at 1,1,ccformat("[#bold]%"+
            as_string(pane_w()-3)+
            "s[#boff][#-]",d+
            " | {dts} | Current Timeout : {timeout} ms"
    )

    # get user input

    k=keypress(key_timeout)

    case char(k)
    is "i"
        clear(1,1,1); at 1,1
        prompt interface "Network Interface Name : " "^[a-zA-Z0-9]+$"
        ipaddr=interface_ip(interface)
    is "f"
        clear(1,1,1); at 1,1
        prompt proc_filter "New Filter (Leave empty to clear) : " is proc_filter
        pfilter=" ~ filter : [#i1][#2]"+proc_filter+"[#-][#i0] "
        pane select "procs"
        new_title="[#b1]{=tink} Processes [##]"
        on proc_filter!="" do new_title+=pfilter
        pane title new_title

    is "t"
        clear(1,1,1); at 1,1
        prompt timeout "New Timeout (ms) : " "^[0-9]+$"
        key_timeout=timeout.as_int
    is "D"
        showCpuDetails = ! showCpuDetails
    is "B"
        showCpuBars=!showCpuBars
    is "T"
        showCpuTotals=!showCpuTotals
    is "q"
        quit=true
    is "h"
        clear(1,1,1)
        at 1,1, "(h) help  (t) timeout  (i) interface  (q) quit  "
        print "(D) cpu details  (B) cpu bars  (T) cpu totals  (f) filter"
        k=keypress(1500)
        clear(1,1,1)
    has k==12 # ctrl-l
        redraw=true
    endcase

    cursoroff()
    print "[#-][##]"

endwhile

at term_h()-1,1,"[#RSB]\n"
at term_h()-1,1
cursoron()


