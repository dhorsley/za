#!/usr/bin/za

# CURRENTLY BACK IN TEST AS THIS VERSION USED L.H.S. INTERPOLATION
#  WHICH IS NOW DISABLED IN FUTURE VERSIONS. (IT CLASHES WITH NAME BINDING)
#  NEEDS THESE CLASHING VARS CONVERTING TO MAPS OR SIMILAR

#
# Test script for za.
# If this is working, the language probably is.
#
# This program displays a few pieces of key system 
# resource information on a single summary view.
#

#
# FUNCTIONS
#

count=0

logging on "/tmp/dh"

define clear(lstart,lend,column)
    for f=lstart to lend
        clear_line(f,column)
    endfor
end

define interface_ip(in)
    addrline =| ip addr show dev {in}
    ipaddr=replace(filter(addrline.out,"inet.*/"),"inet ","")
    ipaddr=replace(ipaddr,"/","")
    return ipaddr
end

define negreg(inp,matcher)
    out=""
    foreach l in inp
        if match(l,matcher); continue; endif
        out=out+l+"\n"
    endfor
    return out
end

test "fn_ip" group "mon" assert fail
    iip=interface_ip("lo:")
    assert hasstart(iip,"127.0.0.")
endtest

define shorten(s,l)
    on len(s)>=l do s=s[:l-2]+(?? utf8supported() "…","~")
    return s
end

define showEnv()
    pane select "envs"
    pane redraw
    clear(2,11,1)
    cursoroff()

    at  2,3; print "Hostname             : [#6]{=hostname()}[#-]"
    at  3,3; print "Bash Version         : [#6]{=bash_version()}[#-]"
    at  4,3; print "Bash Major Version   : [#6]{=bash_versinfo()}[#-]"
    at  5,3; print "User                 : [#6]{=user()}[#-]"
    at  6,3; print "OS                   : [#6]{=os()}[#-]"
    at  7,3; print "Home                 : [#6]{=home()}[#-]"
    at  8,3; print "Locale               : [#6]{=lang()}[#-]"
    at  9,3; print "Distribution         : [#6]{=release_name()}[#-]"
    at 10,3; print "Distribution ID      : [#6]{=release_id()}[#-]"
    at 11,3; print "Distribution Version : [#6]{=release_version()}[#-]"
end


define showFiles()

    cursoroff()
    if !winterm()

        open_fd=""
        open_inode=""

        on is_file("/proc/sys/fs/file-nr")  do open_fd    = read_file("/proc/sys/fs/file-nr")
        on is_file("/proc/sys/fs/inode-nr") do open_inode = read_file("/proc/sys/fs/inode-nr")

        on open_fd=="" || open_inode=="" do return

        pane select "files"
        pane redraw

        clear(1,4,1)

        ofd=field(open_fd,1,"\t")
        mfd=tr(open_fd,"d","\n")
        mfd=tr(mfd,"s","\t ")
        mfd=float(field(mfd,3,"\t "))
        at 2,2 ; print "Open Descr. : [#6]{ofd}[#-]"
        at 3,2 ; print "Max         : [#6]"
        if mfd>1e8
            print "No Limit[#-]"
        else
            print format("%.7g",mfd),"[#-]"
        endif
        fin=field(open_inode,2," \t\n")
        tin=float(field(open_inode,1," \t"))
        at 4,2 ; print "Free Inodes : [#6]{fin}[#-]"
        at 5,2 ; print "Total       : [#6]",format("%.7g",tin),"[#-]"

    endif

end


define showMem()

    pane select "mem"
    pane redraw

    cursoroff()

    if !access
        at 2,1
        println "[#1]Slab information requires root access.[#-]"
        return
    endif

    # gather
   
    slab_file="" 
    on is_file("/proc/slabinfo") do slab_file=read_file("/proc/slabinfo")

    slabs=""
    if count(slab_file)>1
        foreach l in lines(slab_file,"2:")
            name=field(l,1," \t")
            s_sz=field(l,3," \t")
            s_cn=field(l,4," \t")
            on s_sz==0 || s_cn==0 do continue
            slabs=slabs+format("%s %3v\n",name,(float(s_sz)*float(s_cn))/1024/1024)
        endfor
        slabs=fieldsort(slabs,2,"n",true) 
    endif

    foreach f in ["total","free","avail","cached","active","swap_free","swap_total"]
        mem[f]=0
    endfor

    if is_file("/proc/meminfo")
        foreach line in read_file("/proc/meminfo")
            fields(line)
            if F[2]!=""
                when F[1]
                    is "MemTotal:";     mem_total=F[2]
                    is "MemFree:";      mem_free=F[2]
                    is "MemAvailable:"; mem_avail=F[2]
                    is "Cached:";       mem_cached=F[2]
                    is "Active:";       mem_active=F[2]
                    is "SwapFree:";     mem_swap_free=F[2]
                    is "SwapTotal:";    mem_swap_total=F[2]
                endwhen
            endif
        endfor
    endif

    # display mem

    clear(2,9,1)
    at 2,2; print "Free Mem  : [#6]{mem_free}/{mem_total} KB[#-]"
    at 3,2; print "Avail Mem : [#6]{mem_avail} KB[#-]"
    at 4,2; print "Cached    : [#6]{mem_cached} KB[#-]"
    at 5,2; print "Active    : [#6]{mem_active} KB[#-]"
    at 6,2; print "Free Swap : [#6]{mem_swap_free}/{mem_swap_total} KB[#-]"
    at 8,2; print "Mon Heap  : [#6]{=getmem().alloc} MB[#-]"
    at 9,2; print "Mon Total : [#6]{=getmem().system} MB[#-]"

    # display slab info

    cs=8
    on count(slabs)<8 do cs=count(slabs)

    comwidth=6
    at 1,35; print format("[#b2][#7][#bold]%20s  %-{comwidth}s[##][#-]","slab allocatee","MB size")
    # would normally do with fields(). showing alternative below:
    if count(slabs)>0
        for p = 0 to cs-1
            l=lines(slabs,"{p}:{p}")
            sa=strpos(l," ",0)
            c1=substr(l,0,sa)
            c2=substr(l,sa+1,len(l)-sa-1)
            at 2+p,35; print format("%20s  [#6]%-"+comwidth+"d[#-]",c1,int(c2))
        endfor
    endif
end


define showProcs(ct,uptime)

    pane select "procs"
    pane redraw

    cursoroff()

    # get filenames
    procs =| ls -1 /proc/*/stat
    procs = line_filter(procs.out,"/[0-9]+/")

    foreach p in procs
        on !is_file(p) do break
        ps = read_file(p)

        comm=tr(filter(ps,`\(.*?\)`),"d","()")
        ps=replace(ps,`\(.*?\)`,`"comm"`)

        # split up
        fields(ps)
        pid=int(F[1])

        state=F[3]; ppid=F[4]
        utime=float(F[14]); stime=float(F[15]); cutime=float(F[16]); cstime=float(F[17])
        priority=F[18]; nice=F[19]; threads=F[20]; procstarttime=float(F[22])

        on kind(procstarttime)!="float64" || kind(utime)!="float64" || kind(stime)!="float64" do continue
        on kind(cstime)!="float64" || kind(cutime)!="float64" do continue

        on procstarttime==0 do continue

        # if not this process' pid (putime: seconds of process time) // putime==0 when proc just started.

        if pid!=pid()
            putime=float(uptime-(procstarttime/ct))
            on putime==0 do continue

            proc_list[pid]=[ state, ppid, 100*float(utime/ct/putime), 100*float(stime/ct/putime), 
                            100*float(cutime/ct/putime), 100*float(cstime/ct/putime), threads, procstarttime, gsub(comm," ","_") ]

        endif
    endfor

    if len(proc_list)>0

        # sort, reverse, by user time
        shellout=""
        foreach p in proc_list
            nextline = format ("%v %v %v %v %v %v %v %v %v %v\n", p[0], p[1], key_p, p[2], p[3], p[4], p[5], p[6], p[7], p[8] )
            shellout = shellout + nextline
        endfor

        sorted = uniq(lines(fieldsort(shellout,4,"n",true),":11"))

        # final list display
        lcount=8
        comwidth=21

        at 1,1; print format (  "[#b2][#7][#bold]%2s %8s %8s %5s %5s %7s %-{comwidth}s[##][#-]",
                                "st","ppid","pid","user","sys","threads","command" )

        clear(2,10,1)

        foreach p in sorted
            at 10-lcount,1
            fields(p," ")
            # skip low activity processes
            if float(F[4])>0.2 || float(F[5])>0.2
                on len(F[10])>=comwidth do F[10]=substr(F[10],0,comwidth-1)
                print format("%2s %8d %8d %5.0f %5.0f %7.0f [#6]%-{=comwidth-1}s[#-]",F[1],int(F[2]),int(F[3]),float(F[4]),float(F[5]),float(F[8]),collapse(F[10]))
                on lcount--==0 do break
            endif
        endfor

    endif
end


define humansize(i)
    unit="B"
    if i>=1e9; unit="GB"; i=float(i/1e9); endif
    if i>=1e6; unit="MB"; i=float(i/1e6); endif
    if i>=1e3; unit="KB"; i=float(i/1e3); endif
    return format("%.3f %s/sec",i,unit)
end


define showCpu(timeout,sample_start_in,showCpuDetails,showCpuBars,showCpuTotals)

    cursoroff()

    proc_file=""
    if is_file("/proc/stat")
        proc_file=read_file("/proc/stat")
    else
        return sample_start_in
    endif

    on len(proc_file)==0 do return sample_start_in


    pane select "cpu"
    pane redraw

    activity_indicator="·"
    on !utf8supported() do activity_indicator="-"

    row=1

    mult            = float(timeout)/10.0
    indexlist       = ["total","user","nice","sys","idle","iowait","irq","softirq","steal","guest"]
    partindexlist   = tail(indexlist)

    # init previous values for cpu stats

    foreach line in proc_file

        fields(line)
        on len(F)==0 do continue

        name=F[1]
        on kind(name)!="string" do continue
        on name=="cpu" do continue

        if match(name,"^cpu")

            # split up row
            f=F.tail
            # convert string values to floats
            f=f.list_float

            # read values from row
            vals["total"] = f.sum
            foreach i in partindexlist
                if f.head.is_number
                    vals[i]    = f.head
                else
                    vals[i]    = float(0)
                endif
                on f.len>0 do f = f.tail
            endfor

            # set initial value for the global store
            if !globkey("prev","{name}_total")
                foreach i in indexlist
                    setglob prev["{name}_{i}"] = vals[i]
                endfor
            endif

            # now populate local prev from global prev
            foreach i in indexlist
                if globkey("prev","{name}_{i}")
                    g=prev["{name}_{i}"]
                    if g.is_number
                        one_prev[i]=g
                    else
                        one_prev[i]=0
                    endif
                else
                    one_prev[i]=0
                endif
            endfor

            # calc difference from last sample. -- units are USER_HZ, 1/100 sec
            if one_prev["total"]!=nil
                diff_total = float(vals["total"]-one_prev["total"])
                foreach i in partindexlist
                    if diff_total==0
                        diff[i]=int(0)
                    else
                        if is_number(one_prev[i])
                            diff[i] = ((vals[i]-int(one_prev[i])) / diff_total ) * mult
                        endif
                    endif
                endfor

                # figure display total
                subindexlist = ["user","nice","sys","iowait","irq","softirq","steal","guest"]
                disp_total=0.0
                foreach i in subindexlist
                    disp_total+=diff[i]
                endfor
            else
                at 2,2; print "[#invert]Checking previous CPU values.[#-]"
                break
            endif

            # record for next iter
            foreach i in indexlist
                setglob prev["{name}_{i}"] = vals[i]
            endfor

            # ensure positive and bounded
            if one_prev["total"]!=nil
                foreach i in partindexlist
                    on int(diff[i])<0   do diff[i]=0
                    on int(diff[i])>100 do diff[i]=100
                endfor
            endif
            
            # display
            if sample_start_in-->0
            else

                clear_line(row,1)

                at row,1 ; print format("%5s ",name)
                pos=7

                if showCpuDetails
                    at row,pos; print format(
                                        "[#4]%3.0fus[#-], [#5]%3.0fsy[#-], [#1]%3.0fsi[#-], [#7]%3.0fhi[#-], [#3]%3.0fgu[#-], [#2]%3.0fst[#-], [#6]%3.0fio[#-]",
                                        float(diff["user"]),float(diff["sys"]),float(diff["softirq"]),
                                        float(diff["irq"]),float(diff["guest"]),float(diff["steal"]),float(diff["iowait"])
                                    )
                    pos=pos+59
                endif

                col_sys     = "[#b5]"; w_sys      = diff["sys"]/2
                col_user    = "[#b4]"; w_user     = diff["user"]/2
                col_idle    = "[#b0]"; w_idle     = diff["idle"]/2
                col_softirq = "[#b1]"; w_softirq  = diff["softirq"]/2
                col_irq     = "[#b7]"; w_irq      = diff["irq"]/2
                col_guest   = "[#b3]"; w_guest    = diff["guest"]/2
                col_steal   = "[#b2]"; w_steal    = diff["steal"]/2
                col_iowait  = "[#b6]"; w_iowait   = diff["iowait"]/2


                if showCpuBars
                    # fill cpu row background
                    at row,pos
                    print pad(activity_indicator,-1,48,activity_indicator)

                    # populate with values
                    at row,pos
                    print col_sys;      print pad(activity_indicator,1,w_sys,activity_indicator)
                    print col_user;     print pad(activity_indicator,1,w_user,activity_indicator)
                    print col_softirq;  print pad(activity_indicator,1,w_softirq,activity_indicator)
                    print col_irq;      print pad(activity_indicator,1,w_irq,activity_indicator)
                    print col_guest;    print pad(activity_indicator,1,w_guest,activity_indicator)
                    print col_steal;    print pad(activity_indicator,1,w_steal,activity_indicator)
                    print col_iowait;   print pad(activity_indicator,1,w_iowait,activity_indicator)
                    print "[##]"
                    pos=pos+49
                endif

                if showCpuTotals
                    cursorx(pos)
                    print format("❙ %4.2f",disp_total)
                endif

                row++

            endif

        endif
    endfor

    return sample_start_in

end


define showHdd()
    
    pane select "hdd"
    pane redraw

    cursoroff()

    when release_id()
    is "alpine"
        disks=| df -h | tail -n+2 | egrep '^overlay' | sort -grk5
    or
        disks=| df -h | tail -n+2 | egrep -v '^\/dev\/(loop.*|sr[0-9]+)' | sort -hrk5
    endwhen

    at 1,1; print format("[#b2][#7][#bold]%20s %5s %5s %5s %-23s[#-][##]","path","size","used","avail","use%")
    row=2

    foreach d in disks.out
        if d!=""
            fields(d)
            on kind(F[1])!="string" do continue
            if !key("devices",F[1])
                devices[F[1]]=F[6]
                # F[5]=replace(F[5],`%`,`%`)
                at row,1; print format(`%20s %5s %5s %5s %-23s`,shorten(F[1],19),F[2],F[3],F[4],F[5])
                row++
            endif
        endif
    endfor

end


define showNet(net_sc,load,ipaddr,interface,timeout)

    cursoroff()

    if !is_file("/proc/net/dev")
        setglob net_sample_start_in-=1
        return 
    endif

    pane select "net"
    pane redraw

    at 1,2
    print "Interface [{interface}] Address : {ipaddr}        "

    at pane_h()-3,2
    print "Legend [#6]", legload[0], "[#-] 64B-4KiB [#6]", legload[1], "[#-] 4KiB-256KiB [#6]"
    print legload[2], "[#-] 256KiB-16MiB [#6]", legload[3], "[#-] 16MiB-1GiB [#6]", legload[4],"[#-] 1GiB-64GiB"

    foreach int_name in net_interfaces()

        int_filter=filter(read_file("/proc/net/dev"),"[ ]*"+int_name+":.*")
        on int_filter=="" do continue

        fields(int_filter)

        if hasstart(int_name,interface)

            # current counters 
            rbytes  = float(F[2])
            tbytes  = float(F[10])

            # diff from previous
            drb=rbytes-prev_rbytes
            dtb=tbytes-prev_tbytes

            # shift left and append new to end
            setglob rblist=rblist.tail.append(drb)
            setglob tblist=tblist.tail.append(dtb)

            # display using log scale up to log64(5).
            # using key_timeout as a rough scaler for the sampling period.

            full_magnitude=5
            midline=8
           
            # traffic plots

            clear(3,7,1)
            clear(9,13,1)

            for f=2 to net_sc
                # recv plot
                sample=rblist[f-2].int
                if sample!=0
                    rsz=logn(sample,64).int
                    on rsz>full_magnitude do rsz=full_magnitude
                    if rsz>0
                        for brow=1 to rsz
                            at midline-brow,1+f ; print load[brow-1]
                        endfor
                    endif
                endif
                print "[#-]"

                # transmit plot
                sample=tblist[f-2].int
                if sample!=0
                    tsz=logn(sample,64).int
                    on tsz>full_magnitude do tsz=full_magnitude
                    if tsz>0
                        for brow=1 to tsz
                            at midline+brow,1+f ; print load[brow-1]
                        endfor
                    endif
                endif

                print "[#-]"

            endfor

            for e=1 to len(legload)
                at midline-e,1; print "[#4]",legload[e-1],"[#-]"
                at midline+e,1; print "[#1]",legload[e-1],"[#-]"
            endfor

            # write history
            setglob prev_rbytes = rbytes
            setglob prev_tbytes = tbytes

            # avg over a second:
            drb=humansize((1000/float(timeout))*drb)
            dtb=humansize((1000/float(timeout))*dtb)

            clear_line(pane_h()-1,2)
            at pane_h()-1,2
            print format("[#bbred][#7] %v [#-][##]  [#4] rx avg [#-] %v  [#1] tx avg [#-] %v", int_name, drb, dtb)

        endif

    endfor

    setglob net_sample_start_in-=1
    return

end


define redef_layout(cpu_count)

    #            name    row            col             h        w             title                      border
    pane define "cpu",    1,            1,         cpu_count+1,  term_w(),     "[#b1] Internal [##]",    "none"
    pane define "hdd",    cpu_count+3,  2,              6,       64,           "[#b1] Disks [##]",       "round"
    pane define "procs",  cpu_count+10, 2,              11,      64,           "[#b1] Processes [##]",   "round"
    pane define "net",    cpu_count+3,  66,             18,      term_w()-65,  "[#b1] Network [##]",     "none"
    pane define "envs",   cpu_count+22, 1,              13,      45,           "[#b1] Environment [##]", "topline"
    pane define "mem",    cpu_count+22, 46,             13,      65,           "[#b1] Memory [##]",      "topline"
    pane define "files",  cpu_count+22, 111,            13,      30,           "[#b1] Files [##]",       "topline"
    pane define "status", cpu_count+36, 1,              1,       term_w()-1,   "[#b1] Status [##]",      "none"

    setglob net_sample_count = term_w()-77
    on net_sample_count>72 do setglob net_sample_count = 72

    setglob rblist = push_front(0.0)
    setglob tblist = push_front(0.0)

    for f=1 to net_sample_count
        setglob rblist = append(rblist,0.0)
        setglob tblist = append(tblist,0.0)
    endfor

    showEnv()
            
    # origin line
    pane select "net"
    graph_line="-"
    on utf8supported() do graph_line="┈"
    midline=8
    print "[#6]"
    at midline,2
    for f=1 to net_sample_count
        print graph_line
    endfor
    print "[#-]"

end


#
# MAIN
# 

# in microseconds
key_timeout=1000000
timeout=key_timeout/1000

sample_start_in=4
net_sample_start_in=1

if winterm()
    interface="eth0"
else
    i =| ip -o -4 route show to default
    interface=field(i.out,5)
endif

ct=clktck()
if ct==0
    exit 1, "Could not find clock ticks."
endif

cls

user=get_env("USER")
if user==""
    usercmd=|whoami
    user=usercmd.out
endif
sudo=get_env("SUDO_USER")
access=true

if !(user=="root" || sudo!="")
    access=false
    println "Needs sudo for some information."
endif

# @todo: figure max cpu count automatically
cpu_count=getcores()

# set up panes
w=term_w()
redef_layout(cpu_count)

# cpu history setup
init prev assoc

# net graph setup
prev_rbytes=0
prev_tbytes=0

# network load icons
legload = [ "❶", "❷", "❸", "❹", "❺" ]
load = [ "[#4]|[#-]", "[#4]|[#-]", "[#6]|[#-]", "[#2]|[#-]", "[#2]|[#-]" ]

# main loop
ipaddr=interface_ip(interface)
quit=false

showCpuDetails=true
showCpuBars=true
showCpuTotals=true

iter=0

while !quit

    iter++

    # in case of window change (sigwinch)
    if w!=term_w()
        cls
        w=term_w()
        redef_layout(cpu_count)
    endif

    # capture system uptime
    on is_file("/proc/uptime") do uptime=float(field(read_file("/proc/uptime"),1))

    # show panes
    sample_start_in=showCpu(timeout,sample_start_in,showCpuDetails,showCpuBars,showCpuTotals)
    showHdd()
    showNet(net_sample_count,load,ipaddr,interface,timeout)
    showProcs(ct,uptime)
    showFiles()
    showMem()

    # status area

    pane select "status"
    pane redraw

    print "[#b1]"
    clear(1,1,1)

    d=date_human()
    timo=string(timeout)
    at 1,1; print "[#bold]",d, "  Current Timeout : {timo} ms  "

    # get user input
    k=keypress(key_timeout)

    at 1,30
    when chr(k)
    is "i"
        prompt interface "Network Interface Name : " "^[a-zA-Z0-9]+$"
        ipaddr=interface_ip(interface)
    is "t"
        prompt timeout "New Timeout (ms) : " "^[0-9]+$"
    is "D"
        showCpuDetails = ! showCpuDetails
    is "B"
        showCpuBars=!showCpuBars
    is "T"
        showCpuTotals=!showCpuTotals
    is "q"
        quit=true
    is "h"
        at 1,54
        print "(h) help  (t) timeout  (i) interface  (q) quit  "
        print "(D) Cpu Details  (B) Cpu Bars  (T) Cpu Totals"
        k=keypress(1500*1000)
        clear_line(1,1)
    endwhen

    cursoroff()
    print "[#-][##]"

endwhile

at term_h()-1,1
cursoron()


