#!/usr/bin/za

#
# argument parsing
#

doc `
The Za interpreter will first take it's own parameters from the command line before
handing over any remnant arguments on the right-hand side of the call to user code 
for processing. Those remnants will be presented as argc() and argv() to Za scripts.
`

# method 1: ARGV
println "\n[#7]1. argv/argc"
println "Argc   : {=argc()}"
println "Argv   : {=argv()}"

if argc() > 0
    foreach a in argv()
        println "  ",1+key_a," -> ",a
    endfor
endif

# method 2: mandatory arguments
println "\n2. mandatory parameters"
println "( not processed in example! )"
# INPUT colour PARAM 1
# INPUT number PARAM 2
println "Colour : {colour}"
println "Number : {number}"

# method 3: optional arguments
println "\n3. optional parameters"
INPUT colour OPTARG 1
INPUT number OPTARG 2
println "Colour : {colour}"
println "Number : {number}"


# method 4: traditional arg parsing

define next()
    local_av=av
    arg=head(local_av)
    local_av=tail(local_av)
    setglob av = local_av
    return arg
end    

av=argv()
ac=argc()
var svar string
var bvar bool
var nvar int

println "\n4. arg loop parsing"
println "working with these args: [#4][#i1]{av}[#i0][#7]"

while !empty(av)
    arg=next()
    if len(arg)>1 && has_start(arg,"-")
        opt=substr(arg,0,2)
        when opt
        is "-h"
            println "Help requested."
        is "-s"
            println "string"
            svar=as_string(next())
        is "-b"
            println "bool"
            bvar=as_bool(next())
        is "-n"
            println "number"
            nvar=as_int(next())
        endwhen
    else
        println "unprocessed argument found: {arg}"
    endif
endwhile

println format("string option provided : {svar} [%T]",svar)
println format("bool option provided   : {bvar} [%T]",bvar)
println format("number option provided : {nvar} [%T]",nvar)

