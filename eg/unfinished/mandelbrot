#!/usr/bin/za

#
# FUNCTIONS
#

# file="/dev/stdout"
file="./mandel.pbm"

define renderRow(y0,bytesPerRow,limit,maxIter)

    init row int 1 bytesPerRow
    ir=getglob("initial_r")

    for majorCol=0 to bytesPerRow-1
        xByte=row[majorCol]
        res = 0
        Ci = getglob("initial_i[y]")
        for i=0 to 7 step 2
            x = (majorCol<<3)
            Cr1 = ir[x+i]
            Cr2 = ir[x+i+1]
            Zr1 = Cr1
            Zi1 = Ci
            Zr2 = Cr2
            Zi2 = Ci
            b = 0
            for j = 0 to maxIter-1
                Tr1 = Zr1 * Zr1
                Ti1 = Zi1 * Zi1
                Zi1 = 2*Zr1*Zi1 + Ci
                Zr1 = Tr1 - Ti1 + Cr1
                if (Tr1+Ti1) > limit
                    b = (b | 2)
                    on b == 3 do break
                endif
                Tr2 = Zr2 * Zr2
                Ti2 = Zi2 * Zi2
                Zi2 = 2*Zr2*Zi2 + Ci
                Zr2 = Tr2 - Ti2 + Cr2
                if (Tr2+Ti2) > limit
                    b = (b | 1)
                    on b == 3 do break
                endif
            endfor
            res = ((res<<2)|b)
        endfor
        row[majorCol] = (255-res)
    endfor

    setglob rows[y0] row

enddef


#
# OUTPUT FUNCTIONS
#

define outputTable(rows,size,bytesPerRow,file)
    print "rendering\n"
    output=format("P1\n# mangledbrot\n%d %d\n",size,size)
    for y = 0 to size-1
        vy=rows[y]
        for x=0 to bytesPerRow-1
            v=vy[x]
            b=format("%08b",v)
            foreach c in b
                output=output + c + " "
            endfor
        endfor
        output=output + "\n"
    endfor
    | echo -en "{output}" >{file}
enddef

define outputAnsi(rows,size,bytesPerRow)

    block="#"
    on utf8supported() do block="â˜…"

    init cmap string 1 8
    cmap[0]=" "
    cmap[1]="[#1]{block}[#-]"
    cmap[2]="[#2]{block}[#-]"
    cmap[3]="[#3]{block}[#-]"
    cmap[4]="[#4]{block}[#-]"
    cmap[5]="[#5]{block}[#-]"
    cmap[6]="[#6]{block}[#-]"
    cmap[7]="[#7]{block}[#-]"

    # we calculate an arbitrary colour below

    for y=0 to size-1
        vy=rows[y]
        for x=0 to bytesPerRow-1
            v=vy[x]
            for minorx=7 to 0 step -2
                powerval1   = pow(2,minorx)
                powerval2   = pow(2,minorx-1)
                masked1     = (v & powerval1) / powerval1
                masked2     = (v & powerval2) / powerval2
                rgb=2*masked1+masked2
                print cmap[rgb]," "
            endfor
        endfor
        print
    endfor
    print

enddef


#
# MAIN
#

size = 40
maxIter = 200
limit = 4

# Get input, if any...
input strSz     optarg 1
input strLim    optarg 2
on strSz!=""    do size =int(strSz)
on strLim!=""   do limit=float(strLim)

bytesPerRow = (size >> 3)
print "Rows  : {size}\n"
print "Cols  : {bytesPerRow}\n"
print "Limit : {limit}\n"

# dim name      type    dimensions  extent
init rows       int     2
init initial_r  float   1           size
init initial_i  float   1           size

# Precompute the initial real and imaginary values for each x and y
#  coordinate in the image.

inv = 2.0 / float(size)
for xy=0 to size-1
    i = inv * float(xy)
    initial_r[xy] = i - 1.5
    initial_i[xy] = i - 1.0
endfor

print "building\nRow "
# no parallelism here!
for y = 0 to size-1
    renderRow(y,bytesPerRow,limit,maxIter)
    print y+1," "
endfor
print

# outputAnsi(rows,size,bytesPerRow)
outputTable(rows,size,bytesPerRow,file)

