#!/home/rundeck/ccjobscripts/tcremote/za

doc Name:       tcremote
doc Author:     Daniel Horsley
doc Date:       30-01-2020
doc Version:    5

doc Description:
doc
doc  This script will find tomcat instances in a
doc  given account and connect to each one in order
doc  to execute a command via ssh.
doc
doc  prerequisites:
doc     a valid ssh private key already in path that
doc       can reach all of the instances.
doc     a path containing the account credentials as
doc       source files. filenames should be in the
doc       form "acc-<account_name>"
doc
doc EndDescription

doc Syntax:     tcremote [ <region_name>  [ <account_name> [ command [ filter ] ] ] ]

doc region_name=AWS region name to process
doc account_name=dev|test|stage|live
doc command=single line command to execute
doc filter=specificity filter for the cluster tag


# globals
credpath     = "/home/rundeck/keys"
cmd          = "hostname && ec2-metadata | grep instance-id"
apptaglist   = "application.*[ \t](multiapp|CAS|General|API|APIInternal|MOCK)$"
i_colour     = "[#fbgreen]"
c_colour     = "[#1]"


# arguments
input instance_region optarg 1
input account optarg 2
input command optarg 3
input filter optarg 4
region="eu-west-1"  ; on instance_region!=""        do region=instance_region
cmd=""              ; on command!=""                do cmd=command
#cluster_filter=""   ; on filter!=`${option.filter}` do cluster_filter=filter


# source credentials
if account!=""
    println "\ncreds @ [#invert]{credpath}[#-]"
    | source {credpath}/acc-{account}

    if last()!=0
        println "Could not find credentials for {account}"
        exit last()
    endif

endif

println "Found credentials."

# get instance iterator
dt =| aws ec2 --region={region} describe-tags --output=text | egrep "{apptaglist}"
if length(dt)==0
    println "No hosts found."
    exit 0
endif


# build instance list for account
print
foreach ln in dt
    l=tr(ln,"s"," \t")
    instance=field(l,3," \t")

    # reject badly tagged stuff - instances must start with i-
    on ! match(instance,"^i-") do continue

    println "Instance : {i_colour}{instance}[#-] ",field(l,5," \t")
    ilist=append(ilist,instance)
endfor
print


# find IPs, get most usable, ssh a command to it
foreach i in ilist

    di =| aws ec2 --region={region} describe-instances --instance-id {i} | jq '.Reservations[]|.Instances[] | [.PrivateIpAddress,.PublicIpAddress,.InstanceId, ( .Tags[] | select(.Key=="cluster") | .Value )]'
    iip=trim(tr(lines(di,"1:1"),"d",`",`),0)
    eip=trim(tr(lines(di,"2:2"),"d",`",`),0)
    iid=trim(tr(lines(di,"3:3"),"d",`",`),0)
    clu=trim(tr(lines(di,"4:4"),"d",`",`),0)

    # filter in specific clusters
    if cluster_filter!=""
        if ! match(clu,cluster_filter)
            # println "  [#2]not operating on {iid} / {clu} due to cluster filter {cluster_filter}.[#-]\n"
            continue
        endif
    endif

    uip=iip
    on eip!="null" do uip=eip

    println "  On {i_colour}{iid} - {clu} - {uip}[#-] - Executing {c_colour}{cmd}[#-]"

    op =| ssh -i /home/rundeck/.ssh/id_rsa -o "StrictHostKeyChecking no" ec2-user@{uip} "{cmd}"

    println "\n[#invert]",op,"[#-]"

    if last()>0
        print "Errored with ",last()
        on uip==iip do println " - maybe this VPC is unreachable?"
        println last_out()
    endif

    println "Call to {iid} complete.\n"
 
endfor

print



