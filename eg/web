#!/usr/bin/za

module "web_modules/aws_handler"

# GLOBALS

HOST="127.0.0.1"
PORT=8080
HOME_PATH="/home/daniel/www"

trapInt="cleanup()"

# FUNCTIONS

define cleanup()
    println "[#2]** User break **[#-]"
    return 42
end

define interface_ip(in)
    addrline =| ip addr show dev {in}
    ipaddr=replace(filter(addrline.out,"inet.*/"),"inet ","")
    ipaddr=replace(ipaddr,"/","")
    return ipaddr
end

define negreg(inp,matcher)
    out=""
    foreach l in inp
        if match(l,matcher); continue; endif
        out=out+l+"\n"
    endfor
    return out
end

# MAIN

when release_id()
is "ubuntu"
    inter=collapse(negreg(net_interfaces(),"^(docker|lo).*$"))
    println "Found interface : {inter}"
endwhen

# HOST=interface_ip(inter)

on get_env("PROXY_HOST")!="" do HOST=get_env("PROXY_HOST")
on get_env("PROXY_PORT")!="" do PORT=get_env("PROXY_PORT")
on get_env("PROXY_PATH")!="" do HOME_PATH=get_env("PROXY_PATH")


# Set up an access log file
logging web enable
logging accessfile ".access"

# Start a web server
#  HOME_PATH is the document root.
#  PORT is the TCP port to listen on.
#  HOST is the IP or DNS name to use as, effectively, a virtual host address of the site.

println "Starting server process [{HOST}:{PORT}]"
uid = web_serve_start(HOME_PATH,PORT,HOST)
println "Started server process [{uid}]"

# web_serve_path() is for handling traffic routing rules.
# argument 1 indicates which configured server id to target. argument 2 is the rule type.
#
#   "p" is the rule type for reverse proxying. When present, a proxy rule looks for URI 
#     paths which meet the criteria of the regex in argument 3 and makes a request on 
#     behalf of the client to a backend server indicated by argument 4.
#     parenthesised parts of the regex are treated as back references $1...$n in arg 4. 
#     (Like apache httpd and others do this). if argument 2 is empty then all traffic is proxied.
#
#   "e" indicates an error rule. These apply only to "p" proxied traffic.
#     When a proxied backend fetch on a path whose start matches argument 3 results in a 
#     HTTP status code >=300 then the client is sent a temporary redirect to the 
#     location indicated by argument 4.

# web_serve_path(uid,"p"      , `/namelookup(.*)`     , "http://{HOST}/namelookup$1"               )
# web_serve_path(uid,"p"      , `/css/(.*)`           , "http://{HOST}/namelookup/css/$1"          )
# web_serve_path(uid,"p"      , `/(.*\.(js|css))$`    , "http://{HOST}/$1"                         )
# web_serve_path(uid,"e"      , `/namelookup`         , "http://{HOST}:{PORT}/errors/error.html"   )
# web_serve_path(uid,"p"      , `/notblah(.*)`        , "http://{HOST}:{PORT}/blah$1"              )
# web_serve_path(uid,"e404"   , `/notblah`            , "http://{HOST}:{PORT}/errors/error.html"   )
# web_serve_path(uid,"e404" , `/notblah`            , "https://www.google.co.uk" )
# web_serve_path(uid,"p"      , `/test(.*)`           , "http://{HOST}:8081/test$1"                )

#   "f" invokes a za function to respond to requests that satisfy the path given by the
#       regex in argument 3. The function name is given as argument 4.  Any POST data is 
#       handed-off to the za function as part of the function invocation. You can choose
#       to parse this using web_serve_decode(p) where p is the name of the first argument 
#       provided to the handler function you write.
#       web_serve_decode() returns a struct containing:
#            .host (host:port), .method, .path, .remote_ip (remote_ip:port) and .data (POST data).
#       additional fields may be added later.

web_serve_path(uid,"f"      , `/fun/awsip`            , "fwhandle" )
 

# redirect
#   "r" rules will permanently redirect requests whose URI path begins with
#      argument 3 to the URL indicated by argument 4.
#    argument 3 is *not* a regex, it is a straight string match.

# web_serve_path(uid,"r","/gone","https://badplace.info")


# local server
#   "s" rules dictate URI paths which are served locally instead of being proxied.
#   i.e. Use these rules if you just want a static web server.
#
#   Argument 3 indicates that URI paths starting with the argument string will match the rule.
#   This changes when argument 4 is non-empty:
#     when arg 4 has content, argument 3 is treated as a regex and argument 4 is its replacement rule.
#   These pages are served from the docroot path set in web_serve_start(). 

#

web_serve_path(uid, "s", "/headers",  "")
web_serve_path(uid, "s", "/errors",   "")
web_serve_path(uid, "s", "/img/",     "")
web_serve_path(uid, "s", "/blah",     "")
web_serve_path(uid, "s", "/docs",     "")
web_serve_path(uid, "s", "/index.",   "")
web_serve_path(uid, "s", "/favicon.ico$",   "")
web_serve_path(uid, "s", "^/$",       "http://{HOST}:{PORT}/index.html"    )
web_serve_path(uid, "s", "^/(.*)/$",  "http://{HOST}:{PORT}/$1/index.html" )
web_serve_path(uid, "s", "^/(.*)$",   "http://{HOST}:{PORT}/$1" )

# control for throttling repeat access log entries (start,frequency)
web_serve_log_throttle(100,10000)

# second server on different port...
suid = web_serve_start(HOME_PATH+"/exmachina",61440,HOST)
web_serve_path(suid, "s", "^/$", "http://{HOST}:61440/index.html")
web_serve_path(suid, "s", `/(.*\.(|html?|js|css|php|png|jpg|ico))$`, `http://{HOST}:61440/$1`)
web_serve_path(suid, "s", "^/(.*)/$", "http://{HOST}:61440/$1/index.html")


#
# example processing loop. this is effectively our model component.
#  the stuff above in the web_serve_path()'s would be the controller.
#  anything else is the web server itself.
#
#  You can build this however you want.
#  In general though, if intended for longer term serving, you will probably want to
#  daemonise it, in which case you'll need a loop like shown.
#

# set refresh to once per day
ipListRefreshMaxCount=12*60*24
ipListRefreshCount=ipListRefreshMaxCount

region="eu-west-1"
on get_env("AWS_DEFAULT_REGION")!="" do region=get_env("AWS_DEFAULT_REGION")

while web_serve_up(suid)

    if ipListRefreshCount == ipListRefreshMaxCount
        # refresh list of AWS IP address ranges
        tmp=web_get("https://ip-ranges.amazonaws.com/ip-ranges.json")

        if tmp.code==200

            ipListRefreshCount--
            s=epoch_nano_time()

            thisRegion = json_query(tmp.result, `.prefixes[] | select(.region=="{region}" and .service=="EC2") | .ip_prefix`)

            print "region :\n",thisRegion,"\n"
            println "Completed in ",time_diff(epoch_nano_time(),s)," us"

        else
            println "Could not fetch ip ranges from AWS."
        endif

    endif

    on ipListRefreshCount == 0 do ipListRefreshCount = ipListRefreshMaxCount

    pause 5000

endwhile

# This stops and discards a running web server:
web_serve_stop(suid)
web_serve_stop(uid)


