#!/usr/bin/za

# Version: 0.1.0

doc `
        INPUT ENVIRONMENTAL VARIABLES

        service_name                MANDATORY       format: string
        service_short_name          MANDATORY       format: string < 28 char width
        load_balancers              MANDATORY       format: comma separated list in string
        region                      MANDATORY       format: string
        health_check_path           OPTIONAL        default:/${service_name}/health
        tcp_port                    OPTIONAL        default:8080
`

# globals
enum e ( ok=0, syntax, range, remote_create, remote_query )
valid_tg_regex      = "^arn:aws:elasticloadbalancing:[a-z0-9\-]+:[0-9]+:targetgroup/"
valid_listener_regex= "^arn:aws:elasticloadbalancing:[a-z0-9\-]+:[0-9]+:listener/"
valid_rule_regex    = "^arn:aws:elasticloadbalancing:[a-z0-9\-]+:[0-9]+:listener\-rule/"
listener_port       = 443
health_interval     = 10
health_timeout      = 2
health_response_code= 200
protocol_version    = "HTTP1"
protocol            = "HTTP"
target_type         = "ip"

# inputs
input access_key            env AWS_ACCESS_KEY
input secret_key            env AWS_SECRET_KEY
input region                env AWS_DEFAULT_REGION
input load_balancers        env load_balancers
input service_name          env service_name
input service_short_name    env service_short_name
input health_check          env health_check_path
input tcp_port              env tcp_port
input dry_run               env dry_run


# error if missing:
if service_name=="" or service_short_name=="" or load_balancers=="" or region==""
    exit e.syntax,"startup parameter missing!"
endif

dry=true
on dry_run ~i "^(false|0|off)$" do dry=false

def arypos(ary,val)
    foreach i in ary 
        on i==val do return key_i
    endfor
    return -1
end


# cli setup
if access_key!=""
    | export AWS_ACCESS_KEY_ID="{access_key}"
    | export AWS_SECRET_ACCESS_KEY="{secret_key}"
    | export AWS_DEFAULT_REGION="{region}"
endif

# retrieve all albs from aws api
lb_param_list=""
foreach lb in load_balancers.split(",")
    lb_param_list+=` \"{lb}\" `
endfor

albs =| aws elbv2 describe-load-balancers --names {lb_param_list} --output json
on not albs.okay do exit e.remote_query, "could not fetch load balancer list"

remnant=tr(albs.out,"d"," ,")
on remnant.len==0 do exit e.syntax,"empty load balancer list"

# main loop
foreach lb in load_balancers.split(",")

    lb=$st lb
    on lb=="" do exit e.syntax,"load balancer name missing"

    lbquery=`.[]|.[]|select(.LoadBalancerName=="`+lb+`")`
    alb_det=json_query(albs.out,lbquery,true)[0]

    #foreach z in alb_det["AvailabilityZones"]
    #    println "alb_det [{lb}] zone found : ",z["ZoneName"]
    #endfor

    alb_arn=alb_det["LoadBalancerArn"]
    alb_scheme=alb_det["Scheme"]
    alb_vpc=alb_det["VpcId"]

    println "[#6]alb    : ",lb
    println "arn    : ",alb_arn
    println "scheme : ",alb_scheme
    println "vpc    : ",alb_vpc,"[#-]"

    # bulk pull of listener/target group info from aws api
    tgs_det =| aws elbv2 describe-target-groups --output json
    on not tgs_det.okay do exit e.remote_query,"could not describe target groups"

    lsnr_det=| aws elbv2 describe-listeners --load-balancer-arn {alb_arn} --output json
    on not lsnr_det.okay do exit e.remote_query,"could not describe load balancer listeners"

    # i/e internal/external facing
    lbscheme="i"
    on $lc alb_scheme == "internet-facing" do lbscheme="e"

    tgn="tgt-{lbscheme}-{service_short_name}"
    println "target group name : ",tgn

    tgquery=`.[]|.[]|select(.TargetGroupName=="`+tgn+`")`
    tgq_json=json_query(tgs_det.out,tgquery,true)[0]

    tg_arn=tgq_json["TargetGroupArn"]
    # println "tgquery -> ",tg_arn

    if tg_arn ~i valid_tg_regex
        println "[#4]target group {tgn} already exists, so using it...[#-]"
    else

        println "[#3]target group {tgn} does not exist, creating...[#-]"

        tgcreate=`aws elbv2 create-target-group \
        --name "{tgn}" --protocol "{protocol}" --port {tcp_port} \
        --target-type {target_type} --vpc-id {vpcn} \
        --health-check-path "{health_check_path}" \
        --health-check-interval-seconds {health_interval} \
        --health-check-timeout-seconds {health_timeout} \
        --matcher HttpCode={health_response_code} \
        --protocol-version "{protocol_version}"`

        if dry
            println "[fake] would use this command :\n[#2]{tgcreate}[#-]"
        else
            tg_create_result=| {tgcreate}
            on not tg_create_result.okay do exit e.remote_create,"could not create target group! talk to a sysadmin."
            tg_arn=json_query(tg_create_result.out,`.TargetGroups[].TargetGroupArn`)
            println "[#4]target group setup completed with ARN {tg_arn}[#-]"
        endif

    endif

    # forwarding rule setup
    listener_query=`.Listeners[]|select(.Port==`+listener_port.as_string+`)`
    listener_result=json_query(lsnr_det.out,listener_query,true)[0]
    listener_arn=listener_result["ListenerArn"]

    on not listener_arn ~i valid_listener_regex do exit e.remote_query,"no listener ARN found" 

    # @note: we don't create listeners, only adjust them

    # .. read rules in
    rules=|aws elbv2 describe-rules --listener-arn "{listener_arn}" --output json
    path_start="/{service_name}"
    rule_arn=json_query(rules.out,`.[]|.[]|select(.Conditions[].PathPatternConfig.Values[]|startswith("`+path_start+`"))|.RuleArn`)

    rule_title="[#bold]Current Rules[#boff]"
    println "\n"," " * (40-rule_title.ccformat.stripansi.len), rule_title

    foreach r in rules.out.json_query(`.[]`,true)[0]
        cond=r["Conditions"][0]
        acts=r["Actions"][0]
        case cond
        is nil
            print format("%40s : ","DEFAULT")
        or
            print format("%40s : P%03d ",cond["Values"][0],as_int(r["Priority"]))
        endcase
        println field(acts["ForwardConfig"]["TargetGroups"][0]["TargetGroupArn"],6,":")
    endfor
    print

    # adjust/create forwarding rule
    if rule_arn ~i valid_rule_regex
        println "[#4]Rule already exists on listener.[#-]"
    else

        println "[#3]Creating new listener rule for path {path_start}[#-]"

        priority_list=json_query(rules.out,`.["Rules"]|.[]|.Priority`,true)
        p=arypos(priority_list,"default")
        on p!=-1 do priority_list=remove(priority_list,1+p)
        max_p=priority_list.list_int.max
        println "max priority : ",max_p

        create_rule = `aws elbv2 create-rule --actions Type=forward,TargetGroupArn={tg_arn} \
        --listener-arn {listener_arn} \
        --conditions Field=path-pattern,Values="/{service_name}*" \
        --priority {=1+max_p} --output json`

        if dry
            println "[fake] would use this command : \n[#2]",create_rule,"[#-]"
        else
            create_result =| {create_rule}
            rule_arn=json_query(create_result.out,`.Rules[].RuleArn`)
            if rule_arn ~i valid_rule_regex
                println "listener forwarding rule created okay : {rule_arn}"
            else
                exit e.remote_create,"could not create listener forwarding rule!"
            endif
        endif
    endif

    | export ALB_{=$uc lbscheme}_ARN="{alb_arn}"
    | export ALB_{=$uc lbscheme}_Name="{lbname}"
    | export TG_{=$uc lbscheme}_ARN="{tg_arn}"

endfor

exit e.ok

