#!/usr/bin/za

#
# collison and bounce logic is all wrong in here,
# but you get the idea... it's just an object test.
#

CHAR=0
BOX =1

struct object
    type    int
    bg      int
    fg      int
    text    string
    h       int
    w       int
    x       float
    y       float
    dx      float
    dy      float
    px      float
    py      float
endstruct

define is_inside(x,y,a1,b1,a2,b2)
    on x<a1 or x>a2 do return false
    on y<b1 or y>b2 do return false
    return true
end

define collides(obkey)
    i=objects[obkey]
    for e=0 to objects.len-1
        on e==obkey || objects[e]==nil do continue
        j=objects[e]
        cmpx=i.x+i.dx ; cmpy=i.y+i.dy
        on is_inside(cmpx,cmpy,j.x,j.y,j.x+j.w,j.y+j.h) do return e
    endfor
    return -1
end 

define moveall()
    for e=0 to objects.len-1
        on objects[e]==nil do continue
        o=objects[e]
        o.px=o.x; o.py=o.y
        o.x+=o.dx
        o.y+=o.dy
        colpos=collides(e)
        if colpos!=-1
            collider=objects[colpos]
            # bounce away if smaller
            if o.h*o.w < collider.h*collider.w
                if o.dx<o.dy
                    o.dx=-o.dx
                else
                    o.dy=-o.dy
                endif
            endif
            if o.h*o.w == collider.h*collider.w
                # same size, so collision object also bounces away
                if collider.dx<collider.dy
                    collider.dx=-collider.dx
                else
                    collider.dy=-collider.dy
                endif
                setglob objects[colpos]=collider
            endif 
            on o.bg>0 do o.bg-=1
        endif
        on o.x<=1            do o.dx=-o.dx
        on o.x+o.w>=term_w() do o.dx=-o.dx
        on o.y<=1            do o.dy=-o.dy
        on o.y+o.h>=term_h() do o.dy=-o.dy
        setglob objects[e]=o
    endfor
end 

define show(obj_list)
    foreach o in obj_list
        on o==nil do continue
        if o.type==BOX
            for e=0 to o.h-1
                at int(o.y+e),int(o.x)
                print "[#b"+o.bg+"][#"+o.fg+"]"+o.text+"[#-][##]"
            endfor
        else
            at int(o.y),int(o.x)
            print "[#b"+o.bg+"][#"+o.fg+"]"+o.text+"[#-][##]"
        endif
    endfor
end

define hide(obj_list)
    foreach o in obj_list
        on o==nil do continue
        on int(o.px)==int(o.x) && int(o.py)==int(o.y) do continue
        if o.type==BOX
            for e=0 to o.h-1
                at int(o.py+e),int(o.px)
                print pad(" ",-1,o.w," ")
            endfor
        else
            at int(o.py),int(o.px)
            print pad(" ",-1,o.w," ")
        endif
    endfor
end

define object_add_text(n,label,x,y,bg,fg)
    var obj object
    obj.text=label
    obj.fg=fg
    obj.bg=int(bg)
    obj.h=1
    obj.w=label.len
    obj.x=x.float
    obj.y=y.float
    obj.px=x.float
    obj.py=y.float
    setglob objects[n]=obj
end

define object_add_box(n,label,x,y,h,bg,fg)
    var obj object
    obj.type=BOX    ; obj.text=label
    obj.fg=fg       ; obj.bg=int(bg)
    obj.h=h         ; obj.w=label.len
    obj.x=x.float   ; obj.y=y.float
    obj.px=x.float  ; obj.py=y.float
    setglob objects[n]=obj
end

define waitkey()
    setglob quit=false
    keypress()
    setglob quit=true
    at term_h(),1
    cursoron()
end


#
# MAIN
#

async retwait waitkey()

var objects [100]mixed

cls
cursoroff()

# create some objects

object_add_box(4,"###",term_w()/2,term_h()/2,3,4,7)
objects[4].dx=0.1
objects[4].dy=0.1

seed(epoch_nano_time())
for e=50 to 99
    object_add_text(e,char(33+rand(10)),rand(term_w()),rand(term_h()),rand(7),rand(7))
    objects[e].dx=(50-rand(100))/50.0
    objects[e].dy=(50-rand(100))/100.0
endfor


# anim loop

quit=false

while !quit
    objects.show
    moveall()

    # quit when everything has collided
    colbreak=true
    for e=0 to objects.len-1
        on objects[e]==nil do continue
        o=objects[e]
        if o.bg>0
            colbreak=false
            break
        endif
    endfor
    on colbreak do quit=true
    objects.hide

endwhile

at term_h(),1
cursoron()

