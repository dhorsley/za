#!/usr/bin/za

#
# collison and bounce logic is a bit wrong in here,
# objects can stick to each other, i'm too lazy
# to figure it out though!
# but you get the idea... it's just an object test.
#

boxcount=35

enum shapes ( CHAR=0, BOX )

struct object
    type    int
    bg      int
    fg      int
    text    string
    h       int
    w       int
    x       float
    y       float
    dx      float
    dy      float
    px      float
    py      float
    weight  float
endstruct

define is_inside(obj,obj2)
    on obj.x+obj.w+obj.dx<obj2.x or obj.x+obj.dx>obj2.x+obj2.w do return false
    on obj.y+obj.h+obj.dy<obj2.y or obj.y+obj.dy>obj2.y+obj2.h do return false
    return true
end

define collides(obkey)
    i=objects[obkey]
    for e=0 to objects.len-1
        on e==obkey || objects[e]==nil do continue
        j=objects[e]
        on is_inside(i,j) do return e
    endfor
    return -1
end 

# meh, this is a mess, but it kinda works.
define moveall()
    for e=0 to objects.len-1
        on objects[e]==nil do continue
        o=objects[e]
        o.px=o.x; o.py=o.y
        colpos=collides(e)
        if colpos!=-1
            collider=objects[colpos]
            # bounce away if lighter
            if o.weight < collider.weight
                if o.dy<o.dx
                    o.dx=-o.dx
                else
                    o.dy=-o.dy
                endif
            else
                # bounce away with smaller dx,dy if heavier
                if o.dy<o.dx
                    o.dx=-o.dx/4
                else
                    o.dy=-o.dy/4
                endif
            endif

            if o.weight == collider.weight
                # same weight, so collision object also bounces away
                if collider.dy<collider.dx
                    collider.dx=-collider.dx
                else
                    collider.dy=-collider.dy
                endif
                setglob objects[colpos]=collider
            endif 
            on o.bg>0 do o.bg-=1
        endif
        o.x+=o.dx
        o.y+=o.dy

        # term edges
        if o.x<=1
            o.x=1f
            on o.dx<0 do o.dx=-o.dx*1.5
        endif
        if o.x+o.w>=term_w()
            o.x=term_w().float-o.w
            o.dx=-o.dx*1.5
        endif
        if o.y<=1
            o.y=1f
            on o.dy<0 do o.dy=-o.dy*1.5
        endif
        if o.y+o.h>=term_h()
            o.y=term_h().float-o.h
            o.dy=-o.dy*1.5
        endif

        # set lower speed limit
        on o.dx>0 do o.dx=o.dx[0.1f:4f]
        on o.dx<0 do o.dx=o.dx[-4f:-0.1f]
        on o.dy>0 do o.dy=o.dy[0.1f:4f]
        on o.dy<0 do o.dy=o.dy[-4f:-0.1f]

        setglob objects[e]=o
    endfor
end 

define show(obj_list)
    foreach o in obj_list
        on o==nil do continue
        if o.type==shapes.BOX
            for e=0 to o.h-1
                at int(o.y+e),int(o.x)
                print "[#b"+o.bg+"][#"+o.fg+"]"+o.text+"[#-][##]"
            endfor
        else
            at int(o.y),int(o.x)
            print "[#b"+o.bg+"][#"+o.fg+"]"+o.text+"[#-][##]"
        endif
    endfor
end

define hide(obj_list)
    foreach o in obj_list
        on o==nil do continue
        on int(o.px)==int(o.x) && int(o.py)==int(o.y) do continue
        if o.type==shapes.BOX
            for e=0 to o.h-1
                at int(o.py+e),int(o.px)
                print " "*o.w
            endfor
        else
            at int(o.py),int(o.px)
            print " "*o.w
        endif
    endfor
end

define object_add_box(n,label,x,y,h,bg,fg)
    var obj object
    obj.type=shapes.BOX ; obj.text=label
    obj.fg=fg           ; obj.bg=int(bg)
    obj.h=h             ; obj.w=label.len
    obj.x=x.float       ; obj.y=y.float
    obj.px=x.float      ; obj.py=y.float
    obj.weight=h.float*label.len
    setglob objects[n]=obj
end

define waitkey()
    setglob quit=false
    keypress()
    setglob quit=true
    at term_h(),1
    cursoron()
end


#
# MAIN
#

async nil waitkey()

var objects [100]mixed

cls
cursoroff()

# create some objects

seed(epoch_nano_time())

for e=1 to boxcount
    sidelen=rand(5)
    while
        object_add_box(e,"Â·"*sidelen,rand(term_w()-sidelen),rand(term_h()-sidelen),sidelen,rand(7),rand(7))
        on collides(e)==-1 do break while
    endwhile
    objects[e].dx=-3+randf()*6
    objects[e].dy=-3+randf()*6
endfor


# anim loop

quit=false

while !quit

    # quit=true

    objects.show
    moveall()

    # quit when everything has collided
    all_colours_dead=true
    for e=0 to objects.len-1
        on objects[e]==nil do continue
        o=objects[e]
        if o.bg>0
            all_colours_dead=false
            break
        endif
    endfor

    on all_colours_dead do quit=true

    if !quit
        pause (2f/boxcount)*1000
        objects.hide
    endif

endwhile

at term_h(),1
cursoron()

