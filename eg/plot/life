#!/usr/bin/za

doc `
    fairly buggy life demo... all the async stuff doesn't mix well with console output!

    should maybe convert this to use the lib-ui 2d stuff instead
`


empty=" "; full="[#4]o"
if os()!="windows" && utf8supported()
    empty="[#3]·"
    full ="[#4]¤"
endif

mw=term_w()
mh=term_h()
quit=false
resizing=false
drawing=false
helping=false
generate=false
inputing=false
genx=0

cx=mw/2
cy=mh/2

define proc_resize()
    while !quit
        if mw!=term_w() || mh!=term_h()
            if !drawing
                setglob resizing=true
                setglob mw=term_w()
                setglob mh=term_h()
                setglob grid=build_empty_cells()
                setglob cx=mw/2
                setglob cy=mh/2
                setglob resizing=false
            endif
        else
            pause 1000
        endif
    endwhile
end

define proc_input()
    while !quit
        while drawing || resizing; endwhile
        inputing=true
        cursoron()
        at cy,cx
        i=keypress(2000)
        when i
        is 104 # h
            on cx>1 do setglob cx=cx-1
        is 108 # l
            on cx<mw do setglob cx=cx+1
        is 106 # j
            on cy<mh-1 do setglob cy=cy+1
        is 107 # k
            on cy>1 do setglob cy=cy-1
        is 32
            l=grid[cy]
            l[cx]=!l[cx]
            setglob grid[cy]=l
        is 103 # g
            setglob generate=!generate
            setglob genx=0
        is 99 # c
            setglob mw=-1  # invalidate the size, to clear grid
        is 63 # ?
            setglob helping=true
            at mh,1
            print "[#invert]?:help c:clear g:generate h,j,k,l:cursor q:quit[#CTE][#default]"
            keypress(2000000)
            setglob helping=false
        is 113 # q
            setglob quit=true
        endwhen
        inputing=false
    endwhile
end

define build_empty_cells()
    var grid [mh+2]mixed
    for r=0 to mh+1
        grid[r]=[]
        for e=0 to mw+1
            grid[r]=append(grid[r],false)
        endfor
    endfor
    return grid
end

define count_neighbours(r,b)
    var i int
    a=b-1; c=b+1
    t=r-1; u=r+1
    if t>1
        on a>1  && grid[t][a]   do i++
        on grid[t][b]           do i++
        on c<mw && grid[t][c]   do i++
    endif
    on a>1  && grid[r][a] do i++
    on c<mw && grid[r][c] do i++
    if u<mh-1
        on a>1  && grid[u][a]   do i++
        on grid[u][b]           do i++
        on c<mw && grid[u][c]   do i++
    endif
    return i
end


#
# main loop
# 

cls

grid=build_empty_cells()

# spawn bg stuff
async a_resize proc_resize()
async a_input  proc_input()

while !quit

    # status
    while resizing || helping || inputing ; endwhile
    drawing=true
    cursoroff()

    if !inputing && !helping
        at mh,1; print "[#b1][#6]cy,cx:{cy},{cx} mh,mw:{mh},{mw}  "
        on generate do print "[#b1]GENERATING #"+genx+++"[#b0]"
        print "[#CTE][##][#-]"
    endif

    # background + cells
    for r=1 to mh-1
        for e=1 to mw
            at r,e
            i=grid[r][e]
            if i
                print full
                continue
            endif
            print empty
        endfor
    endfor
    drawing=false
    
    # cursor
    cursoron()
    at cy,cx

    # generation
    cursoroff()
    if generate
        new=build_empty_cells()
        for r=1 to mh-1
            newrow=new[r]
            for e=1 to mw
                n=count_neighbours(r,e)
                if grid[r][e]
                    newrow[e] = n==2||n==3
                else
                    newrow[e] = n==3
                endif
            endfor
            new[r]=newrow
        endfor
        cursoroff()
        grid=new
    endif
    pause 150

endwhile

at mh,1
cursoron()

