#!/usr/bin/za

#
# example flood fill inside a text buffer shape
#
#  this is about as simple a fill as you can make. there are
#  many possible optimisations, but speed isn't the goal here.
#

#
# functions
#

define show()
    for l=1 to sl-1
        at l,1; print screen[l]
    endfor
end

define fill(x,y,b,c)
    on x<1 or x>=sl do return
    on y<1 or y>sw do return
    on screen[x][y]  ==b do @ screen[x]=screen[x][:y]+c+screen[x][y+1:]
    on screen[x][y-1]==b do fill(x,y-1,b,c)
    on screen[x][y+1]==b do fill(x,y+1,b,c)
    on screen[x-1][y] ==b do fill(x-1,y,b,c)
    on screen[x+1][y] ==b do fill(x+1,y,b,c)
end


#
# MAIN
#

cls

sl=term_h()-1
sw=term_w()-1

var screen [sl] string
for i=0 to sl-1
    screen[i]=sw*" "
endfor

# draw enclosing shape
screen[02]="######     #####   #####    "
screen[03]="#    #     #   #   #   #    "
screen[04]="###  #    ##  ##   #   #    "
screen[05]="  #  #    #   #    #   #    "
screen[06]="  #  #####    #####     ### "
screen[07]="  #             #         # "
screen[08]=" ##             #         # "
screen[09]=" #             ##         # "
screen[10]=" ######             ####### "
screen[11]=" #                  #       "
screen[12]=" #####              #       "
screen[13]=" #        ######    ######  "
screen[14]=" #        #    #          # "
screen[15]=" #        #  # #          # "
screen[16]=" #        #### #          # "
screen[17]=" #             #          # "
screen[18]=" ########################## "

cursoroff()
show()
at 35,1; print "press a key to fill box!"
keypress()
at 38,1; print "press <space> to quit!  "

ob=" "
b="-"
quit=false

async nil fill(13,13,ob,b)

while !quit

    case keypress(100)
    is 32 # space
        quit=true
    is 13 # return
        ob=b
        while
            b=char(32+rand(31))
            on b!="#" do break
        endwhile
        async nil fill(13,13,ob,b)
    ec
    show()

endwhile

at term_h(),1
cursoron()

