#!/usr/bin/za

doc `
    simple todo list example
`

# functions

save_version=2

def save(tasks,saveloc)
    saved=false
    h=fopen(saveloc,"w")
    fwrite(h,"{=save_version}\n")
    if h!=nil
        foreach e in tasks
            tag_list=e.tag_list.join(" ")
            fwrite(h,"{=e.name}\n{=e.description}\n{=e.assignee}\n{=e.link}\n{=e.status}\n{=e.substatus}\n{=e.start_date}\n{=e.end_date}\n{tag_list}\n")
        endfor
        fclose(h)
        saved=true
    endif
    return saved
end

def load(saveloc)
    opened=false
    h=fopen(saveloc,"r")
    if h!=nil
        var tasks []any
        load_version=1
        on !feof(h) do load_version=fread(h,"\n").as_int
        # v2 new field: end_date
        end_date=0
        while !feof(h)
            name=fread(h,"\n")
            desc=fread(h,"\n")
            assignee=fread(h,"\n")
            link=fread(h,"\n")
            status=fread(h,"\n").as_int
            substatus=fread(h,"\n").as_int
            start_date=fread(h,"\n").as_int
            on load_version>1 do end_date=fread(h,"\n").as_int
            tag_list=fread(h,"\n").split(" ")
            on tag_list.len==1 and trim(tag_list[0],0)=="" do tag_list=list_string([])
            append_to(ref tasks,task(name,desc,assignee,link,status,substatus,start_date,end_date,tag_list))
        endwhile
        fclose(h)
        opened=true
    endif
    return tasks,opened
end

def cleanup()
    tui_screen(0)
    saved=save(tasks,saveloc)
    if saved
        footer("[#4]tasks saved to %s[#-]".format(saveloc))
    else
        footer("[#2]tasks not saved to %s[#-]".format(saveloc))
    endif
    println
    cursoron()
    at term_h(),1
    exit
end


def get_date_human(t,row,col)

    # at current row,col receiving multi-part input for date + time

    on t is nil do t=epoch_time()
    ty=time_year(t).as_string
    tmo=time_month(t).as_string
    td=time_dom(t).as_string
    th=time_hours(t).as_string
    tmi=time_minutes(t).as_string

    invalid=true
    while invalid
        at row,col
        prompt dd "" "[0-9]{2}" is format("%02s",td)
        at row,col+2
        prompt mo "/" "[0-9]{2}" is format("%02s",tmo)
        at row,col+5
        prompt yyyy "/" "[0-9]{4}" is format("%04s",ty)
        at row,col+10
        prompt hh " " "[0-9]{2}" is format("%02s",th)
        at row,col+13
        prompt mi ":" "[0-9]{2}" is format("%02s",tmi)

        on dd.as_int>31 do continue
        on mo.as_int>12 do continue
        on hh.as_int>23 do continue
        on mi.as_int>59 do continue
        invalid=false
    endwhile

    # build rfc3339 fmt string, then convert
    s="%s-%0s-%0sT%0s:%0s:00.00Z".format(yyyy,mo,dd,hh,mi)
    return epoch_time(s)

end


def debugline(s)
    clear_line(term_h()-4,1)
    at term_h()-4,1,format("[#5]debug: %s[#-]",s)
    keypress(0)
end

def tagline()
    var alltags []string
    foreach t in tasks
        foreach tag in t.tag_list
            on not tag in alltags do append_to(ref alltags,tag)
        endfor
    endfor
    clear_line(term_h()-2,1)
    at term_h()-2,1, format("TAG LIST (%d) : %s",alltags.len,alltags.join(" "))
end

def footer(s)
    clear_line(term_h(),1)
    at term_h(),1, s
end

def sz_time(n)
    d,h,m=[0,0,0]
    if n>86400
        d=as_int(n)/86400
        n-=d*86400
    endif
    if n>3600
        h=as_int(n)/3600
        n-=h*3600
    endif
    if n>60
        m=as_int(n)/60
        n-=m*60
    endif
    return "%dd %dh %dm".format(d,h,m)
end

def resize()
    @colSize=as_int(term_w()-4)/headers.len
    @rec.Width=colSize
    @intui.Width=term_w()
    @pager.Width=term_w()-40

    for e=0 to term_h()-1
        clear_line(e,1)
    endfor
    tui_screen(1)

    # column headers
    foreach c in enum_all("status")
        at colStartPos-2,startColX+key_c*rec.Width+(rec.Width/2-headers[c].len/2),"[#bold][#ul]{=headers[c]}[#-]"
    endfor

    # top option line display
    at 1,1, "[#b1][#7] Todo Editor [##][#-]   [#5]e[#-]dit  [#5]v[#-]iew  [#5]d[#-]elete  [#5]u[#-]ndelete  [#5]n[#-]ew  [#5]S[#-]tart time  [#5]E[#-]nd time  [#5]s[#-]ubstate  [#5]T[#-]ime switch  [#5]t[#-]ags  [#5]q[#-]uit   [#i1]shift-left/right to move a task.[#i0]"

    tagline()
    @TW=term_w()
end

# definitions

enum status ( backlog=0, todo, inprogress, onhold, done )
enum hold_types ( OnHold=0, PendingReview, PendingRelease )
enum td ( off=0, elapsed, remaining )

struct task
    name        string
    description string
    assignee    string
    link        string
    status      int
    substatus   int
    start_date  int
    end_date    int
    tag_list    []string
endstruct


# main

# setup save location
saveloc=home()+"/.tui_board"
input saveloc optarg 1

# setup task list
var tasks []any

loaded=false
if is_file(saveloc)
    tasks,loaded=load(saveloc)
    if loaded
        footer("tasks loaded from %s".format(saveloc))
        println
    endif
endif 

if !loaded
    append_to(ref tasks, task(.name "feed cats",        .description "give the cats their food", .assignee "", .link "",
                                .status status.inprogress, .substatus hold_types.OnHold, .start_date 1723761115, .end_date 0, .tag_list [].list_string ))
    append_to(ref tasks, task(.name "fill water bowls", .description "water only, they get too much milk", .assignee "", .link "",
                                .status status.done,       .substatus hold_types.OnHold, .start_date 1723761115, .end_date 0, .tag_list [].list_string ))
    append_to(ref tasks, task(.name "hunt furballs",    .description "they like to leave little presents", .assignee "", .link "",
                                .status status.todo,       .substatus hold_types.OnHold, .start_date 0, .end_date 0, .tag_list [].list_string ))
    append_to(ref tasks, task(.name "fluff cat beds",   .description "they demand comfort", .assignee "", .link "",
                                .status status.todo,       .substatus hold_types.OnHold, .start_date 0, .end_date 0, .tag_list [].list_string ))
    footer("example tasks created")
endif


# create column headers
var headers map
headers[status.backlog]="Backlog"
headers[status.todo]="To Do"
headers[status.inprogress]="In Progress"
headers[status.onhold]="On Hold"
headers[status.done]="Complete"

# create sub status names
var subheaders [enum_names("hold_types").len]string
subheaders[hold_types.OnHold]="On Hold"
subheaders[hold_types.PendingReview]="Pending Review"
subheaders[hold_types.PendingRelease]="Pending Release"


# switch to alt screen
tui_screen(1)
TW=term_w()

# create input element
intui=tui_new() 
instyle=tui_new_style()
intui.Row,intui.Col=[2,1]
intui.Height,intui.Width=[1,TW]

# pager for view mode
pager=tui_new()
pstyle=tui_new_style()
pager.Row,pager.Col=[7,20]
pager.Height,pager.Width=[16,TW-40]
pager.Title="View Mode"

# setup reusable style
s=tui_new_style()
s.fill=true
border=s.border
s.bg,s.fg       =["1","7"]
s.hi_bg,s.hi_fg =["2","7"]
border["bg"]=""
border["fg"]="5"
s.border=border
s.wrap=true

# screen dimensioning
colSize=as_int(term_w()-4)/headers.len
startColX=3

# instantiate record template
tmpl="[#bold][#5]{.name}[#boff][#-]\n[#i1]{.assignee}[#i0]".addansi
rec=tui_new()
rec.Height,rec.Width=[5,colSize]
rec.Border=true

# cursor setup and limit tracking
optcol=0
optrow=0
colStartPos=6
keepFocus=""
maxCol=enum_all("status").len-1
time_disp=0
var coldepths []int

# var maxdepths []int
# maxdepths[status.todo]=0
# maxdepths[status.inprogress]=5
# maxdepths[status.done]=0
# @todo: display these limits as columns breaks, but
#        don't actually limit the card counts yet.

# setup mapping between on screen lists and the task array
var task_index map

# setup deletion undo buffer
undoLen=0
maxUndo=10
var undo []any

resize()

# name mangling
var taskdup task
nbsp = char(26) # ascii-substitute, converted to a nbsp

# key input loop
tagfilter=""
quit=false
while not quit

    on TW!=term_w() do resize()

    cursoroff()
    foreach c in enum_all("status")
        ypos=0
        cleardepth=0
        foreach t in tasks
            task_index["{ypos},{c}"]=key_t

            if t.status==c 

                rec.Row,rec.Col=[colStartPos+(rec.Height+1)*ypos,startColX+key_c*rec.Width]
                rec.tui_clear(s)

                on t.name==keepFocus do optrow,keepFocus=[ypos,""]

                if tagfilter=="" or tagfilter in t.tag_list
                    s.bg="0"
                    if keepFocus=="" and ypos==optrow and c==optcol
                        s.bg="2"
                    endif
                    taskdup=t
                    taskdup.name=replace(taskdup.name," ",nbsp)
                    rec.Content=tmpl
                    rec.Data=taskdup

                    if c in [status.inprogress,status.onhold]
                        case time_disp
                        is td.off
                            dateline=""
                        is td.elapsed
                            dateline="[#invert][#4] e:" + sz_time(epoch_time()-t.start_date) + "[#-]"
                        is td.remaining
                            on t.end_date>0 do dateline="[#invert][#4] r:" + sz_time(t.end_date-epoch_time()) + "[#-]"
                        endcase
                        dl=dateline.stripcc.len
                        at rec.Row+rec.Height,rec.Col+rec.Width-dl-2,dateline
                    endif

                    if t.tag_list.len > 0 
                        invtags=" "
                        foreach tg in t.tag_list
                            invtags+="[#bold]"+tg+"[#boff] "
                        endfor
                        at rec.Row,rec.Col+2,invtags
                    endif
                    rec.tui_template(s)
                    if c==status.onhold
                        # display hold type
                        holdline=fgrgb(180,100,100)+"[#i1] "+ subheaders[t.substatus] +" [#i0][#-]"
                        at rec.Row+rec.Height-1,rec.Col+1,holdline
                    endif
                    ypos++
                endif
                cleardepth++
            endif
        endfor
        coldepths[c]=ypos

        # clear more at the bottom of each column, in case a record was just moved or a filter applied
        for cc=ypos to cleardepth
            rec.Row,rec.Col=[colStartPos+(rec.Height+1)*cc,startColX+key_c*rec.Width]
            rec.tui_clear(s)
        endfor

        if coldepths[c]==0
            # highlight empty row
            at colStartPos+5,startColX+key_c*rec.Width
            emptySelected=""
            on optcol==c do emptySelected="[#invert]"
            print pad("{emptySelected}[#2]<empty>[#-]",0,rec.Width)
        endif
    endfor


    k=keypress(0)

    case k

    has k in [8,asc("h")] # left
        if optcol>0
            optcol--
            optrow=optrow[0:coldepths[optcol]-1]
        endif

    has k in [9,asc("l")] # right
        if optcol<maxCol
            optcol++
            optrow=optrow[0:coldepths[optcol]-1]
        endif

    has k in [10,asc("j")] # down
        on optrow<coldepths[optcol]-1 do optrow++

    has k in [11,asc("k")] # up
        on optrow>0 do optrow--

    has k in [asc("H"), 208] # shift left
        if optcol>0 and coldepths[optcol]>0
            selected=task_index["{optrow},{optcol}"]
            if optcol==status.inprogress
                tasks[selected].start_date=0
            endif
            tasks[selected].status-=1
            rec.Row,rec.Col=[colStartPos+(rec.Height+1)*optrow,startColX+optcol*(rec.Width)]
            footer("Moved [#bold]%s[#boff] from [#i1]%s[#i0] to [#i1]%s[#i0]".
                format(tasks[selected].name,headers[optcol],headers[optcol-1])
            )
            rec.tui_clear(s)
            optcol--
            keepFocus=tasks[selected].name
        endif

    has k in [asc("L"),209] # shift right
        if optcol<maxCol and coldepths[optcol]>0
            selected=task_index["{optrow},{optcol}"]
            if optcol==status.todo and tasks[selected].start_date==0
                tasks[selected].start_date=epoch_time()
            endif
            tasks[selected].status+=1
            rec.Row,rec.Col=[colStartPos+(rec.Height+1)*optrow,startColX+optcol*(rec.Width)]
            footer("Moved [#bold]%s[#boff] from [#i1]%s[#i0] to [#i1]%s[#i0]".
                format(tasks[selected].name,headers[optcol],headers[optcol+1])
            )
            rec.tui_clear(s)
            optcol++
            keepFocus=tasks[selected].name
        endif

    has k in [27,asc("q")]
        quit=true


    is asc("t") # tagging

        selected=task_index["{optrow},{optcol}"]
        tags=tasks[selected].tag_list.join(" ")

        intui.Prompt="New tag list : "
        intui.Content=tags
        tags=intui.tui_input(instyle).Result

        tasks[selected].tag_list=tags.split(" ") ?> `# != ""`
        tagline()
        footer("[#bold]%s[#boff] task tag list updated [#i1](%s)[#i0]".format(tasks[selected].name,tags))


    is asc("T") # time toggle
    
        time_disp=( time_disp + 1 ) % 3


    is asc("f") # filtering (on tags)

        intui.Prompt="New filter : "
        intui.Content=tagfilter
        tagfilter=intui.tui_input(instyle).Result
        tagline()
        footer("tag filter updated [#i1](%s)[#i0]".format(tagfilter))


    is asc("S") # touch start date

        selected=task_index["{optrow},{optcol}"]
        on tasks[selected].start_date!=0 do tasks[selected].start_date=epoch_time() 

    is asc("E") # end date edit

        selected=task_index["{optrow},{optcol}"]
        on tasks[selected].end_date!=0 do tasks[selected].end_date=epoch_time() 

    is asc("n") # new task

        intui.Prompt="New task name : "
        name=intui.tui_input(instyle).Result

        intui.Prompt="New task description (optional) : "
        desc=intui.tui_input(instyle).Result

        intui.Prompt="New task assignee (optional) : "
        assignee=intui.tui_input(instyle).Result

        intui.Prompt="New task link (optional) : "
        link=intui.tui_input(instyle).Result

        intui.Prompt="New task end date (optional) : "
        end_date=intui.tui_input(instyle).Result
        on not is_number(end_date) do end_date="0"

        intui.tui_clear(instyle)

        append_to(ref tasks, task(.name name, .description desc, .assignee assignee, .link link, 
                                .status status.todo, .substatus hold_types.OnHold, .start_date 0, .end_date end_date, .tag_list [].list_string ))
        footer("[#bold]%s[#boff] task added".format(name))


    is asc("d") # delete task under cursor

        if coldepths[optcol]>0
            selected=task_index["{optrow},{optcol}"]
            name=tasks[selected].name

            on undoLen==maxUndo-1 do undo=undo[1:undoLen]
            undo[undoLen]=tasks[selected]
            undoLen++
            tasks=tasks[:selected]+tasks[selected+1:]
            on optrow >= coldepths[optcol]-1 do optrow--
            on optrow < 0 do optrow=0
            coldepths[optcol]-=1
            footer("[#bold]%s[#boff] task deleted".format(name))
        else
            footer("nothing to delete in column [#i1]%s[#i0]".format(headers[optcol]))
        endif

    is asc("e") # edit task under cursor

        if coldepths[optcol]>0
            selected=task_index["{optrow},{optcol}"]

            intui.Prompt="New task name : "
            intui.Content=tasks[selected].name
            name=intui.tui_input(instyle).Result

            intui.Prompt="New task description : "
            intui.Content=tasks[selected].description
            desc=intui.tui_input(instyle).Result

            intui.Prompt="New task assignee : "
            intui.Content=tasks[selected].assignee
            assignee=intui.tui_input(instyle).Result

            intui.Prompt="New task link : "
            intui.Content=tasks[selected].link
            link=intui.tui_input(instyle).Result

            #intui.Prompt="New task start date (optional) : "
            #intui.Content=tasks[selected].start_date.as_string
            #start_date=intui.tui_input(instyle).Result
            at 2,1,"New task start date : "
            start_date=get_date_human(tasks[selected].start_date,2,23)
            on not is_number(start_date) do start_date="0"

            intui.Prompt="New task end date : "
            intui.Content=tasks[selected].end_date.as_string
            end_date=intui.tui_input(instyle).Result
            on not is_number(end_date) do end_date="0"

            intui.tui_clear(instyle)
            tasks[selected].name=name
            tasks[selected].description=desc
            tasks[selected].assignee=assignee
            tasks[selected].link=link
            tasks[selected].start_date=start_date.as_int
            tasks[selected].end_date=end_date.as_int

            footer("[#bold]%s[#boff] task amended".format(name))
        else
            footer("nothing to edit")
        endif


    is asc("v") # view full entry

        if coldepths[optcol]>0

            pstyle.bg,pstyle.fg=["1","7"]
            pstyle.wrap=true
            pstyle.fill=true

            border=pstyle.border
            border["bg"]=pstyle.bg
            border["fg"]=pstyle.fg
            pstyle.border=border

            selected=task_index["{optrow},{optcol}"]
            vt=tasks[selected]
            tags=tasks[selected].tag_list.join(" ")

            hold_status=subheaders[vt.substatus]
            on vt.status!=status.OnHold do hold_status=""

            start_date="" ; end_date=""
            on vt.start_date!=0 do start_date=date_human(vt.start_date)
            on vt.end_date!=0 do end_date=date_human(vt.end_date)

            # content string : cs
            pager.Content=`
                [#6]Task        : %-40s
                [#6]Progress    : %-40s
                [#6]Start Date  : %-40s
                [#6]End Date    : %-40s
                [#3]Assignee    : %-40s
                [#3]Hold Status : %-40s
                [#3]Tags        : %-40s
                [#4]Link        : %-80s

                [#5]Details     : \n
                %s\n
            `.format(vt.name,headers[vt.status],start_date, end_date, vt.assignee,hold_status,tags,vt.link,vt.description)

            pager.tui_box(pstyle)
            pager.tui_pager(pstyle)
            pager.tui_clear

        endif

    is asc("s") # edit sub state

        if coldepths[optcol]>0 and optcol==status.onhold

            selected=task_index["{optrow},{optcol}"]
            intui.Prompt="New sub state : "
            intui.Content=subheaders[tasks[selected].substatus]

            intui.Options=subheaders.dup
            new_state=intui.tui_input(instyle).Result
            intui.Options=[].list_string
            intui.tui_clear(instyle)

            opt=0
            foreach h in subheaders
                if h==new_state
                    opt=key_h
                    break
                endif
            endfor

            tasks[selected].substatus=opt
            footer("[#bold]%s[#boff] task sub status amended to %s".format(tasks[selected].name,new_state))
        else
            footer("nothing to edit")
        endif


    is asc("u") # undo last
        if undoLen>0 
            append_to(ref tasks, undo[undoLen-1])
            undoLen--
            footer("undo applied to task [#bold]%s[#boff]".format(undo[undoLen].name))
        endif

    endcase

endwhile

cleanup()

