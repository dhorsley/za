#!/usr/bin/za

doc Name:       r53q
doc Author:     Daniel Horsley
doc Date:       05-03-2020
doc Version:    4
doc LastChange: 13-03-2020: cosmetic doc change

doc Description:
doc
doc  prerequisites:
doc     aws cli with route53 support
doc
doc EndDescription

doc Syntax:     r53q [ zone_filter [mode] ]

doc zone_filter = (optional) zone_exposure-domain_name
doc mode        = (optional) csv | import | display


#+ functions

define display_csv(zones)

    region=getglob("region")

    # populate zone files in memory
    foreach z in zones
        zid=z["zoneid"]
        # println "Fetching zone file [{key_z},{zid}]"
        zf_text =| aws route53 --region={region} list-resource-record-sets --hosted-zone-id "{zid}" --output=text
        zf[key_z]=zf_text
    endfor

    co=""

    foreach z in zf

        typ="null"

        foreach line in z

            # figure type
            if match(line,"RESOURCERECORDSET")
                fields(line,"\t ")
                if NF==4
                    dom=F2; ttl=F3; typ=F4
                    co=co+"\n"+format(`"%s","%s","%s"`+"\n",dom,ttl,typ)
                else
                    # NF 3 domain record?
                    dom=F2; typ=F3
                    co=co+"\n"+format(`"%s","","%s"`+"\n",dom,typ)
                endif

            endif


            # process subsequent lines of content
            if match(line,"^(ALIASTARGET)[ \t]")
                fields(line,"\t "); tdom=F2; tflag=F3; tzone=F4
                co=co+format(`"","","%s %s %s"`+"\n",tdom,tflag,tzone)
            endif

            if match(line,"^(RESOURCERECORDS)[ \t]")

                value=field(line,2,"\t ")

                if typ=="SOA"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

                if typ=="NS"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

                if typ=="TXT"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

                if typ=="A"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

                if typ=="AAAA"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

                if typ=="CNAME"
                    co=co+format(`"","","%s"`,value)+"\n"
                endif

            endif

        endfor
    endfor 

    println co

enddef


define display_importable(zf)
    nop
enddef


# display
define display(zones)

    region=getglob("region")

    # populate zone files in memory
    foreach z in zones
        zid=z["zoneid"]
        println "Fetching zone file [{key_z},{zid}]"
        zf_text =| aws route53 --region={region} list-resource-record-sets --hosted-zone-id "{zid}" --output=text
        zf[key_z]=zf_text
    endfor

    # display
    foreach z in zf
        rcount=0
        println "\n[#4][#bold]Zone records for {key_z}[#-]"
        foreach line in z

            colour="[#7]"

            # space new records
            if match(line,"RESOURCERECORDSET")
                inc rcount
                println
                colour="[#fblue]"
            endif

            if match(line,"^(RESOURCERECORDS|ALIASTARGET)[ \t]")
                print " -> "
                colour="[#3]"
            endif

            when match(line,"^ALIASTARGET[ \t]")
            is true
                line=replace(line,"^ALIASTARGET[ \t]","AWS ALIAS ")
            or
                line=replace(line,"^.*?[ \t]","")
            endwhen

            println colour,line,"[#-]"

        endfor
        println "\n[#bold]{key_z} record count : {rcount}[#-]\n"
    endfor
    println
enddef


#- end functions


# arguments

input in_filter optarg 1
zone_filter=""
on in_filter!="" do zone_filter=in_filter

input in_mode optarg 2
mode="display"
if match(lower(in_mode),"^(import|csv)$")
    mode=lower(in_mode)
endif


# get zone list

region="eu-west-1"

zl =| aws route53 list-hosted-zones --region={region} --max-items 2000 --output=text

foreach line in zl

    ikey=string(key_line)
    on int(ikey)%2==1 do continue
    ckey=string(key_line+1)
    instance_line   = lines(zl,ikey+":"+ikey)
    config_line     = lines(zl,ckey+":"+ckey)

    # split into array 
    fields(instance_line,"\t")
    entry["uid"]    = F2
    entry["zoneid"] = F3
    entry["domain"] = F4

    fields(config_line,"\t")
    entry["desc"]   = F2
    entry["private"]= eval(lower(F3))

    zn="public-"
    on entry["private"] do zn="private-"
    zn=zn+entry["domain"]

    # apply zone filter
    on zone_filter!="" && zn!=zone_filter do continue

    # append to processing list
    zones[zn]=entry
    unset entry

endfor

on mode=="display"  do display(zones)
on mode=="csv"      do display_csv(zones)
on mode=="import"   do display_importable(zones)


exit 0


