#!/usr/bin/za

llen = 100000
sz=9999

define now()
    return epoch_nano_time()
end

define diff(prev)
    print ": Took ",numcomma(time_diff(epoch_nano_time(),prev),0)," us\n\n"
end

# build list

print "Building list.\n"
t=now()
list=[]
for e=0 to llen-1
    list=append(list,rand(sz))
endfor
diff(t)

t=now(); print "List Length : ",numcomma(len(list),0),"\n"; diff(t)
println "First 100   : ",list[:100]
t=now(); print "[#4]Min         : [#-]",min(list),"\n"; diff(t)
t=now(); print "[#4]Max         : [#-]",max(list),"\n"; diff(t)
t=now(); print "[#4]Sum         : [#-]",sum(list),"\n"; diff(t)
t=now(); print "[#4]Avg         : [#-]",avg(list),"\n"; diff(t)

println "[#4]Op (x/2)    : [#-]"
println `: generated with nl = list -> "#/2"`
t=now()
 nl=list -> "#/2"
diff(t)
println "list len nl -> ",len(nl)
println "First 100   : ",nl[:100]

println "\n[#4]Filter, all >9899 :[#-]"
println `: generated with newlist=(list ?> "#>9899").uniq`
t=now()
 newlist=(list.list_int ?> "#>9899").uniq
diff(t)
println "New list,unique numbers :\n",newlist

print

println "[#2]Commutative Operations[#-]\n"
println "Set Multiplication: newlist * 2.0 : {=newlist*2f}\n"
println "Set Multiplication: 2.0 * newlist : {=2f*newlist}\n"

println "[#2]Non-commutative Operations[#-]\n"
println "Set Division: newlist / 2.0 : {=newlist/2f}\n"
println "Set Division: 2.0 / newlist : {=2f/newlist}\n"

print

