#!/usr/bin/za

doc `

    getopts

        Simple parsing module for cli args.
        will handle short and long arguments.
        --  stops arg processing
        ?   displays help

        in: 
            options requirements map
            reqs_entry format:
            key:name, value []any ( [0]type: (s)string, (b)bool, (n)numeric , [1]nature: novalue/optional/mandatory/quitafter, [2] description )

        out:
            map name->value pairs (option_name,value) [ret#1] and []string [ret#2] (contains remnant args, in acceptance order)

`

enum optNature ( n=1, m=2, o=4, h=8 )
enum optErr ( NoError, General=126, Mandatory=125, Casting=124 )

define opthelp(reqs)
    println "Help:"
    foreach o in reqs
        print ("[#4]"+key_o).inset(4).pad(-1,20)
        case o[0]
        is "s"; print "[#3]STRING".pad(-1,10)
        is "n"; print "[#3]NUMERIC".pad(-1,10)
        is "b"; print "[#3]BOOLEAN".pad(-1,10)
        endcase
        case 
        has (o[1] & optNature.n) == optNature.n ; print "[#7]No value".pad(-1,12)
        has (o[1] & optNature.m) == optNature.m ; print "[#2]Mandatory".pad(-1,12)
        has (o[1] & optNature.o) == optNature.o ; print "[#6]Optional".pad(-1,12)
        endcase
        print "[#-]"
        on o.len>2 do on o[2]!="" do print "[#i1]",o[2],"[#i0]"
        println
    endfor
    exit optErr.NoError
end

define getopt(reqs)

    var opts map
    var undashed_args []string
    var argn,undashed_count int
    var expecting_value,helpSelected bool

    av=argv()
    while !empty(av)

        # fetch next word
        argn++
        arg=head(av)
        av=tail(av)

        # populate value when expected
        if expecting_value
            opts[name]=arg
            expecting_value=false
            continue
        endif

        # handle oddities
        on arg=="--" do break # stop processing args
        if strpos(arg,"?")!=-1
            opthelp(reqs)
            helpSelected=true
        endif
        for p=0 to arg.len-1
            on arg[p]!="-" do break
        endfor

        undashed=false
        case p
        is 1
            name=arg[1:]
            on !key(ref reqs,name) do exit optErr.General,"Invalid argument name '{name}'"
        is 2
            name=arg[2:]
            on !key(ref reqs,name) do exit optErr.General,"Invalid argument name '{name}'"
        or
            undashed_args[undashed_count++]=arg
            undashed=true
        endcase 

        on undashed do continue

        r=reqs[name]
        if (r[1] & optNature.n) !=optNature.n
            expecting_value=true 
        else
            case r[0]
            is "b"
                opts[name]="true"
                on (r[1] & optNature.h) == optNature.h do helpSelected=true
            is "s"
                opts[name]=""
            is "n"
                opts[name]=0
            endcase
        endif

    endwhile

    # loop through checking for arguments
    var missList map
    foreach r in reqs
        typ     = r[0]
        nature  = r[1]
        on (nature & optNature.m) == optNature.m and !key(ref opts,key_r) do missList[key_r]=typ
        if key(ref opts,key_r)
            case typ
            is "n"
                on not is_number(opts[key_r]) do exit optErr.Casting,"Parameter {=key_r} must be a number"
                opts[key_r]=opts[key_r].as_int
            is "b"
                case opts[key_r]
                contains "^(0|1|false|true)$"
                    opts[key_r]=opts[key_r].as_bool
                or
                    exit optErr.Casting,"Parameter {=key_r} must be a boolean equivalent"
                endcase
            endcase
        else
            if (nature & optNature.m) != optNature.m
                case typ
                is "n"
                    opts[key_r]=0
                is "b"
                    opts[key_r]=false
                is "s"
                    opts[key_r]=""
                endcase
            endif
        endif
    endfor

    if not helpSelected and missList.len>0
        foreach r in missList
            println "[#2]Missing mandatory parameter : {=key_r} ({r})[#-]"
        endfor
        exit optErr.Mandatory
    endif

    return opts,undashed_args

end

