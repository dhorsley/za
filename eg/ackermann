#!/usr/bin/za

# this will break on ackermann(4,2) or higher due to stack limits
#  in go when recursing.

define ackermann(m,n)
    on key("memoA",`{m},{n}`) do return memoA[`{m},{n}`]
    on m==0 do return n+1
    on n==0 do return ackermann(m-1,1)
    o=ackermann(m-1,ackermann(m,n-1))
    @ memoA[`{m},{n}`] = o
    return o
end

memoA[`0,0`] = 1
memoA[`0,1`] = 2
memoA[`0,2`] = 3
memoA[`1,0`] = 2
memoA[`1,1`] = 3

input a param 1
input b param 2
a=a.as_int
b=b.as_int

println a
println b

println "A({a},{b}) = ",ackermann(a,b)

