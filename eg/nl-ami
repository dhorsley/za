#!/usr/bin/za

#+ get args
module "modules/getopt" as go
var reqs map
reqs["debug"]   = ["b",go::optNature.n                    , "show debug content"]
reqs["counts"]  = ["b",go::optNature.n                    , "show counts"]
reqs["tags"]    = ["b",go::optNature.n                    , "show tags"]
reqs["taglist"] = ["s",go::optNature.o                    , "set tag filter list (comma-separated)"]
reqs["srcurl"]  = ["s",go::optNature.o                    , "source file location (URL)"]
reqs["help"]    = ["b",go::optNature.n | go::optNature.h  , "help"]
opts,args=go::getopt(reqs)
show_debug=opts["debug"]
show_tags=opts["tags"]
show_counts=opts["counts"]
srcurl=opts["srcurl"]

if opts["help"]
    go::opthelp(reqs)
    exit
endif
#-

#+ split tags
default_tag_list="Name,COSTCODE,cluster,application"
if opts["taglist"]!=""
    show_tags=true
    tag_list=opts["taglist"].split(",")
else
    tag_list=default_tag_list.split(",")
endif

max_tag_key_len=11 # for default tag list
if tag_list.len>0
    foreach t in tag_list
        on t.len>max_tag_key_len do max_tag_key_len=t.len
    endfor
endif
#-


enum i ( account=1, region, asg_group_name, asg_cluster_name, instance_id, internal_ip,
    external_ip, hostname, tc_manager_state, unlimited, ftp_state, app_type,
    asg_launch_config, nagios, asg_url, col_sep_1, tc_run_state, host_arch,
    host_ami, host_type, host_key, host_launch_time, host_name_tag, host_platform,
    host_state, host_health, lb_1_name, lb_2_name, lb_1_status, lb_2_status,
    asg_min, asg_max, asg_desired, lb_1_fault, lb_2_fault, account2,
    region2, ami_name, ami_description, ami_version, ami_type, ami_arch,
    ami_creation_date, ami_public, lb_1_fail_code, lb_2_fail_code, lb_1_fail_desc,
    lb_2_fail_desc,lb_1_type,lb_2_type,tg_1_name,tg_2_name,lb_1_scheme,lb_2_scheme,vpcid,accno
)

doc `
if show_debug
    evals=enum_all(ref i)
    foreach en in enum_names(ref i)
        print "[ ",en,":",evals[key_en]," ] "
    endfor
    print
endif
`

def errexit(n,s)
    exit n,"[#2]{s}[#-]"
end

def debug_line(l)
    println fgrgb(70,100,120),"{{l}}[#-]"
end

def debug_tags(t)
    println fgrgb(140,120,120),"all_tags:",t,"[#-]"
end

def unpack_tags(ts)
    var tl map
    tl_raw=ts.split(",")
    foreach e in tl_raw
        kv=e.split("=")
        on kv.len!=2 do continue
        tl[kv[0]]=kv[1]
    endfor
    return tl
end

# returns ordered list of keys:
def name_sort(l)
    # l->map with keys to sort
    var nl[l.len] any
    next=0
    foreach i in l
        nl[next++]=key_i
    endfor
    return nl.sort
end


# main

#+ read services file
service_url="https://saw.costcutter.com/exports/namelookup/internalservicelist"
service_file="/efs/saw/docroot_static/exports/namelookup/internalservicelist"
host_details=""

if srcurl!=""
    service_url=srcurl
    service_dl=web_get(service_url)
    on service_dl.code==200 do host_details=service_dl.result
endif

if host_details==""
    | sudo chmod 644 {service_file}
    on not is_file(service_file) do errexit(1,"Service file not found")
    host_details=$in service_file
endif
#-

var counts,tot_counts,ilookup map

#+ header output
fmtstr="%-12s %-25s %-16s %-22s %-30s %-20s %-20s"
println fmtstr.ccformat("Account","InstanceID","InternalIP","HostAMI","[#7]Type[#-]","HostType","HostPlatform")
on show_tags do println "%80s [#6]tag-name     : tag-value[#-]\n".format("")
#-

account="-"

foreach l in host_details

    line_split=l.split("#")
    l=line_split[0]
    tags=""
    on line_split.len>1 do tags=line_split[1]

    fields(l," ")
    on show_debug do debug_line(l)
    on F[i.account]!=account do account=F[i.account]
    on NF<i.host_platform do continue

    hosttype=F[i.host_type]
    name=F[i.ami_name]
    desc=F[i.ami_description]

    case # order matters here:
    has F[i.host_name_tag] ~i "sitecore" and desc=="n/a"
        desc="[#4]Custom Windows 2012 R2[#-]"
    has F[i.host_ami] ~i "^ami-natgateway"
        desc="[#4]Nat-gateway[#-]"
    has desc ~i "^Amazon-Linux-2-"
        desc="[#4]AL2[#-]"
    has desc ~i "Amazon-.*2023"
        desc="[#4]AL2023[#-]"
    has desc ~i "^Amazon-Linux-"
        desc="[#4]AL1[#-]"
    has desc ~i "Windows-.*2012"
        desc="[#4]Windows 2012[#-]"
    has desc ~i "^RHEL-7.9"
        desc="[#4]RedHat 7.9[#-]"
    has desc ~i "ubuntu"
        desc="[#4]Ubuntu[#-]"

    has name ~i "amazon-eks-node"
        desc="[#4]EKS-Node[#-]"
    has name ~i "^n/a"
        desc="[#1]N/A[#-]"
    or
        # debug_line(l)
        desc=name
    endcase

    # reformat
    on F[i.host_platform]=="null" do F[i.host_platform]=""

    # counts
    tot_counts[stripcc(desc)]+=1
    counts["{account}-{=stripcc(desc)}"]+=1
    
    # display
    println fmtstr.ccformat(account,F[i.instance_id],F[i.internal_ip],F[i.host_ami],desc,F[i.host_type],F[i.host_platform])

    # relevant tags display:
    if show_tags or show_debug
        t=unpack_tags(tags)
        on show_debug do debug_tags(t)
        foreach tag in tag_list
            on t[tag]!=nil do println "%80s [#6]%-{max_tag_key_len}s : %-40v[#-]".format("",tag,t[tag])
        endfor
        println
    endif

endfor

if show_counts
    println "\n[#5]Amalgamated Summary[#-]"

    nl=name_sort(counts)
    foreach i in nl
        println "%40s = %d".format(i,counts[i])
    endfor

    println "\n[#5]Type Totals[#-]"
    tl=name_sort(tot_counts)
    foreach v in tl
        println "%40s = %d".format(v,tot_counts[v])
    endfor
endif

