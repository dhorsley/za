#!/usr/bin/za

# same as struct example, except using an assoc. array. similar speed to fixed length arrays.

# logging on "./debug_log"
# logging quiet

seed(epoch_nano_time())

struct person
    name    string
    age     int
    dob     string
    def get()
        return self.name
    end
endstruct

forenames= ["Ada","Bob","Craig","David","Ergan","Frederick","George","Harry","Iris","Janis","Keith","Larry","Moon","Naomi","Orpheus","Pamela",
            "Quirkafleeg","Roger","Samuel","Tarjan","Una","Veronica","William","Xavier","Yvonne","Zod"
]

surnames = ["Johnson","Smith","Cole","Plant","Ferry","Oakey","Gore","Cohen","Copeland","Charles","Dylan","Mercury","Bowie","Jett",
            "Petty","Strummer","Weller","Homme","Sandoval","Zevon","Costello"
]

for e=1 to 1000
    for p=1 to 100
        people[p]=person(
            .name forenames[rand(forenames.len)-1]+" "+surnames[rand(surnames.len)-1],
            .age  rand(49),
            .dob  date(rand(1546300800)) # 1970 to 2019
        )
        println format("%4v,%3v : %32s : %2d",e,p,people[p].name,people[p].age)
    endfor
    print
endfor


println "1000 iterations of 100 struct init and populations."

