#!/usr/bin/za

doc `
    ./pack_and_send <srcfile> <dest_host_string> <dest_directory_name>

    package srcfile and the za interpreter, send the resultant file to a remote
    host via ssh, unpack on receipt and execute.

    this program assumes that you have a copy of the za interpreter to copy
    somewhere on your PATH.

    @note: dest_host_string format is user@fqdn
    @note: dest_directory_name is a temporary area on the remote server
         :  for unpacking the files in.

    @todo: make module handling more robust (e.g. dotted paths)
    @todo: add an optional config notation/file for including additional 
            local or remote files in the final artifact.
`


## inputs and globals ############################################

input srcfile  param 1 is "Source filename"
input sshconn  param 2 is "SSH connection string"
input destpath param 3 is "Remote directory name"

on destpath in ["","/","~"] do exit e.INPUT,"Invalid destination path provided: [{destpath}]"

cmdargs=[]
on argc()>3 do cmdargs=argv()[3:]
# println "Command args : {cmdargs}"

enum e ( LOCAL_FILE=127, SEND=126, UNPACK=125, INPUT=124 )


## functions #####################################################

def ssh(cmd,conn,silent)

    on silent==nil do silent=false

    coproc(false)
    on not silent do capture_shell(false)

    { ssh -o StrictHostKeyChecking=no {conn} {cmd} }
    on last_out() is string and last_out().len>0 do println last_out()
   
    coproc(true); capture_shell(true)
    return last()
end

def cleanup()
    delete(tf)
end


def gen_module_list(sf,depth)
    base=($pb $pp sf)
    foreach line in $in sf
        toks=tokens(line)
        if len(toks.types)>1
            if toks.types[0]=="MODULE" and toks.types[1]=="S_LITERAL"
                m=toks.tokens[1].stripquotes
                if not m in modlist
                    @baselist=append(baselist,base)
                    @modlist=append(modlist,m)
                    println " :[%2d]: base %s mod %s".format(depth,base,m)
                    gen_module_list(m,depth+1)
                endif
            endif
        endif
    endfor
end


## main ##########################################################

# process modules in source

println "Modules to add:"
baselist=[]
modlist=[]
gen_module_list(srcfile,0)


# pack

srcfile.is_file.f2n?"notfound"

zaloc=${which za}
tf=${mktemp}

res=|tar -cvf {tf} -C {=$pp srcfile} {=$pb srcfile} -C {=$pp zaloc} {=$pb zaloc}
res.okay.f2n?"packing"


# append modules

parent=$pb cwd()

println "[#4]Processing module list.[#-]"
foreach m in modlist
    base=baselist[key_m]
    println " : [#5]Module : {m} with base : {base}[#-]"

    dotmatches=m ~f "^(\.|\.\.)/"
    (dotmatches.len==0).f2n?"dotpathmod"

    rebase=""
    checkname=m
    if base != parent
        rebase="-C "+base
        checkname=base+"/"+m
    endif
    is_file(checkname).f2n?"modules"
    res=|tar -rvf {tf} {rebase} {m}
    on res.err!="" do println "[#2]&e ",res.err,"[#-]"
    res.okay.f2n?"packing"
endfor
| gzip {tf} && mv {tf}.gz {tf}

println "[#4]Local package created.[#-]"
println "[#6]"
| tar -tvzf {tf}
println "[#-]"

# check connection
ret=ssh(.cmd "true",.conn sshconn,.silent true)
if ret!=0
    cleanup()
    exit e.SEND,"Connection check failed to {sshconn}. Code: {ret}"
endif


# send
ret=ssh("mkdir -p {destpath}",sshconn)
if ret!=0
    cleanup()
    exit e.SEND, "Could not make the destination directory {sshconn}:{destpath}"
else
    println "[#3]Remote directory exists: [{destpath}][#-]"
    scp=|scp {tf} {sshconn}:{destpath}/
    if not scp.okay
        cleanup()
        exit e.SEND, "Could not transfer the packaged file: {tf} to {sshconn}:{destpath}/"
    endif
    println "[#4]Artifact transferred.[#-]"
endif

cleanup()


# expand
retcode=0
bn=$pb tf
ret=ssh(.cmd "cd {destpath} && tar -xzvf {bn}",.conn sshconn,.silent true)
println "SSH CODE (EXPANSION):",ret

if ret!=0
    retcode=e.UNPACK
    println "Could not expand the artifact in {sshconn}:{destpath}/{bn}"
endif


# execute
ret=ssh("cd {destpath} && ./za {=$pb srcfile} {=cmdargs.join(` `)}",sshconn)
println "SSH CODE (EXECUTION):",ret
if ret!=0
    println "Could not execute the expanded artifact in {sshconn}:{destpath}/"
    retcode=ret
endif

ret=ssh(.cmd "rm -fr {destpath}",.conn sshconn,.silent true)
println "SSH CODE (REMOVAL):",ret
if ret!=0
    on retcode==0 do retcode=e.UNPACK
    println "Could not remove the expanded artifact directory {sshconn}:{destpath}"
endif


# complete
exit retcode

fix notfound
    exit e.LOCAL_FILE, "Could not locate file: {srcfile}"

fix packing
    cleanup()
    exit e.LOCAL_FILE, "Could not package in temp file: {tf}"

fix modules
    cleanup()
    exit e.LOCAL_FILE, "Could not package module file: {m}"

fix dotpathmod
    cleanup()
    exit e.LOCAL_FILE, "Module paths cannot start with dots: {m}"


