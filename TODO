

NEXT
----

next release will have only:

    * bug fixes
    * new tests
    * documentation updates

    no new features! (unless absolutely, strictly necessary - or i change my mind)


    za-ref.html:
        * add calls:
            * stripansi,addansi

    update install() and uninstall() for rpm, apk, sh in other OS
        * add uninstall to za.vim and za-ref

    add is_installed(pkg) call.

    investigate /tmp/copper*err and /tmp/za_with* file remnants



LATER
-----

* add a nesting check in endif. currently ENDIF is completely ignored syntactically. it is only used during lookaheads.

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.

* we could use some way of dealing with large files, for convenience. it isn't the goal of the language to handle this, 
    but it seems like an easy win. we can either add access to mmap methods of go libraries and/or some sequential and 
    random access file operations. (fopen, fclose, fseek, fread, fscanf, fwritef, etc) 

    * might also be useful to have this integrate with FOREACH somehow.

* CHECK IF NEEDED - console_windows.go/Copper-NextCopper needs update to be like linux version and accumulate bytes then form string after
    end marker x1e detected. without this, the windows version will break up utf-8 char formation in the string.

    * currently, windows uses the GetCommand() call to execute and populate output from commands as they always execute
        in "cmd" call from the parent process. The output is already a byte stream, so Copper+NextCopper can probably be removed
        entirely eventually. However, this may change later, so should probably keep the method in sync with the linux one
        in case it will be needed.


UNDECIDED
---------

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!

* function piping.. any need for this? to consider, as most cases will be covered with shell integration.
    * off hand, it seems like it is just syntactic sugar rewriting a | b to b(a). not sure how useful it really would be.



