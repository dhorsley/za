


1.1.0   will be the release version

    * more library tests

1.0.9   bug fixes and documentation updates

    * more library tests

1.0.7   more example code
         there are also probably some internal functions we can expose as library calls.
         for example, the za colour code stripper and similar. 

        examples can go in two places.

            1) larger examples live in eg/ path
            2) small examples of stdlib use should be placed in:
                tools/funpages/examples/<call_name>

        When tools/libdoc is executed, it incorporates everthing from 2) in the generated files.
    
    * more library tests

    * libdoc
        * update bad descriptions
        * add more info per func

    * documentation updates
        * Documentation needs an update to mention the use of 0x1e command output separation.


1.0.6   clean up of source layout and use of modules.

        this will exclude changing the goval code, it's far too entwined now.
        however, we could probably update the remaining used modules more regularly. i'm
        still somewhat reluctant to do this though, as i don't like having releases break
        of their own accord - that's my job! 

        at this point, may be worth making repo public. or could do so closer to release. no
         preference really yet.        


---------------------------------------------------------------------------------------------

NEXT : 1.0.6
------------

    * small library functions
        * todo: int=next_match(s,regex,start_line) # to return matching line number (0 based)
        * update uninstall() for rpm, apk, sh in other OS (4)

    * check current situation with module support in Go. 
        * maybe update, depending how it smells.


LATER
-----

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.

* we could use some way of dealing with large files, for convenience. it isn't the goal of the language to handle this, 
    but it seems like an easy win. we can either add access to mmap methods of go libraries and/or some sequential and 
    random access file operations. (fopen, fclose, fseek, fread, fscanf, fwritef, etc) 

    * might also be useful to have this integrate with FOREACH somehow.


UNDECIDED
---------

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!


