


1.1.0   will be the release version

    * more library tests


1.0.9   bug fixes and documentation updates

    * more library tests


1.0.8   testing more alternative shells as a coprocess.
         done: bash, zsh (partial), ash (partial), sh (partial)
         todo: zsh (complete) , sh (complete), ash (complete), dash, others? (WSL, mingw, powershell, cmd)

        some of those listed will only be used for command execution and not as a coprocess. However, we may
         still be able to retrieve info from them at startup.

        not expecting any problems in behaviour, but should try to populate some other za system
         variables from those shells and look for peculiarities.


1.0.7   more example code
         there are also probably some internal functions we can expose as library calls.
         for example, the za colour code stripper and similar. 

        examples can go in two places.

            1) larger examples live in eg/ path
            2) small examples of stdlib use should be placed in:
                tools/funpages/examples/<call_name>

        When tools/libdoc is executed, it incorporates everthing from 2) in the generated files.
    
    * more library tests

    * libdoc
        * update bad descriptions
        * add more info per func

    * documentation updates
        * Documentation needs an update to mention the use of 0x1e command output separation.


---------------------------------------------------------------------------------------------

NEXT : 1.0.6
------------

    * small library functions
        * update uninstall() for rpm, apk in other OS (4)
            * checked opensuse:
                * uninstall() is fine.
                * other stuff: most everything okay now, except a fault in test/package
                               with renaming the temporary downloaded file in install().
                               doesn't affect normal zypper repo use.
                               interactive mode is not playing too nicely either, but does work.
                               not sure if it is opensuse, kernel or other libs at play with this.
                               not a priority - will check later.
            * check alpine
                * uninstall() okay.
                * other stuff:
                   as with opensuse, some tests fail due to them being written for ubuntu.
                    not a high priority to fix, so long as they are only failing due to my lazyness 
                    and not because the things they are testing are broken.
            * check centos/aws/redhat
                * not checked yet but will release this version as is. will patch up in 1.0.7 if any
                    thing is amiss for centos. not checking it for a few days. however, centos is
                    generally fairly compatible and well understood by Za, so any faults are likely
                    to be due to updates within the centos/redhat/aws repositories.


LATER
-----

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.

* we could use some way of dealing with large files, for convenience. it isn't the goal of the language to handle this, 
    but it seems like an easy win. we can either add access to mmap methods of go libraries and/or some sequential and 
    random access file operations. (fopen, fclose, fseek, fread, fscanf, fwritef, etc) 

    * might also be useful to have this integrate with FOREACH somehow.


UNDECIDED
---------

* WHEN...ENDWHEN
    * multiple options in IS?
    * fall-through? veering towards "no" for this.

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!


