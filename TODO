

1.0.12  bug fixes , library return value review, 

    * no new functionality!!!
    * more example code in library docs (pulldoc gen)
    * remove deprecated features and options (startup options, dead code, unused funcs)

1.0.11  fixes and evaluator updates

        TODO
        ----



        Examine possibility for Icon-like generators

          Now that we have multiple return values and they are returned as an array to be
          processed we could possibly do something similar to the Icon language here. Possibly
          not too - need to have a look. may need something 'yield'-like to permit it.


        PARTIAL COMPLETION
        ------------------

        Pointer Operations
        -------------------------------------------------------------------------------------------

        DONE:
        add unary op: ^a
            this will effectively be our pointer type
            when encountered on r.h.s it will eval to a string "fs.varname" of var a
            when assigned it will be stored as the IValue of p in p=^a ("fsid.a")
            when evaluated p will return its own IValue

        DONE:
        add unary op: *p
            when evaluated *p will return the content of a by dereferencing the IValue.
            on the l.h.s *p will assign to the referenced var a.

        DONE:
        add l.h.s. deref of *p for assigning indirectly... in doAssign()

        DONE:
        add pointer as a valid field type in structures
            see eg/pointers
            not much to this.. just added ^ as a field type (underlying type is []string)

        NOT DOING:
            any kind of pointer arithmetic or memory allocation pool.

        -------------------------------------------------------------------------------------------
        to make any use of this you'll probably end up having to create state in the global space.
        because we don't spawn objects that live beyond the scope of their local function, pointers
        will likely only be any use when reading state from a parent scope. you could conceivably
        have a function holding space that async threads could access, but the use cases are few
        and far between in any case.
        -------------------------------------------------------------------------------------------
        to make this more like you might expect would involve creating a memory allocator which 
        works outside of normal variable allocation, and this just is not going to occur. it would
        make pointers useful, but they are already at the very edge of what needs to be supported
        in this language. arguably, they are already outside of the remit. the operators are only
        in place because they were easy to reserve and they can have their functionality changed 
        later. i just do not anticipate ever doing this.
        -------------------------------------------------------------------------------------------
        probably won't even be documenting this functionality for now.
        -------------------------------------------------------------------------------------------


1.0.10  new evaluator + VAR enforcement

1.0.9   BSD port, STRUCT support, lower-level filing operations.
        bug fixes and documentation updates


---------------------------------------------------------------------------------------------

LATER
-----

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.


UNDECIDED
---------

* WHEN...ENDWHEN
    * multiple options in IS?
    * fall-through? veering towards "no" for this.

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!


