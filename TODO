


1.1.0   will be the release version

1.0.9   bug fixes and documentation updates

1.0.7   more example code
         there are also probably some internal functions we can expose as library calls.
         for example, the za colour code stripper and similar. 

1.0.6   clean up of source layout and use of modules.

        this will exclude changing the goval code, it's far too entwined now.
        however, we could probably update the remaining used modules more regularly. i'm
        still somewhat reluctant to do this though, as i don't like having releases break
        of their own accord - that's my job! 

        at this point, may be worth making repo public. or could do so closer to release. no
         preference really yet.        


---------------------------------------------------------------------------------------------

NEXT
----

    * libdoc
        * remove dead funcs
        * update bad descriptions
        * add more info per func

    We will also potentially be adding a few more small helper routines in the library as 
     requirements come out of writing test code in Za for the library.

    We also need to clean up console_linux/windows and maybe create a console_all.go for 
     common functionality between the two. (5)

    Documentation needs an update to mention the use of 0x1e command output separation.


next release will have only:

    * bug fixes
    * new tests
    * documentation updates
    * small library functions

    update uninstall() for rpm, apk, sh in other OS (4)


LATER
-----

* add a nesting check in endif. currently ENDIF is completely ignored syntactically. it is only used during lookaheads.

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.

* we could use some way of dealing with large files, for convenience. it isn't the goal of the language to handle this, 
    but it seems like an easy win. we can either add access to mmap methods of go libraries and/or some sequential and 
    random access file operations. (fopen, fclose, fseek, fread, fscanf, fwritef, etc) 

    * might also be useful to have this integrate with FOREACH somehow.

* CHECK IF NEEDED - console_windows.go/Copper-NextCopper needs update to be like linux version and accumulate bytes then form string after
    end marker x1e detected. without this, the windows version will break up utf-8 char formation in the string.

    * currently, windows uses the GetCommand() call to execute and populate output from commands as they always execute
        in "cmd" call from the parent process. The output is already a byte stream, so Copper+NextCopper can probably be removed
        entirely eventually. However, this may change later, so should probably keep the method in sync with the linux one
        in case it will be needed.


UNDECIDED
---------

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!

* function piping.. any need for this? to consider, as most cases will be covered with shell integration.
    * off hand, it seems like it is just syntactic sugar rewriting a | b to b(a). not sure how useful it really would be.



