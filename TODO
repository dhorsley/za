

BUGS
----

lots, i'm sure.


TODO
----

    * fix windows flock() call appropriately.

    * see github.com/dhorsley/za/issues for TODO work which is under real consideration.

    * anything else below is more, um, aspirational or undecided.
    

LATER / UNDECIDED
-----------------

    ( in progress. kinda done - experimental )
    * add module::enum_name(.item_name) support to enums for imported modules.
        - currently, there is potential for clashing on module import for these things:
            - enum names
            - struct names
            - function names
            - variable names (that have been setglob'ed)
        - local variables are discarded anyway post-import.
        - function names can be preceeded by the module_name. or module_alias. to avoid conflict.
        - however, enums do not have this facility, as it would mean supporting multiple dots when
            referencing the item_names.

        - current thinking is:

            - DONE: add a :: token type (in lex.go+constants.go)
            - DONE: add a SYM_DoubleColon rule in eval.go/dparse() that temporarily changes
                the operational namespace over the next couple of tokens.
            - DONE: in actor.go change C_Enum and C_Struct handling to prepend the current module
                name and a double colon to the under-construction enum/struct.
            - DONE: make the default operational namespace string 'main' at startup
            - DONE: added basemodmap array for tracking current mod name from source_base in Call()
                - this is for setting the current namespace when a func is called.
            - DONE: globally defined enum/struct are internally named as main::enumname or main::structname

            - FOR ENUM: during evaluation ( eval.go/dparse() ) if SYM_DoubleColon not encountered, then
                 use whatever the current operational namespace is as the prepend
                - unqualified enum names (missing double colon) will default to current_namespace::enum_name
                - the global level namespace is named 'main'
                - this is flakey at the moment, as we are re-using the 'currentModule' global.
                  - we need an alternative to this.
                    - it should probably be passed into Eval() as an arg
                  - obviously, this is not suitable because of async stuff.
            - FOR STRUCT: similar procedure carried out as above for enums.

        - the above is entirely theoretical at this point, i'm sure it would need more
            than this to fully support namespacing.

        - had a quick look at this and made some experimental changes for enums
            - it does need a lot more doing, around funcmap identification. won't be going near this for functions.
            - testing changes currently for handling enums
            - will take a look at structs also if enum changes pan out

            normal usage of Za shouldn't need this level of complexity, would just round things out a bit. 


    * add some kind of try-like operator
        - would just be to cut down some of the necessary error handling, in a limited number 
          of circumstances. no driving requirement for this, would just be nice to have.
        - would either have to be a prefix, like ?, ??, try or something else,
          or... a suffix which i don't have a lot of spare.
        - or... a builtin lib func?
        - will consider this more if it becomes an issue.

    * add a test mode that *does not* test imported modules.
        - i.e. only test the main file and assume the modules are already tested.
        - currently, everything gets tested all the time.

    * change parser.prev and parser.preprev to pointers?
        - maybe won't make much difference, but should check.

    * user and group builtins for linux?
        - i don't think this is necessary, especially as it would be so different between OS.
        - however, it makes scripting the stuff easier for a user by far if we support with builtins.
        - not doing this one yet, but still a possibility.


    * short-circuit evaluation of booleans
        - there is a case to be made, and it has been done previously by many others, that you should
            not permit short-circuiting when there is a possibility of side-effects in the elided 
            expressions. 
        - because of this, our current stance is that we do not perform short-circuiting.
        - however, it is also true that the evaluation strategy we use does not allow for it anyway :)
        - this may change in the future, it's open to debate. it would mean changing some
            fundamentals in the behaviour of our evaluator, which may cause slower evaluation as
            more state will need passing around.

      Status: t.b.d.


    * better namespacing?
        - ... and explicit embedding of structs as struct fields without using the 'any' type.
        - could also properly handle sane prefixing of stdlib funcs too.
      
      Status: unlikely to proceed. this is quite out of scope for the requirements. however, it may
                not be difficult to add. would probably need to add another identifier sub-type for
                namespace tokens. (as was done for constants).


    * handle multi-dimensional arrays better (as lvalues)

      Status: need to rework doAssign function to reduce its bulk first and handle lvalues better, 
                or push all of the work back into the evaluator for lvalues. that would probably be
                for the best, but i just can't bring myself to rework it for the limited benefits.
                this one is a maybe.


    * add big.Rat?

      Status: very little work actually needed to do this, it's just more of the same as was done
                for big floats and ints. however, it is even more special casing without a driving
                requirement. if i decide against proper types (see above) then maybe will add this
                as already done for other bigs. not high on the priority list though.


    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

      Status: no plans to implement.


