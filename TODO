

BUGS
----

lots, i'm sure.


TODO
----

    * respect ctrl-z in REPL/elsewhere

    * IN PROGRESS: extra sort functions:
        array of struct : forward and reverse, by named struct field. type based.
        - added ssort to lib-list
            - ary=ssort(ary,"field_name",ascending_bool)
            - returns array of []any, sorted on named field in given direction.
            - TODO: expand to multi key sort
            - NOTE: modified version of this code:
                - https://raw.githubusercontent.com/raunakjodhawat/multisort/master/multisort.go
                - experimental!
                - probably many issues with it currently.
            - TODO: when out of experimental phase, add credits in docs/CREDITS file. (MIT License):
                - https://github.com/raunakjodhawat/multisort/blob/master/LICENSE


    * fix windows flock() call appropriately.

    * add install note for windows w/wsl stating that sudoers file may need updating with : Defaults env_keep=WSL_DISTRO_NAME
        and possibly other env vars, depending on user requirements.

    * DONE: fix array element math ops with compound assignments
        - TODO: also, fix syntax error warnings for comma list assignments
            in compound assignment l.h.s.
        - alternatively, remove compound assignments entirely...
            - they are very slow as they make() a new slice on each
                assignment to copy the new expression to.
            - compound assignments don't really add anything good
                to this language, they were added for completeness.

    * catch stack overflows and output better error (when recursing). for example, in eg/ackermann 4 2


LATER / UNDECIDED
-----------------


    * add a test mode that *does not* test imported modules.
        - i.e. only test the main file and assume the modules are already tested.
        - currently, everything gets tested all the time.
        - may also be worth establishing a cache of tested modules/checksums to save re-testing


    * user and group builtins for linux?
        - i don't think this is necessary, especially as it would be so different between OS.
        - however, it makes scripting the stuff easier for a user by far if we support with builtins.
        - not doing this one yet, but still a possibility.


    * handle multi-dimensional arrays better (as lvalues)

      Status: need to rework doAssign function to reduce its bulk first and handle lvalues better, 
                or push all of the work back into the evaluator for lvalues. that would probably be
                for the best, but i just can't bring myself to rework it for the limited benefits.
                this one is a maybe.


    * add big.Rat?

      Status: very little work actually needed to do this, it's just more of the same as was done
                for big floats and ints. however, it is even more special casing without a driving
                requirement. if i decide against proper types (see above) then maybe will add this
                as already done for other bigs. not high on the priority list though.


    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

      Status: no plans to implement.


