

BUGS
----

lots, i'm sure.

    * issues with globals in expressions when setting start/end/step of normal for loops
        - not convinced i will be fixing this. there are probably similar issues in a few places,
            and although they can all be fixed, i still want use of globals to be more explicit.
        - globals can currently be used freely in assignments (rhs) and on the lhs with the @(setglob) keyword.
        - i'll make up my mind on this when i get around to adding better pass-by-reference support.
        - for now, you should pre-compute start/end/step counts in FOR when using globals.


TODO
----

    * USE statement
        USE -           # empties the use_chain internal array
        USE + name      # adds name to the use_chain namespace list (if unique)
        USE - name      # removes name from use_chain namespace list
        USE ^ name      # places namespace name at the top of the use_chain namespace list (pushes rest down)
                        # new name: inserts, existing name: moves

        USE PUSH        # push current chain on chain stack
        USE POP         # pop chain from top of chain stack
                        # push and pop would be used to completely isolate namespacing in a module.

            - var uchain = make([]string,0,1)
            - var ustack = make([][]string,0,8)
            - new funcs: uc_add(), uc_remove(), uc_top(), uc_reset(), ucs_push(), ucs_pop(),
                         uc_match_func(func_name), uc_match_enum(enum_name), uc_match_struct(struct_name)

                - the match functions will return either a "ns::name" string on match, or an empty string ""
                    - if empty, then current namespace or main:: used

        - The current namespace is always either main:: or the module name/alias.

        - If you want to use a different namespace then you need to create a new file and import it with MODULE.

        - The use_chain array will be consulted, when not empty, on function calls, enum references and struct references for
            matches ahead of the default behaviour, if no explicit name is supplied

                1. explicit namespace (name::)
                2. use_chain match
                2. current namespace (no :: ref), then
                3. main:: (global namespace)

        - example:

            # global ns / main program
            MODULE "modpath/time" AS tm

            tm::string_date()       # call function string_date in module time with explicit alias 'tm'
            string_date()           # tries to call (non-existant) function string_date in main:: namespace (current namespace)
                                    # which should error as undefined.

            USE +tm

            string_date()           # check if string_date() exists in tm namespace and call it if found.

                                    # if not found (even though this one would be) then try to call it in current namespace (main::)
                                    #  which should error as undefined.

                                    # whenever there are conflicting names then the first match takes precedence.
                                    #  i.e.
                                    # explicit name > use_chain > current namespace > main


    * Changes for eg/tui_board:

        * DONE: fix utc difference when touching stamps
            - amended get_date_human() in tui_board example to read tz offset and sign before parsing.
        * DONE: add a version string at head of save file
            - use this to control which fields are ingested on load, defaulting others not present.
        * DONE: end date/time field
            - DONE: editing end_date
            - DONE: touching end_date
        * DONE: elapsed/remaining time display
            - DONE: toggle menu option for off/elapsed/remaining
            - DONE: this is to replace the start time on the overview screen
        * TODO: changes to colour schemes in lapsed/near lapsed tasks.
        * TODO: alerts: display and/or notifications on near limit tasks
            - type: on screen, emails, nagios/checkmk output format, other?
            - default remaining warning will be less than 1 day.
        * TODO: startup arg just to poll for near limit tasks and notify
                 so that the app can be scheduled non-interactively.
        * TODO: fix: cursoroff() in lib-tui.go getInput() ddmode.

        * DONE: Assignee field
        * DONE: (Ticket) link field?
        * DONE: View action (for all fields)
            - DONE: maybe move description field into the view action, and only show tags and name for task in overview screen.
            - DONE: maybe put Assignee field on to overview screen instead of description field?

        * Where does "pending review"/"pending release"/"released" fit in?
            - DONE: will add "On Hold/Pending Review/Pending Release" as sub status for the On Hold column
            - DONE: show sub-status on overview screen.

    * DONE: add drop down mode for getInput()
        - change inbound params: add ddopts []string
        - when not empty place getInput() in ddmode=true
        - when ddmode==true, and down arrow pressed, override history mode (if enabled)
            - display dd opts
            - create highlight cursor at first opt
            - start a new key loop:
                - if input is not in (cursor down/up, enter, space, esc) then break
                - move cursor, accept option or break, depending on input
            - if escaped/broken then carry on as normal
            - if accepted, then insert selection to input string and move cpos cursor to end of
                the selection in the amended input string
        - possibly add alternative sources of ddopts array later

    * do something about interactive mode interfering with other tools such as vi, more, batcat...
        - currently, if you wish to launch, for example, vi and have it behave correctly,
          you have to turn off za shell command output capture, send commands to the parent process
          and execute commands with an explicit pipe (|) statement, i.e.
            capture_shell(false); coproc(false); | vi something
        - we should:
            1. DONE: ensure fallback behaves in the same way as the pipe statement
            2. TODO: provide a function and startup arg for dis-/enabling the capture and child
                process at the same time.
            3. NOTE: disabling coproc also stops multi-instruction/piped commands from working
                - due to calls going through the parent pid instead.
        - that wouldn't be perfect, as a few env variables would then go astray and there would
            no longer be any session state retained between shell calls.
        - would rather have a better solution than above, but not thought of one yet.
        - ideally, we would redirect stdin, stdout and stderr from the child shell whenever we
            launch it (or relaunch it).
        - this is probably not an easy fix, as it would mess with cursor tracking and some 
            other things (such as cwd tracking and error code capture, which happen as a part
            of the child shell ipc currently.)

    * respect ctrl-z in REPL/elsewhere

    * IN PROGRESS: extra sort functions:
        array of struct : forward and reverse, by named struct field. type based.
        - added ssort to lib-list
            - ary=ssort(ary,"field_name",ascending_bool)
            - returns array of []any, sorted on named field in given direction.
            - TODO: expand to multi key sort
            - NOTE: modified version of this code:
                - https://raw.githubusercontent.com/raunakjodhawat/multisort/master/multisort.go
                - experimental!
                - probably many issues with it currently.
            - TODO: when out of experimental phase, add credits in docs/CREDITS file. (MIT License):
                - https://github.com/raunakjodhawat/multisort/blob/master/LICENSE
            - NOTE: the above is probably going to be pulled out. algorithm seems wrong for 
                dealing with multiple sort fields.
                this may have to wait until i have a better way of passing something lambda like
                as arguments to user/system libraries.

    * fix windows flock() call appropriately.

    * add install note for windows w/wsl stating that sudoers file may need updating with : Defaults env_keep=WSL_DISTRO_NAME
        and possibly other env vars, depending on user requirements.

    * catch stack overflows and output better error (when recursing). for example, in eg/ackermann 4 2


LATER / UNDECIDED
-----------------


    * add a test mode that *does not* test imported modules.
        - i.e. only test the main file and assume the modules are already tested.
        - currently, everything gets tested all the time.
        - may also be worth establishing a cache of tested modules/checksums to save re-testing


    * user and group builtins for linux?
        - i don't think this is necessary, especially as it would be so different between OS.
        - however, it makes scripting the stuff easier for a user by far if we support with builtins.
        - not doing this one yet, but still a possibility.


    * handle multi-dimensional arrays better (as lvalues)

      Status: need to rework doAssign function to reduce its bulk first and handle lvalues better, 
                or push all of the work back into the evaluator for lvalues. that would probably be
                for the best, but i just can't bring myself to rework it for the limited benefits.
                this one is a maybe.


    * add big.Rat?

      Status: very little work actually needed to do this, it's just more of the same as was done
                for big floats and ints. however, it is even more special casing without a driving
                requirement. if i decide against proper types (see above) then maybe will add this
                as already done for other bigs. not high on the priority list though.


    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

      Status: no plans to implement.


