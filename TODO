

BUGS
----

lots, i'm sure.


TODO
----

    * tested compilation with go 1.18
        - execution speed up of up to 10%, dependant on operation type.
            - most things remained at the same speed.
        - no issues with build compilation on linux (libc+alpine).
            - not tested freebsd or windows yet.
        - not done any debug, profiling or other internal work yet.
        - need to identify a suitable component for generics testing.
            - this is mainly to figure the eventual adoption scope.
            - if it doesn't really help to slim down the masses of switch statements,
                then it might a be non-starter anyway!
                - there's probably a few prime candidates in lib-list.go
        - should check for potential use case of Cut vs Index(Byte|Rune|etc) and similar.
        - convert interface{} to any, where possible?
            - DONE - changed references (where possible) of 'interface{}' to 'any'
            - DONE - needed to update required go version in the Go modules file.


    * add a hex_string=s3sum(filename_string[,blocksize_int]) call?
        - need to convert s3checksum C source to Go.
        - would be used to compare against an S3 header ETAG field to verify 
            either single or multi-part downloads
        - may need to do something to auto-detect block size based on size of first
            block when multi-part formulated and block size not provided as param?
        - would assume a default blocksize of 8192*1024 if not provided, but needed.
            

LATER / UNDECIDED
-----------------

    * an actual type system:
        - something minimal, that doesn't get in the way of the interpreter
        - aligns with generics
        - retains what little speed we have
        - simplifies all the switch blocks we have hanging around
        - releases us from special casing all the stdlib-used types like dirent, big.*, etc
    
      Status: under consideration. depends on how much of the heavy lifting generics can do.


    * better namespacing?
        - ... and explicit embedding of structs as struct fields without using the 'any' type.
        - could also properly handle sane prefixing of stdlib funcs too.
      
      Status: unlikely to proceed. this is quite out of scope for the requirements. however, it may
                not be difficult to add. would probably need to add another identifier sub-type for
                namespace tokens. (as was done for constants).


    * handle multi-dimensional arrays better (as lvalues)

      Status: need to rework doAssign function to reduce its bulk first and handle lvalues better, 
                or push all of the work back into the evaluator for lvalues. that would probably be
                for the best, but i just can't bring myself to rework it for the limited benefits.
                this one is a maybe.


    * would a vec3 base type be useful at all? probably not, but not difficult to add.

      Status: unlikely. can't see the need for the type yet. this may change, but it feels like a
                new feature just for the sake of it currently.

    * remaining issues post bind_int() changes:
        - race cond on ident write (vset): see ~/ttest
            - mainly to do with the time between reading a value and performing 
                doAssign() to update it in wrappedEval() function.
            - we can't lock the read+write as the read may invoke further 
                function calls recursively calling back through wrappedEval().
        - this is to be expected. you can't protect shared globals during fast
            switches without agressive locking.
        - we have a little protection around some operations, but it breaks down
            at high speeds. the protection is more for the implementation internals.

      Status: don't think i'll be doing much about this, except:
                - advising avoiding using shared memory at speed
                - maybe add some locking capability at the user level
                - advising to make changes to shared state sporadically in batches.
            it's a lot of work to fix this for a toy language.

    * add big.Rat?

      Status: very little work actually needed to do this, it's just more of the same as was done
                for big floats and ints. however, it is even more special casing without a driving
                requirement. if i decide against proper types (see above) then maybe will add this
                as already done for other bigs. not high on the priority list though.


    * do something about the mess that is lib-list.go

      Status: again, this depends on generics adoption. it would seem to be the only sane way to 
                reduce the mess.


    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

      Status: no plans to implement.


