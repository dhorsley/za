

BUGS
----

lots, i'm sure.


TODO
----

    * see github.com/dhorsley/za/issues for TODO work which is under real consideration.

    * anything else below is more, um, aspirational or undecided.
    

LATER / UNDECIDED
-----------------

    * add module.enum_name(.item_name) support to enums for imported modules.
        - currently, there is potential for clashing on module import for these things:
            - enum names
            - struct names
            - function names
            - variable names (that have been setglob'ed)
        - local variables are discarded anyway post-import.
        - function names can be preceeded by the module_name or module_alias to avoid conflict.
        - however, enums do not have this facility, as it would mean supporting a double dot when
            referencing the item_names.

        - supporting this would mean either a) solving that issue either holistically for
            all such references, b) special-casing enum lookups or c) introducing new operators.

        - i'm not particularly in favour of b) or c) if avoidable, and we may as well fix this for
            struct names at the same time. 

        - we put ourselves in this situation by design as structs/enum were intended to be a simple
            mechanism and were bolted on post-creation. however, this would be a good thing to fix.

        - not doing anything with this until i have a workable idea.


    * add some kind of try-like operator
        - would just be to cut down some of the necessary error handling, in a limited number 
          of circumstances. no driving requirement for this, would just be nice to have.
        - would either have to be a prefix, like ?, ??, try or something else,
          or... a suffix which i don't have a lot of spare.
        - or... a builtin lib func?
        - will consider this more if it becomes an issue.

    * add a test mode that *does not* test imported modules.
        - i.e. only test the main file and assume the modules are already tested.
        - currently, everything gets tested all the time.

    * change parser.prev and parser.preprev to pointers?
        - maybe won't make much difference, but should check.

    * user and group builtins for linux?
        - i don't think this is necessary, especially as it would be so different between OS.
        - however, it makes scripting the stuff easier for a user by far if we support with builtins.
        - not doing this one yet, but still a possibility.


    * short-circuit evaluation of booleans
        - there is a case to be made, and it has been done previously by many others, that you should
            not permit short-circuiting when there is a possibility of side-effects in the elided 
            expressions. 
        - because of this, our current stance is that we do not perform short-circuiting.
        - however, it is also true that the evaluation strategy we use does not allow for it anyway :)
        - this may change in the future, it's open to debate. it would mean changing some
            fundamentals in the behaviour of our evaluator, which may cause slower evaluation as
            more state will need passing around.

      Status: t.b.d.


    * better namespacing?
        - ... and explicit embedding of structs as struct fields without using the 'any' type.
        - could also properly handle sane prefixing of stdlib funcs too.
      
      Status: unlikely to proceed. this is quite out of scope for the requirements. however, it may
                not be difficult to add. would probably need to add another identifier sub-type for
                namespace tokens. (as was done for constants).


    * handle multi-dimensional arrays better (as lvalues)

      Status: need to rework doAssign function to reduce its bulk first and handle lvalues better, 
                or push all of the work back into the evaluator for lvalues. that would probably be
                for the best, but i just can't bring myself to rework it for the limited benefits.
                this one is a maybe.


    * add big.Rat?

      Status: very little work actually needed to do this, it's just more of the same as was done
                for big floats and ints. however, it is even more special casing without a driving
                requirement. if i decide against proper types (see above) then maybe will add this
                as already done for other bigs. not high on the priority list though.


    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

      Status: no plans to implement.


