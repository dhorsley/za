


1.1.0   will be the release version

    * more library tests


1.0.9   bug fixes and documentation updates

    * more library tests


1.0.8   testing more alternative shells as a coprocess.
         done: bash, zsh (partial), ash (partial), sh (partial)
         todo: zsh (complete) , sh (complete), ash (complete), dash, others? (WSL, mingw, powershell, cmd)

        some of those listed will only be used for command execution and not as a coprocess. However, we may
         still be able to retrieve info from them at startup.

        not expecting any problems in behaviour, but should try to populate some other za system
         variables from those shells and look for peculiarities.

    * consider adding an optional taglist and filtering mechanism for TEST..ENDTEST.

    * more library tests
    * more example code

---------------------------------------------------------------------------------------------

LATER
-----

* windows keypress() (getch function):

    * working now, but modifier keys (shift, ctrl, etc) all throw a keypress into 
        the input buffer, effectively triggering the Read. This leaves the go routine
        hanging pending the second part of the keypress even after the timeout value
        has been exceeded.

    * it's not a big issue, but could do with a workaround. seems to be part of the 
        way that ReadConsoleInput and PeekConsoleInput work in Windows. 

    * still some timing issues to deal with. key debounce seems to be around 50-100ms minimum on windows.
        this affects keypress use with a timeout specified, as a timeout may occur before key up and debounce complete.

        * we either need to figure a way to make it wait patiently and report lag or put stricter limits in place.

* console_windows is drifting quite far from console_linux now. not all functionality can be/needs to be ported over
    to windows, but should do some of it at some point, in the distant future.

* we could use some way of dealing with large files, for convenience. it isn't the goal of the language to handle this, 
    but it seems like an easy win. we can either add access to mmap methods of go libraries and/or some sequential and 
    random access file operations. (fopen, fclose, fseek, fread, fscanf, fwritef, etc) 

    * might also be useful to have this integrate with FOREACH somehow.


UNDECIDED
---------

* WHEN...ENDWHEN
    * multiple options in IS?
    * fall-through? veering towards "no" for this.

* ultimately, change interactive mode to use readline or similar with better utf-8 support.
    * as usual, really low priority on this. i only wanted it for Â£ symbols!


