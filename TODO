
TODO
----


KERNEL PARAMETER TUNING
-----------------------

* TODO: Kernel parameter tuning support
    - sysctl_get(parameter) - get kernel parameter value
    - sysctl_set(parameter, value) - set kernel parameter value
    - sysctl_list(category) - list parameters by category
    - sysctl_persist(parameter, value) - set parameter persistently
    - sysctl_validate(parameter, value) - validate parameter value
    - sysctl_categories() - list available parameter categories
    - sysctl_restore_defaults() - restore default kernel parameters


CORE FIREWALL DETECTION & MANAGEMENT
------------------------------------

* TODO: Active firewall detection (not just available)
    - nftables: kernel module check + active rules detection
    - firewalld: D-Bus connection + active service detection  
    - pf (BSD): CLI wrapper + active rules detection
    - Windows Firewall: WMI connection + active profiles detection

* TODO: Unified firewall API
    - fw_capable() - detect active firewall with capabilities
    - fw_guard() - safe guard for firewall operations
    - fw_enable(firewall_type) - enable specific firewall
    - fw_disable() - disable current active firewall
    - fw_add_rule(protocol, port, action) - add firewall rule
    - fw_remove_rule(protocol, port, action) - remove firewall rule
    - fw_list_rules() - list current firewall rules
    - fw_get_stats() - get firewall statistics

* TODO: Platform-specific native library integration
    - nftables: github.com/google/nftables (direct netlink)
    - firewalld: D-Bus interface (direct service communication)
    - Windows Firewall: WMI/COM interface (direct Windows API)
    - pf: CLI wrapper (no native library available)

* TODO: Privilege checking and security validation
    - fw_has_privileges() - check if user has firewall management permissions
    - Platform-specific privilege validation (root, sudo, doas, Windows admin)
    - Automatic privilege requirement detection and error reporting

* TODO: Cross-platform consistency
    - Same API functions work across all supported platforms
    - Automatic platform detection and appropriate firewall selection
    - Unified error handling and status reporting


PLUGIN ARCHITECTURE FOR CUSTOM FIREWALLS
----------------------------------------

* TODO: Custom firewall plugin registration system
    - fw_register_plugin(firewall_type, handler_functions)
    - fw_unregister_plugin(firewall_type)
    - Plugin detection integration with native firewall detection
    - Plugin capability reporting and validation

* TODO: Plugin interface specification
    - fw_detect() - detect if firewall is active
    - fw_enable() - enable the firewall
    - fw_disable() - disable the firewall  
    - fw_add_rule(protocol, port, action) - add firewall rule
    - fw_remove_rule(protocol, port, action) - remove firewall rule
    - fw_list_rules() - list current rules
    - fw_get_stats() - get firewall statistics
    - fw_capabilities() - list of supported capabilities

* TODO: Example plugins for legacy firewalls
    - iptables plugin (CLI wrapper)
    - ufw plugin (Ubuntu firewall)


ADVANCED FIREWALL FEATURES
--------------------------

* TODO: Real-time firewall monitoring
    - fw_monitor_events() - real-time event streams
      - these should be unified so we don't need, for example, separate event lookups such as:
        - fw_nftables_events() - netlink event monitoring
        - fw_firewalld_events() - D-Bus event monitoring
        - Windows Firewall events - WMI event monitoring
        - pf events - CLI-based event monitoring

* TODO: Rate monitoring and statistics
    - fw_rate_monitor() - hits/second monitoring
    - fw_rate_alert(threshold) - rate threshold alerts
        - how to do this without a separate event loop?
        - ... or spin one up dynamically when monitors added?
    - Rate history tracking and anomaly detection
    - Performance impact monitoring


FIREWALL EVENT LOGGING AND AUDIT
--------------------------------

* TODO: Firewall event logging and audit
    - fw_log_events() - capture firewall events
    - fw_audit_trail() - comprehensive audit logging
    - fw_compliance_report() - compliance reporting
    - fw_security_analysis() - security analysis and recommendations

    NOTES
    -----

    * All firewall operations should respect an "only one active firewall" principle
    * Native libraries should be used where possible (nftables, firewalld, Windows Firewall)
    * CLI wrappers only when no native library is available (pf)
    * Security and privilege validation is critical for all firewall operations
    * Cross-platform consistency is a key design principle
    * Performance and resource efficiency are considerations


LATER / UNDECIDED
-----------------

    * add install note for windows w/wsl stating that sudoers file may need 
        updating with : Defaults env_keep=WSL_DISTRO_NAME
        and possibly other env vars, depending on user requirements.

    * probably we require many other similar notices/warning/info about OS specific caveats.



