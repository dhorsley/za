

BUGS
----

lots, i'm sure.


TODO
----

    * need to put a firm reminder in docs/help to use clean and other sanitisation calls
        around data input. 

        - The PROMPT statement will automatically remove nestings of {} from input.
        - Any user input which may be assigned or otherwise interpolated should be run
            through the clean() lib call.
            - i.e. input_var.clean
        - Any standard input should be treated similarly.
        - Any other form of data input should be considered before allowing people or other
            systems to submit data through it.
        - Other calls exists for cleansing inputs:
            - stripquotes, stripcc, stripansi, addansi, clean, html_escape, trim, filter
            - the ~, ~i and ~f regex operators
            - PROMPT also has the optional regex validation feature.
        - Verification and validation are not hard to write for yourself.
        - permit() options exists for stopping some bad stuff:
            - permit("eval",bool)   : enable/disable the eval() lib call
            - permit("shell",bool)  : enable/disable shell command execution
            - interpol(bool)        : enable/disable string interpolation

        - A reminder that this is not intended to be a secure language
            - the onus is on the programmer to do sane things.
        
        - It should be safe to use with adequate care and forethought.
            - That does not include exposing it to unsanitised input and hoping for the best.


    ++ add more examples in docs/

    # may also be worth adding something for controlling local echo
    # igncr, etc like stty would. we already import termios so this
    # shouldn't be a problem.


LATER / UNDECIDED
-----------------

    * review/fix all of the "@todo"'s in the source! (currently about 20 of them)
        - checked/partially done.
            - the remaining ones aren't anything to worry about just yet.
            - just a couple left:
                - MODE_STATIC entry points and web page proxy body rewrites
                - these are definitely not getting done yet.
                    - no technical reason not to, other than laziness on my part.
                    - they can wait for next major version - no rush for these.

    * make fixed size variable backing stores dynamic arrays?
        - currently a fixed var count per func of 320
        - this should be autoscaled instead as it slows down recursion and reserves a little more
            memory than really necessary.
        - it was previously dynamic under the last var storage scheme, just have not got around
            to doing anything about it yet.

        - update: tested with a fixed size of 32 instead, but didn't change overheads significantly
            enough to warrant making this dynamic. negligable speed differences with x10 smaller
            backing arrays.

            also tested with fixed size of 160 (half) and made no difference to mem alloc in eg/mon.

            so, probably going to scrap the dynamic change and may even increase the fixed size.
            ( empty var struct is 40 bytes. 320*40=12800 bytes per func instance )
            obviously, we wouldn't do this in a compiler or anything trying to approach optimal.
            it just doesn't feel like a burden worth reducing for expected use cases.

    * ultimately, change interactive mode to use readline or similar with better utf-8 support
        (because I'm not likely to make many more changes to the in-built line editor):
        
        - some escaped chars (e.g. \") screw with the nesting check in interactive mode.
        - plenty of utf-8/extended char set keys still not working in interactive mode.
            - e.g. · µ n ”“ ¢ «» and similar.
        - cursor movement over utf8 chars in input (and utf8 char deletes) problematic.
        - update: this just hasn't proven to be much of an issue yet. it is certainly an inconvenience,
            but it is staying at the bottom of the change list indefinitely.

