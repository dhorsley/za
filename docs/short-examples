
Interacting with shell, process results, format output

foreach f in | "ls -1" . grep(".*\.go")
    print format("-- %s --", f.pad(0,40))
endfor

Same example, using builtin instead of shell:

foreach f in dir() ?> `#.name ~i ".*\.go"`
    print format("-- %s --", f.name.pad(0,40))
endfor

Notes:

    | as a unary operator executes following string as a shell command.
    grep, format, pad and dir are builtin functions.
    ~i is the case-insensitive regex matching operator.
    on..do.. is a short-form if statement without an else clause.

------------------------------------------------------------------------------
Is the 'upx' command on the path?

print | "which upx | wc -l" . bool

Notes:

    '.' when not between a struct-bearing expression and a non-field name is 
     used to pass the preceding expression as the first argument of the 
     following named function (bool() in this case.)
    the bool() builtin converts an int/string to a bool type. 
     (0/"0|false"==false, 1/"1|true"==true)

------------------------------------------------------------------------------
Pick even numbers from a list:

1..15 ?> "#%2==0"

Returns: [2 4 6 8 10 12 14]

------------------------------------------------------------------------------
Sorting numbers:

Note: Please remember that list literals are untyped by default, so, should
you require a numeric sort, you should cast to []int first:

# i.e. wrong:
[2,1,10,20,3,7,40].kind
[]interface {}
[2,1,10,20,3,7,40].sort
[1 10 2 20 3 40 7]

# correct:
[2,1,10,20,3,7,40].list_int.kind
[]int
[2,1,10,20,3,7,40].list_int.sort
[1 2 3 7 10 20 40]

------------------------------------------------------------------------------
Stranger example... ternary with code blocks

is_dir(path_string) ? ${
    stat {path_string}
} : ${
    echo "nope"
}

Note: may be useful as an alternative to if..else..endif when processing
shell commands.

------------------------------------------------------------------------------


