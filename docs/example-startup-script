
# set prompt

def unicode(a,b)
    return format("%c",as_int((a << 8) + b))
end

def form_logo()
    s=bg256(0x10)+unicode(0xf8,0xff)+" "+fg256(0x10)
    case release_id()
    is "ubuntu"
        s=bg256(0xd6)+"[#0] U "+fg256(0xd6)
    is "popos"
        s=bg256(0x4a)+"[#6] P "+fg256(0x4a)
    is "redhat"
        s=bg256(0xa0)+"[#7] R "+fg256(0xa0)
    endcase
    return s+bg256(0x12)+endcap
end

def form_time()
    return " %02d:%02d ".format(time_hours(),time_minutes())
end

def form_git()
    @last_cmd_status=last()

    if inside_git or cwd() != last_git_path
        @gs={git status}
        @last_git_path=cwd()
    endif

    @inside_git=false

    if gs.okay

        gs_text=gs.out.split("\n")
        @inside_git=true

        _=fields(gs_text[0])
        if NF>0
            branch=F[NF]
        else
            branch=""
        endif

        _=fields(gs_text[1])
        if NF>3
            str_status=F[4]
            status="[#2]✕"
            on str_status=="up-to-date" do status="[#4]✓"
            return bg256(0xe2) + fg256(0x11) + " ({branch} {status}) " + bg256(0) + fg256(0xe2)
        endif

    endif
    return ""
end

def form_end_prompt()
    if last_cmd_status == 0
        return "[#bold][#4] ➜ "
    else
        return "[#bred] ✗ "
    endif
end

def form_dir()
    if inside_git
        path="…/"+$pb cwd()
    else
        path=cwd()
    endif
    return " "+path+" "
end

def form_prompt()
    cached_fg=form_git()
    return ( form_logo() + bg256(0x12) + fg256(0x25) + form_time() + bg256(0x1b) + fg256(0x12) + endcap +
         bg256(0x1b) + fg256(0xc3) + form_dir() + bg256(0xe2) + fg256(0x1b) + endcap +
         cached_fg + endcap + "[#-][##]" + form_end_prompt() + "[#-][##]"
    )
end

inside_git=false
last_cmd_status=0
last_git_path=""
endcap="▙[#-]"
gs={git status}

prompt=(form_prompt())

# end-set-prompt

ignore_fonts=["future","emboss","emboss2","bubble","block","mono9","mono12","term","mini"]
ignore_fonts+=["smbraille","script","smascii12","circle","smscript","bigascii12","bigascii9","letter"]
ignore_fonts+=["roman","lean","smascii9","ascii9","mnemonic","bigmono12"]

banner=` {="@language".sysvar} - version {="@version".sysvar} `

if is_installed("figlet")
    fontdir="/usr/share/figlet"

    variants = (
        dir(fontdir) ?> `($pe #.name) ~i "^(flf|tlf)"` 
    ) -> "$pn #.name"

    # filter undesired out
    variants = variants ?> `not # in ignore_fonts`

    seed(-1)
    fv=variants[variants.len.rand-1]
    tlf=false
    on is_file("{fontdir}/{fv}.tlf") do tlf=true
    on is_file("{fontdir}/{fv}." + (tlf?"tlf":"flf")) do p=${toilet -f {fv} -k -w {=term_w()} "{=banner}"}
    unset variants, fontdir, tlf
else
    p=banner
endif

println "\n\n[#5]{p}[#-]\n"
help

unset banner,p,ignore_fonts

# enum helpers
enum s3sum ( okay=0, warn, file, sum )

