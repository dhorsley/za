#!/usr/bin/za

# Test script for Levenshtein distance implementation
# This validates both the stdlib function and typo detection

println "=== Testing Levenshtein Distance Function ==="

# Test basic functionality
println "levdist('hello', 'hello'): ", levdist("hello", "hello")  # Should be 0
println "levdist('hello', 'helo'): ", levdist("hello", "helo")    # Should be 1 (deletion)
println "levdist('hello', 'helllo'): ", levdist("hello", "helllo") # Should be 1 (insertion)
println "levdist('hello', 'hxllo'): ", levdist("hello", "hxllo")  # Should be 1 (substitution)

# Test keyword-like examples
println "levdist('while', 'whille'): ", levdist("while", "whille")
println "levdist('define', 'deffine'): ", levdist("define", "deffine")
println "levdist('foreach', 'forrech'): ", levdist("foreach", "forrech")
println "levdist('endwhile', 'endwhille'): ", levdist("endwhile", "endwhille")

# Test longer distances
println "levdist('while', 'completely'): ", levdist("while", "completely")  # Should be > 2

println "\n=== Testing Case Sensitivity ==="
println "levdist('WHILE', 'while'): ", levdist("WHILE", "while")

println "\n=== Typo Detection Test ==="
println "To test interactive typo detection:"
println "1. Enable enhanced error reporting: enhanced_errors(true)"
println "2. Try typing: 'whille' (should suggest 'while')"
println "3. Try typing: 'deffine' (should suggest 'define')"
println "4. Try typing: 'forrech' (should suggest 'foreach')"
println "5. Try typing: 'iff' (should NOT suggest - too short)"

println "\nTest completed!" 