#!/usr/bin/za

module "mod_build/defines" as defs

var strip_enable,upx_enable bool

tgt="default"
ipath="/usr/bin"
gobin="go"

for a = 1 to argc()
    input do_what optarg a
    when $lc do_what
        is "help"
            exit 0,`\n./build [libc|win|alpine] [upx] [strip] [-path "install_path"]\n`
        is "upx"    ; upx_enable=true
        is "strip"  ; strip_enable=true
        is "alpine" ; tgt="alpine"
        is "libc"   ; tgt="libc"
        is "win"    ; tgt="win"
        is "beta"   ; gobin="gobe"
        is "-path"
            ipath=argv()[a]
            a++
            println "install path changed to {ipath}"
    endwhen
endfor


#
# main
#

GCLIMIT = "madvdontneed=0 GOGC=800 GOMAXPROCS=4"
GCFLAGS = "-gcflags='-B -l=4'"

GCCGOFLAGS=""
doc " uncomment line below when testing with GCC-GO compiler:
    GCCGOFLAGS = `-compiler=gccgo -gccgoflags='-O3 -march=native -ffast-math -lpthread'`
"

bvers = "1.1.7"
bdate =< date "+%d-%m-%Y %H:%M"

strStrip    = strip_enable ? "-stripped" : ""
stripFlags  = strip_enable ? "-s -w"     : ""

upxfound= ${which upx | wc -l} . trim(0) . as_bool

if ! os() ~ "^freebsd"
    when tgt
    is "default"
        on defs::buildDefault(bvers,bdate)!=0 do exit defs::e.build,"Failed to build default version."
    has tgt ~i "^(alpine)$"
        on defs::buildMusl(bvers,bdate)!=0 do exit defs::e.build,"Failed to build musl version."
    is "libc"
        on defs::buildLibc(bvers,bdate)!=0 do exit defs::e.build,"Failed to build libc version."
    is "win"
        on strip_enable do "Windows build does not strip!".defs::warning
        on defs::buildWin(bvers,bdate) != 0 do exit defs::e.build,"Failed to build windows version."
    or
        exit defs::e.notfound,"Target type unknown."
    endwhen
else
    on defs::buildFreeBSD(bvers,bdate) != 0 do exit defs::e.build,"Failed to build bsd version."
endif


if is_file("za")
    if not os() ~ "^freebsd"
        if upxfound
            if tgt!="win"
                on strip_enable and not tgt ~i "^(alpine)$" do | strip -s -w za
                on upx_enable                                   do | upx za
            endif
        else
            "Note: Please consider installing the upx package for compressing the binary.".defs::warning
        endif
    else
        # don't strip/upx freebsd version
    endif
endif


when tgt
contains "^(default|alpine|libc)$"
    "Installing {tgt} build to {ipath}".defs::progress
    | sudo cp -f za {ipath}
    | sudo chmod 755 {ipath}/za
endwhen


