
These tests are not intended to provide a high level of coverage initially.

They are intended to be added to over time and to set a general framework for 
testing the standard library. 

libcov is only present to highlight where the gaps are in the most general
sense to make it easy to come back in later and backfill the tests.

Many of the existing tests are, well, shallow at best. In a lot of cases I 
just haven't thought of a good way to do them yet, and for others, I'm so
inherently lazy that they haven't proved interesting enough to bother.

As and when bugs appear test cases should be introduced where missing, however
waiting for me to complete these is only going to hold up wider testing.

The main point of the tests is to add extra example code, which is why the
testing is done with Za rather than Go. It also leads to finding things which
are difficult to perform in Za and hence offers the chance to add more library
functions which target those areas.

I'm not, as must be painfully obvious, the biggest fan of unit tests, but as
so many people find them necessary, they are a feature of the language. I don't
have the experience necessary of testing to do the job properly myself. Hopefully,
the tests can grow over time in a reasonable manner. 

Sure, it would be great to get to 100% coverage with good quality tests, and I
am open to adding further built-in options to aid this, it's just not my own 
priority for the language at launch. For example, I can see that some way of
automating test input ranges might be useful, but I cannot justify it to myself
without enough demand.

Additionally, as many of the functions are quite simple wrappers around Go library
calls I feel that we can rely quite heavily on the testing that already happens 
around those and focus on errors introduced in their wrapping.


