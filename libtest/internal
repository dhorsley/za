#!/usr/bin/za

define header(n)
    println "\n[#1]{n}[#-]"
enddef

test "last" group "internal"
    header(_test_name)

    println "1 error should appear below."
    | false
    fl=last()
    | true
    tl=last()

    println "fl->{fl}"
    println "tl->{tl}"

    assert fl==1
    assert tl==0

endtest

test "last_out" group "internal"
    header(_test_name)
    println "1 error should appear below."
    | stat notafile
    assert match(last_out(),`stat: cannot stat.* 'notafile': No such file`)
    | stat . >/dev/null
    println format("%q",last_out())
    assert last_out()=="\x00"
endtest

test "bash_version" group "internal"
    header(_test_name)
    bv =|echo -n "$BASH_VERSION"
    assert bv!=""
    assert match(bv,`[3-9]\.[0-9]+\.[0-9]+`)
endtest

test "bash_versinfo" group "internal"
    header(_test_name)
    bvi=|echo -n "$BASH_VERSINFO"
    assert bvi!=""
    assert match(bv,`[0-9]+`)
endtest



test "user" group "internal"
    header(_test_name)
    u=|echo -n $USER
    assert user()==u
endtest

test "os" group "internal"
    header(_test_name)
    os=|echo -n $OSTYPE
    assert os()==os
endtest

test "home" group "internal"
    header(_test_name)
    h=|echo -n $HOME
    assert home()==h
endtest

test "lang" group "internal"
    header(_test_name)
    l=|echo -n $LANG
    assert lang()==l
endtest

test "release_name" group "internal"
    header(_test_name)
    rel=stripquotes(get_value(read_file("/etc/os-release"),"NAME"))
    | echo -en "{rel}" | hexdump -C
    | echo -en "{release_name()}" | hexdump -C
    assert rel==release_name()
endtest

test "release_version" group "internal"
    header(_test_name)
    osrelver=stripquotes(get_value(read_file("/etc/os-release"),"VERSION_ID"))
    assert match(release_version(),"^"+osrelver)
endtest

test "release_id" group "internal"
    header(_test_name)
    osid=stripquotes(get_value(read_file("/etc/os-release"),"ID"))
    assert match(osid,"^"+release_id())
endtest

test "winterm" group "internal"
    header(_test_name)
    doc `Cannot test`
endtest

test "hostname" group "internal"
    header(_test_name)
    hn=|hostname
    assert hostname()==hn
endtest

test "argc" group "internal"
    header(_test_name)
    doc `Cannot test`
endtest

test "argv" group "internal"
    header(_test_name)
    doc `Cannot test`
endtest

test "key" group "internal"
    header(_test_name)
    a["test"]=42; a["one"]=0; a["two"]=0
    doc "a->{a}"
    assert key("a","test")==true
    doc "b->{b}"
    assert key("b","test")==false
endtest

define test_globkey()
    return globkey("tg","test")
enddef

define test_getglob()
    return getglob(`gg`)
enddef

define test_getglobelement(e)
    return getglob(`tg["{e}"]`)
enddef

test "globkey" group "internal"
    header(_test_name)
    tg["test"]=42; tg["one"]=0; tg["two"]=0
    doc "tg->",tg
    assert test_globkey()==true
endtest

test "getglob" group "internal"
    header(_test_name)
    tg["test"]=42; tg["one"]=0; tg["tgtest"]=99; tg["two"]=0
    gg=42
    doc "tg->",tg
    doc "gg->",gg
    assert test_getglob()==42
    assert test_getglobelement("tgtest")==99
endtest

test "unmap" group "internal"
    header(_test_name)
    a["one"]=0; a["two"]=0; a["test"]=42
    doc "a->{a}"
    foreach v in a
        unmap("a",key_v)
    endfor
    doc "new a->{a}"
    assert key("a","test")==false
    assert len(a)==0
endtest

test "pid" group "internal"
    header(_test_name)
    l=| ps -aef | grep "za -t internal" | grep -v grep
    assert field(l,2)==string(pid())
endtest

test "ppid" group "internal"
    header(_test_name)
    l=| ps -aef | grep "za -t internal" | grep -v grep
    assert field(l,3)==string(ppid())
endtest

test "system" group "internal"
    header(_test_name)
    blah=42
    answer=system("echo {blah}")
    assert answer=="42"
endtest

test "local" group "internal"
    header(_test_name)
    blah=42
    assert local("blah")==42
endtest

test "clktck" group "internal"
    header(_test_name)
    doc "clock ticks retrieved = {clktck()}"
    assert is_number(clktck())
    assert clktck()>=50 && clktck()<=200
endtest


test "local" group "internal"
    header(_test_name)
    blah=42
    assert local("blah")==42
endtest

doc `
    "eval", "term_w", "term_h", "pane_h", "pane_w","utf8supported","locks", "coproc", "shellpid", "has_shell",
    "globlen","len","length","tco", "echo","getrow","getcol","unmap","await","getmem",
`

test "execpath" group "internal"
    header(_test_name)
    assert execpath()!=""
    assert match(execpath(),"/")
    assert execpath()==cwd()
endtest

test "interpol" group "internal"
    header(_test_name)
    interpol(true)
    a=42
    b="{a}"
    interpol(false)
    c="{a}"
    interpol(true)
    assert string(a)==b
    assert string(a)!=c
    assert b!=c
endtest

test "ansi" group "internal"
    header(_test_name)
    ansi(false)
    s="[#1]test[#-]"
    doc "s->",s
    e=ccformat(s)
    ansi(true)
    t="test"
    doc "s->",s
    doc "e->",e
    doc "t->",t
    assert e==t
    assert e!=s
endtest










