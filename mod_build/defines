#!/usr/bin/za

#
# Procedures for alternative binary compilations
#

enum e { okay=0, build, syntax, notfound }

define buildMusl(build_version,build_date)
    GCLIMIT=GCLIMIT
    GCFLAGS=GCFLAGS
    print "[#4]Alpine build[#-]\n"
    | CGO_ENABLED=0 GOOS=linux GOARCH=amd64 {GCLIMIT} go build {GCFLAGS} -ldflags '-w -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=alpine"' -tags netgo -installsuffix netgo -tags noui
    r=last()
    on r>0 do print last_out()
    | cp za za.alpine
    return r
enddef

define buildLibc(build_version,build_date)
    GCLIMIT=GCLIMIT
    GCFLAGS=GCFLAGS
    print "[#4]Libc build[#-]\n"
    | {GCLIMIT} go build {GCFLAGS} -ldflags '-s -w -extldflags "-O2" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=glibc"' za
    r=last()
    on r>0 do println last_out()
    | cp za za.dynamic
    return r
enddef

define buildFreeBSD(build_version,build_date)
    GCLIMIT=GCLIMIT
    GCFLAGS=GCFLAGS
    print "[#4]BSD build[#-]\n"
    | {GCLIMIT} go build {GCFLAGS} -ldflags '-s -w -extldflags "-O2" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=bsd"' za
    r=last()
    on r>0 do println last_out()
    | cp za za.dynamic
    return r
enddef

define buildWin(build_version,build_date)
    GCLIMIT=GCLIMIT
    GCFLAGS=GCFLAGS
    print "[#4]Windows build[#-] ~ [#i1]experimental![#i0]\n"
    | CGO_ENABLED="1" CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ GOOS="windows" GOARCH="amd64" {GCLIMIT} go build {GCFLAGS} -ldflags '-extldflags "-Ofast" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=windows"' za
    r=last()
    on r>0 do println last_out()
    | cp za.exe za.win64
    return r
enddef


