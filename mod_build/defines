#!/usr/bin/za

#
# Procedures for alternative binary compilations
#

define buildMusl(build_version,build_date,strip_opts,upx_enable)
    GCLIMIT=getglob("GCLIMIT")
    print "[#4]Alpine build[#-]\n"
    | GOOS=linux GOARCH=amd64 {GCLIMIT} go build -ldflags '-d -s -w -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=alpine"' -tags netgo -installsuffix netgo
    r=last()
    if r>0
        print "ERROR\n"
        print last_out()
    endif
    | strip {strip_opts} za
    | cp za za.alpine
    if upx_enable
        getglob("ufound")==1 do | upx za.alpine
    endif
    | ./za -v
    return r
enddef

define buildLibc(build_version,build_date)
    GCLIMIT=getglob("GCLIMIT")
    print "[#4]Libc build[#-]\n"
    | {GCLIMIT} go build -ldflags '-extldflags "-Ofast" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=glibc"' za
    r=last()
    on r>0 do println last_out()
    | cp za za.dynamic
    | ./za -v
    return r
enddef

define buildWin(build_version,build_date,strip_opts)
    GCLIMIT=getglob("GCLIMIT")
    print "[#4]Windows build[#-] ~ [#i1]experimental![#i0]\n"
    | GOOS="windows" GOARCH="amd64" {GCLIMIT} go build -ldflags '-extldflags "-Ofast" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=windows"' za
    r=last()
    on r>0 do println last_out()
    #
    #| strip {strip_opts} za.exe
    # ^^ currently removed as it cause windows security defaults to kick in on execution. ^^
    #
    | cp za.exe za.win64
    return r
enddef


