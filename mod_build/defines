#!/usr/bin/za

#
# Procedures for alternative binary compilations
#

enum e ( okay=0, build, syntax, notfound )


define warning(s) ; println "[#6]Warning: {s}[#-]"; end
define progress(s); println "[#4]{s}[#-]"; end

define buildDefault(build_version,build_date)
    print "[#4]Standard build[#-]\n"
    | CGO_ENABLED=1 GOOS=linux GOARCH=amd64 {=GCLIMIT} {=gobin} build {=GCFLAGS} -ldflags '{=stripFlags} -X "main.BuildDate={build_date}" -extldflags "-static -O2" -X "main.BuildVersion={build_version}" -X "main.BuildComment=cgo-static{=strStrip}"' za
    r=last()
    on r>0 do print last_out()
    return r
end

define buildMusl(build_version,build_date)
    print "[#4]musl build (alpine/aws)[#-]\n"
    | CGO_ENABLED=0 GOOS=linux GOARCH=amd64 {=GCLIMIT} {=gobin} build {=GCFLAGS} -ldflags '{=stripFlags} -X "main.BuildDate={build_date}" -extldflags "-O2" -X "main.BuildVersion={build_version}" -X "main.BuildComment=alpine{=strStrip}"' -tags netgo -installsuffix netgo
    r=last()
    on r>0 do print last_out()
    | cp za za.alpine
    return r
enddef

define buildLibc(build_version,build_date)
    print "[#4]Libc build[#-]\n"
    | {=GCLIMIT} {=gobin} build {=GCCGOFLAGS} {=GCFLAGS} -ldflags '{=stripFlags} -extldflags "-static -O2" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=glibc{=strStrip}"' za
    r=last()
    on r>0 do println last_out()
    | cp za za.dynamic
    return r
enddef

define buildFreeBSD(build_version,build_date)
    print "[#4]BSD build[#-]\n"
    | {=GCLIMIT} {=gobin} build {=GCFLAGS} -ldflags '{=stripFlags} -extldflags "-static -O2" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=bsd{=strStrip}"' za
    r=last()
    on r>0 do println last_out()
    | cp za za.dynamic
    return r
enddef

define buildWin(build_version,build_date)
    print "[#4]Windows build[#-] ~ [#i1]experimental![#i0]\n"
    | CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ GOOS="windows" GOARCH="amd64" {=GCLIMIT} {=gobin} build {=GCFLAGS} -ldflags '{=stripFlags} -extldflags "-Ofast" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=windows{=strStrip}"' za
    r=last()
    on r>0 do println last_out()
    | cp za.exe za.win64
    return r
enddef


