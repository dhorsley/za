#!/usr/bin/za

#
# Procedures for alternative binary compilations
#

define buildAlpine(build_version,build_date,strip_opts,upx_enable)
    GCLIMIT=getglob("GCLIMIT")
    print "[#4]Static build for Alpine[#-]\n"
    | GOOS=linux GOARCH=amd64 {GCLIMIT} go build -ldflags '-d -s -w -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=alpine"' -tags netgo -installsuffix netgo
    r=last()
    if r>0
        print "ERROR\n"
        print last_out()
    endif
    | strip {strip_opts} za
    | cp za za.alpine
    on upx_enable do on getglob("ufound")==1 do | upx za.alpine
    | ./za -v
    return r
enddef

define buildDynamic(build_version,build_date)
    GCLIMIT=getglob("GCLIMIT")
    print "[#4]Dynamic build[#-]\n"
    | {GCLIMIT} go build -ldflags '-extldflags "-Ofast" -X "main.BuildDate={build_date}" -X "main.BuildVersion={build_version}" -X "main.BuildComment=glibc"' za
    r=last()
    | cp za za.dynamic
    | ./za -v
    return r
enddef


